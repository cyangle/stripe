#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/error"
require "../models/gelato_verification_report_list"
require "../models/gelato_verification_session_list"
require "../models/get_accounts_created_parameter"
require "../models/identity_verification_report"
require "../models/identity_verification_session"

require "../models/provided_details_param"
require "../models/session_options_param"

module Stripe
  class IdentityApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>List all verification reports.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param verification_session [String?] Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.
    # @optional @param _type [String?] Only return VerificationReports of this type
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return VerificationReports that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GelatoVerificationReportList]
    def get_identity_verification_reports(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      verification_session : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GelatoVerificationReportList
      data, _status_code, _headers = get_identity_verification_reports_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, client_reference_id: client_reference_id, verification_session: verification_session, _type: _type, created: created, expand: expand)
      data
    end

    # &lt;p&gt;List all verification reports.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param verification_session [String?] Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.
    # @optional @param _type [String?] Only return VerificationReports of this type
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return VerificationReports that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GelatoVerificationReportList, Integer, Hash)] Stripe::GelatoVerificationReportList, response status code and response headers
    def get_identity_verification_reports_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      verification_session : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GelatoVerificationReportList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_identity_verification_reports(ending_before: ending_before, starting_after: starting_after, limit: limit, client_reference_id: client_reference_id, verification_session: verification_session, _type: _type, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#get_identity_verification_reports\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GelatoVerificationReportList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;List all verification reports.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param verification_session [String?] Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.
    # @optional @param _type [String?] Only return VerificationReports of this type
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return VerificationReports that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_identity_verification_reports(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      verification_session : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_identity_verification_reports(ending_before: ending_before, starting_after: starting_after, limit: limit, client_reference_id: client_reference_id, verification_session: verification_session, _type: _type, created: created, expand: expand).execute(&block)
    end

    GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_ENDING_BEFORE        = 5000
    GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_STARTING_AFTER       = 5000
    GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID  = 5000
    GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_VERIFICATION_SESSION = 5000
    GET_IDENTITY_VERIFICATION_REPORTS_VALID_VALUES_FOR__TYPE              = String.static_array("document", "id_number")

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_reports(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      verification_session : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.get_identity_verification_reports ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_client_reference_id = client_reference_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", client_reference_id.to_s.size, GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
        end
        unless (_verification_session = verification_session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("verification_session", verification_session.to_s.size, GET_IDENTITY_VERIFICATION_REPORTS_MAX_LENGTH_FOR_VERIFICATION_SESSION)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_IDENTITY_VERIFICATION_REPORTS_VALID_VALUES_FOR__TYPE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_reports"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["client_reference_id"] = client_reference_id.to_s if !client_reference_id.nil?
      query_params["verification_session"] = verification_session.to_s if !verification_session.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IdentityApi.get_identity_verification_reports",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing VerificationReport</p>
    # @required @param report [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IdentityVerificationReport]
    def get_identity_verification_reports_report(
      *,
      report : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IdentityVerificationReport
      data, _status_code, _headers = get_identity_verification_reports_report_with_http_info(report: report, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing VerificationReport&lt;/p&gt;
    # @required @param report [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IdentityVerificationReport, Integer, Hash)] Stripe::IdentityVerificationReport, response status code and response headers
    def get_identity_verification_reports_report_with_http_info(
      *,
      report : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IdentityVerificationReport, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_identity_verification_reports_report(report: report, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#get_identity_verification_reports_report\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IdentityVerificationReport.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an existing VerificationReport&lt;/p&gt;
    # @required @param report [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_identity_verification_reports_report(
      *,
      report : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_identity_verification_reports_report(report: report, expand: expand).execute(&block)
    end

    GET_IDENTITY_VERIFICATION_REPORTS_REPORT_MAX_LENGTH_FOR_REPORT = 5000

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_reports_report(
      *,
      report : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.get_identity_verification_reports_report ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"report\" is required and cannot be null") if report.nil?
        unless (_report = report).nil?
          OpenApi::PrimitiveValidator.validate_max_length("report", report.to_s.size, GET_IDENTITY_VERIFICATION_REPORTS_REPORT_MAX_LENGTH_FOR_REPORT)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_reports/{report}".sub("{" + "report" + "}", URI.encode_path(report.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IdentityApi.get_identity_verification_reports_report",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of VerificationSessions</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return VerificationSessions that were created during the given date interval.
    # @optional @param status [String?] Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param related_customer [String?]
    # @return [Stripe::GelatoVerificationSessionList]
    def get_identity_verification_sessions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      related_customer : String? = nil
    ) : Stripe::GelatoVerificationSessionList
      data, _status_code, _headers = get_identity_verification_sessions_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, client_reference_id: client_reference_id, created: created, status: status, expand: expand, related_customer: related_customer)
      data
    end

    # &lt;p&gt;Returns a list of VerificationSessions&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return VerificationSessions that were created during the given date interval.
    # @optional @param status [String?] Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param related_customer [String?]
    # @return [Tuple(Stripe::GelatoVerificationSessionList, Integer, Hash)] Stripe::GelatoVerificationSessionList, response status code and response headers
    def get_identity_verification_sessions_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      related_customer : String? = nil
    ) : Tuple(Stripe::GelatoVerificationSessionList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_identity_verification_sessions(ending_before: ending_before, starting_after: starting_after, limit: limit, client_reference_id: client_reference_id, created: created, status: status, expand: expand, related_customer: related_customer)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#get_identity_verification_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GelatoVerificationSessionList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of VerificationSessions&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return VerificationSessions that were created during the given date interval.
    # @optional @param status [String?] Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param related_customer [String?]
    # @return nil
    def get_identity_verification_sessions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      related_customer : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_identity_verification_sessions(ending_before: ending_before, starting_after: starting_after, limit: limit, client_reference_id: client_reference_id, created: created, status: status, expand: expand, related_customer: related_customer).execute(&block)
    end

    GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_ENDING_BEFORE       = 5000
    GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_STARTING_AFTER      = 5000
    GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID = 5000
    GET_IDENTITY_VERIFICATION_SESSIONS_VALID_VALUES_FOR_STATUS            = String.static_array("canceled", "processing", "requires_input", "verified")
    GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_RELATED_CUSTOMER    = 5000

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_sessions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      client_reference_id : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      related_customer : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.get_identity_verification_sessions ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_client_reference_id = client_reference_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", client_reference_id.to_s.size, GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_IDENTITY_VERIFICATION_SESSIONS_VALID_VALUES_FOR_STATUS)
        end

        unless (_related_customer = related_customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("related_customer", related_customer.to_s.size, GET_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_RELATED_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["client_reference_id"] = client_reference_id.to_s if !client_reference_id.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["related_customer"] = related_customer.to_s if !related_customer.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IdentityApi.get_identity_verification_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a VerificationSession that was previously created.</p>  <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IdentityVerificationSession]
    def get_identity_verification_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IdentityVerificationSession
      data, _status_code, _headers = get_identity_verification_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a VerificationSession that was previously created.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to retrieve a valid &lt;code&gt;client_secret&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; to allow re-submission.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IdentityVerificationSession, Integer, Hash)] Stripe::IdentityVerificationSession, response status code and response headers
    def get_identity_verification_sessions_session_with_http_info(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IdentityVerificationSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_identity_verification_sessions_session(session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#get_identity_verification_sessions_session\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IdentityVerificationSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a VerificationSession that was previously created.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to retrieve a valid &lt;code&gt;client_secret&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; to allow re-submission.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_identity_verification_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_identity_verification_sessions_session(session: session, expand: expand).execute(&block)
    end

    GET_IDENTITY_VERIFICATION_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION = 5000

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.get_identity_verification_sessions_session ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, GET_IDENTITY_VERIFICATION_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IdentityApi.get_identity_verification_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a VerificationSession object.</p>  <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>  <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>  <p>Related guide: <a href=\"/docs/identity/verify-identity-documents\">Verify your users’ identity documents</a></p>
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param options [Stripe::SessionOptionsParam?]
    # @optional @param provided_details [Stripe::ProvidedDetailsParam?]
    # @optional @param related_customer [String?] Token referencing a Customer resource.
    # @optional @param return_url [String?] The URL that the user will be redirected to upon completing the verification flow.
    # @optional @param _type [String?] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.
    # @optional @param verification_flow [String?] The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.
    # @return [Stripe::IdentityVerificationSession]
    def post_identity_verification_sessions(
      *,
      client_reference_id : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      related_customer : String? = nil,
      return_url : String? = nil,
      _type : String? = nil,
      verification_flow : String? = nil
    ) : Stripe::IdentityVerificationSession
      data, _status_code, _headers = post_identity_verification_sessions_with_http_info(client_reference_id: client_reference_id, expand: expand, metadata: metadata, options: options, provided_details: provided_details, related_customer: related_customer, return_url: return_url, _type: _type, verification_flow: verification_flow)
      data
    end

    # &lt;p&gt;Creates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;After the VerificationSession is created, display a verification modal using the session &lt;code&gt;client_secret&lt;/code&gt; or send your users to the session’s &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;Related guide: &lt;a href&#x3D;\&quot;/docs/identity/verify-identity-documents\&quot;&gt;Verify your users’ identity documents&lt;/a&gt;&lt;/p&gt;
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param options [Stripe::SessionOptionsParam?]
    # @optional @param provided_details [Stripe::ProvidedDetailsParam?]
    # @optional @param related_customer [String?] Token referencing a Customer resource.
    # @optional @param return_url [String?] The URL that the user will be redirected to upon completing the verification flow.
    # @optional @param _type [String?] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.
    # @optional @param verification_flow [String?] The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.
    # @return [Tuple(Stripe::IdentityVerificationSession, Integer, Hash)] Stripe::IdentityVerificationSession, response status code and response headers
    def post_identity_verification_sessions_with_http_info(
      *,
      client_reference_id : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      related_customer : String? = nil,
      return_url : String? = nil,
      _type : String? = nil,
      verification_flow : String? = nil
    ) : Tuple(Stripe::IdentityVerificationSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_identity_verification_sessions(client_reference_id: client_reference_id, expand: expand, metadata: metadata, options: options, provided_details: provided_details, related_customer: related_customer, return_url: return_url, _type: _type, verification_flow: verification_flow)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#post_identity_verification_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IdentityVerificationSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;After the VerificationSession is created, display a verification modal using the session &lt;code&gt;client_secret&lt;/code&gt; or send your users to the session’s &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;Related guide: &lt;a href&#x3D;\&quot;/docs/identity/verify-identity-documents\&quot;&gt;Verify your users’ identity documents&lt;/a&gt;&lt;/p&gt;
    # @optional @param client_reference_id [String?] A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param options [Stripe::SessionOptionsParam?]
    # @optional @param provided_details [Stripe::ProvidedDetailsParam?]
    # @optional @param related_customer [String?] Token referencing a Customer resource.
    # @optional @param return_url [String?] The URL that the user will be redirected to upon completing the verification flow.
    # @optional @param _type [String?] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.
    # @optional @param verification_flow [String?] The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.
    # @return nil
    def post_identity_verification_sessions(
      *,
      client_reference_id : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      related_customer : String? = nil,
      return_url : String? = nil,
      _type : String? = nil,
      verification_flow : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_identity_verification_sessions(client_reference_id: client_reference_id, expand: expand, metadata: metadata, options: options, provided_details: provided_details, related_customer: related_customer, return_url: return_url, _type: _type, verification_flow: verification_flow).execute(&block)
    end

    POST_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID = 5000
    POST_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_RELATED_CUSTOMER    = 5000
    POST_IDENTITY_VERIFICATION_SESSIONS_VALID_VALUES_FOR__TYPE             = String.static_array("document", "id_number")
    POST_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_VERIFICATION_FLOW   = 5000

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions(
      *,
      client_reference_id : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      related_customer : String? = nil,
      return_url : String? = nil,
      _type : String? = nil,
      verification_flow : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.post_identity_verification_sessions ..." }
      end

      if client_side_validation?
        unless (_client_reference_id = client_reference_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", client_reference_id.to_s.size, POST_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
        end

        unless (_options = options).nil?
          _options.validate if _options.is_a?(OpenApi::Validatable)
        end
        unless (_provided_details = provided_details).nil?
          _provided_details.validate if _provided_details.is_a?(OpenApi::Validatable)
        end
        unless (_related_customer = related_customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("related_customer", related_customer.to_s.size, POST_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_RELATED_CUSTOMER)
        end

        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_IDENTITY_VERIFICATION_SESSIONS_VALID_VALUES_FOR__TYPE)
        end
        unless (_verification_flow = verification_flow).nil?
          OpenApi::PrimitiveValidator.validate_max_length("verification_flow", verification_flow.to_s.size, POST_IDENTITY_VERIFICATION_SESSIONS_MAX_LENGTH_FOR_VERIFICATION_FLOW)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("client_reference_id", client_reference_id.to_s) if !client_reference_id.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(options.to_json), "options")) if !options.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(provided_details.to_json), "provided_details")) if !provided_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("related_customer", related_customer.to_s) if !related_customer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("return_url", return_url.to_s) if !return_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("verification_flow", verification_flow.to_s) if !verification_flow.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IdentityApi.post_identity_verification_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a VerificationSession object.</p>  <p>When the session status is <code>requires_input</code>, you can use this method to update the verification check and options.</p>
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param options [Stripe::SessionOptionsParam?]
    # @optional @param provided_details [Stripe::ProvidedDetailsParam?]
    # @optional @param _type [String?] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    # @return [Stripe::IdentityVerificationSession]
    def post_identity_verification_sessions_session(
      *,
      session : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      _type : String? = nil
    ) : Stripe::IdentityVerificationSession
      data, _status_code, _headers = post_identity_verification_sessions_session_with_http_info(session: session, expand: expand, metadata: metadata, options: options, provided_details: provided_details, _type: _type)
      data
    end

    # &lt;p&gt;Updates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to update the verification check and options.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param options [Stripe::SessionOptionsParam?]
    # @optional @param provided_details [Stripe::ProvidedDetailsParam?]
    # @optional @param _type [String?] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    # @return [Tuple(Stripe::IdentityVerificationSession, Integer, Hash)] Stripe::IdentityVerificationSession, response status code and response headers
    def post_identity_verification_sessions_session_with_http_info(
      *,
      session : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      _type : String? = nil
    ) : Tuple(Stripe::IdentityVerificationSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_identity_verification_sessions_session(session: session, expand: expand, metadata: metadata, options: options, provided_details: provided_details, _type: _type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#post_identity_verification_sessions_session\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IdentityVerificationSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to update the verification check and options.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param options [Stripe::SessionOptionsParam?]
    # @optional @param provided_details [Stripe::ProvidedDetailsParam?]
    # @optional @param _type [String?] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    # @return nil
    def post_identity_verification_sessions_session(
      *,
      session : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      _type : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_identity_verification_sessions_session(session: session, expand: expand, metadata: metadata, options: options, provided_details: provided_details, _type: _type).execute(&block)
    end

    POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION = 5000
    POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_VALID_VALUES_FOR__TYPE = String.static_array("document", "id_number")

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions_session(
      *,
      session : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      options : Stripe::SessionOptionsParam? = nil,
      provided_details : Stripe::ProvidedDetailsParam? = nil,
      _type : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.post_identity_verification_sessions_session ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION)
        end

        unless (_options = options).nil?
          _options.validate if _options.is_a?(OpenApi::Validatable)
        end
        unless (_provided_details = provided_details).nil?
          _provided_details.validate if _provided_details.is_a?(OpenApi::Validatable)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_VALID_VALUES_FOR__TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(options.to_json), "options")) if !options.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(provided_details.to_json), "provided_details")) if !provided_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IdentityApi.post_identity_verification_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href=\"/docs/identity/how-sessions-work\">status</a>.</p>  <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href=\"/docs/identity/verification-sessions#cancel\">Learn more</a>.</p>
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IdentityVerificationSession]
    def post_identity_verification_sessions_session_cancel(
      *,
      session : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IdentityVerificationSession
      data, _status_code, _headers = post_identity_verification_sessions_session_cancel_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;A VerificationSession object can be canceled when it is in &lt;code&gt;requires_input&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Once canceled, future submission attempts are disabled. This cannot be undone. &lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#cancel\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IdentityVerificationSession, Integer, Hash)] Stripe::IdentityVerificationSession, response status code and response headers
    def post_identity_verification_sessions_session_cancel_with_http_info(
      *,
      session : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IdentityVerificationSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_identity_verification_sessions_session_cancel(session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#post_identity_verification_sessions_session_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IdentityVerificationSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A VerificationSession object can be canceled when it is in &lt;code&gt;requires_input&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Once canceled, future submission attempts are disabled. This cannot be undone. &lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#cancel\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_identity_verification_sessions_session_cancel(
      *,
      session : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_identity_verification_sessions_session_cancel(session: session, expand: expand).execute(&block)
    end

    POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_CANCEL_MAX_LENGTH_FOR_SESSION = 5000

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions_session_cancel(
      *,
      session : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.post_identity_verification_sessions_session_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_CANCEL_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}/cancel".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IdentityApi.post_identity_verification_sessions_session_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.</p>  <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code> <a href=\"/docs/identity/how-sessions-work\">status</a>. Redacting a VerificationSession in <code>requires_action</code> state will automatically cancel it.</p>  <p>The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event will be emitted.</p>  <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or used for any purpose.</p>  <p><a href=\"/docs/identity/verification-sessions#redact\">Learn more</a>.</p>
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IdentityVerificationSession]
    def post_identity_verification_sessions_session_redact(
      *,
      session : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IdentityVerificationSession
      data, _status_code, _headers = post_identity_verification_sessions_session_redact_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.&lt;/p&gt;  &lt;p&gt;A VerificationSession object can be redacted when it is in &lt;code&gt;requires_input&lt;/code&gt; or &lt;code&gt;verified&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;. Redacting a VerificationSession in &lt;code&gt;requires_action&lt;/code&gt; state will automatically cancel it.&lt;/p&gt;  &lt;p&gt;The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s &lt;code&gt;redaction.status&lt;/code&gt; field will be set to &lt;code&gt;processing&lt;/code&gt;; when the process is finished, it will change to &lt;code&gt;redacted&lt;/code&gt; and an &lt;code&gt;identity.verification_session.redacted&lt;/code&gt; event will be emitted.&lt;/p&gt;  &lt;p&gt;Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string &lt;code&gt;[redacted]&lt;/code&gt; or a similar placeholder. The &lt;code&gt;metadata&lt;/code&gt; field will also be erased. Redacted objects cannot be updated or used for any purpose.&lt;/p&gt;  &lt;p&gt;&lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#redact\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IdentityVerificationSession, Integer, Hash)] Stripe::IdentityVerificationSession, response status code and response headers
    def post_identity_verification_sessions_session_redact_with_http_info(
      *,
      session : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IdentityVerificationSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_identity_verification_sessions_session_redact(session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IdentityApi#post_identity_verification_sessions_session_redact\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IdentityVerificationSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.&lt;/p&gt;  &lt;p&gt;A VerificationSession object can be redacted when it is in &lt;code&gt;requires_input&lt;/code&gt; or &lt;code&gt;verified&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;. Redacting a VerificationSession in &lt;code&gt;requires_action&lt;/code&gt; state will automatically cancel it.&lt;/p&gt;  &lt;p&gt;The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s &lt;code&gt;redaction.status&lt;/code&gt; field will be set to &lt;code&gt;processing&lt;/code&gt;; when the process is finished, it will change to &lt;code&gt;redacted&lt;/code&gt; and an &lt;code&gt;identity.verification_session.redacted&lt;/code&gt; event will be emitted.&lt;/p&gt;  &lt;p&gt;Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string &lt;code&gt;[redacted]&lt;/code&gt; or a similar placeholder. The &lt;code&gt;metadata&lt;/code&gt; field will also be erased. Redacted objects cannot be updated or used for any purpose.&lt;/p&gt;  &lt;p&gt;&lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#redact\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_identity_verification_sessions_session_redact(
      *,
      session : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_identity_verification_sessions_session_redact(session: session, expand: expand).execute(&block)
    end

    POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_REDACT_MAX_LENGTH_FOR_SESSION = 5000

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions_session_redact(
      *,
      session : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IdentityApi.post_identity_verification_sessions_session_redact ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, POST_IDENTITY_VERIFICATION_SESSIONS_SESSION_REDACT_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}/redact".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IdentityApi.post_identity_verification_sessions_session_redact",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
