#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class SkusApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>
    # @required @param id [String?]
    # @return [Stripe::DeletedSku]
    def delete_skus_id(
      *,
      id : String? = nil
    ) : Stripe::DeletedSku
      data, _status_code, _headers = delete_skus_id_with_http_info(id: id)
      data
    end

    # &lt;p&gt;Delete a SKU. Deleting a SKU is only possible until it has been used in an order.&lt;/p&gt;
    # @required @param id [String?]
    # @return [Tuple(Stripe::DeletedSku, Integer, Hash)] Stripe::DeletedSku, response status code and response headers
    def delete_skus_id_with_http_info(
      *,
      id : String? = nil
    ) : Tuple(Stripe::DeletedSku, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_skus_id(id: id)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SkusApi#delete_skus_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedSku.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Delete a SKU. Deleting a SKU is only possible until it has been used in an order.&lt;/p&gt;
    # @required @param id [String?]
    # @return nil
    def delete_skus_id(
      *,
      id : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_skus_id(id: id).execute(&block)
    end

    DELETE_SKUS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_delete_skus_id(
      *,
      id : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SkusApi.delete_skus_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, DELETE_SKUS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/skus/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SkusApi.delete_skus_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products).
    # @optional @param in_stock [Bool?] Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.
    # @optional @param attributes [Hash(String, Hash(String, String))?] Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `[\"color\", \"size\"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`.
    # @optional @param ids [Array(Array(String))?] Only return SKUs with the given IDs.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param product [String?] The ID of the product whose SKUs will be retrieved. Must be a product with type `good`.
    # @return [Stripe::ProductsMethodSkuList]
    def get_skus(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      in_stock : Bool? = nil,
      attributes : Hash(String, Hash(String, String))? = nil,
      ids : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil,
      product : String? = nil
    ) : Stripe::ProductsMethodSkuList
      data, _status_code, _headers = get_skus_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, in_stock: in_stock, attributes: attributes, ids: ids, expand: expand, product: product)
      data
    end

    # &lt;p&gt;Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products).
    # @optional @param in_stock [Bool?] Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.
    # @optional @param attributes [Hash(String, Hash(String, String))?] Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `[\"color\", \"size\"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`.
    # @optional @param ids [Array(Array(String))?] Only return SKUs with the given IDs.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param product [String?] The ID of the product whose SKUs will be retrieved. Must be a product with type `good`.
    # @return [Tuple(Stripe::ProductsMethodSkuList, Integer, Hash)] Stripe::ProductsMethodSkuList, response status code and response headers
    def get_skus_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      in_stock : Bool? = nil,
      attributes : Hash(String, Hash(String, String))? = nil,
      ids : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil,
      product : String? = nil
    ) : Tuple(Stripe::ProductsMethodSkuList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_skus(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, in_stock: in_stock, attributes: attributes, ids: ids, expand: expand, product: product)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SkusApi#get_skus\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ProductsMethodSkuList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products).
    # @optional @param in_stock [Bool?] Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.
    # @optional @param attributes [Hash(String, Hash(String, String))?] Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `[\"color\", \"size\"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`.
    # @optional @param ids [Array(Array(String))?] Only return SKUs with the given IDs.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param product [String?] The ID of the product whose SKUs will be retrieved. Must be a product with type `good`.
    # @return nil
    def get_skus(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      in_stock : Bool? = nil,
      attributes : Hash(String, Hash(String, String))? = nil,
      ids : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil,
      product : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_skus(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, in_stock: in_stock, attributes: attributes, ids: ids, expand: expand, product: product).execute(&block)
    end

    GET_SKUS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_SKUS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_SKUS_MAX_LENGTH_FOR_PRODUCT        = 5000

    # @return Crest::Request
    def build_api_request_for_get_skus(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      in_stock : Bool? = nil,
      attributes : Hash(String, Hash(String, String))? = nil,
      ids : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil,
      product : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SkusApi.get_skus ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_SKUS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_SKUS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_product = product).nil?
          OpenApi::PrimitiveValidator.validate_max_length("product", product.to_s.size, GET_SKUS_MAX_LENGTH_FOR_PRODUCT)
        end
      end

      # resource path
      local_var_path = "/v1/skus"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["in_stock"] = in_stock.to_s if !in_stock.nil?
      query_params["attributes"] = attributes.to_s if !attributes.nil?
      query_params["ids"] = @api_client.build_collection_param(ids, "csv") if !ids.nil? && !ids.empty?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["product"] = product.to_s if !product.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SkusApi.get_skus",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GetSkusId200Response]
    def get_skus_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GetSkusId200Response
      data, _status_code, _headers = get_skus_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GetSkusId200Response, Integer, Hash)] Stripe::GetSkusId200Response, response status code and response headers
    def get_skus_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GetSkusId200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_skus_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SkusApi#get_skus_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetSkusId200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_skus_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_skus_id(id: id, expand: expand).execute(&block)
    end

    GET_SKUS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_skus_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SkusApi.get_skus_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_SKUS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/skus/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SkusApi.get_skus_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new SKU associated with a product.</p>
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param inventory [Stripe::InventoryCreateSpecs?]
    # @required @param price [Int32?] The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @required @param product [String?] The ID of the product this SKU is associated with. Must be a product with type `good`.
    # @optional @param active [Bool?] Whether the SKU is available for purchase. Default to `true`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param id [String?] The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
    # @optional @param image [String?] The URL of an image for this SKU, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PackageDimensionsSpecs?]
    # @return [Stripe::Sku]
    def post_skus(
      *,
      currency : String? = nil,
      inventory : Stripe::InventoryCreateSpecs? = nil,
      price : Int64? = nil,
      product : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      image : String? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil
    ) : Stripe::Sku
      data, _status_code, _headers = post_skus_with_http_info(currency: currency, inventory: inventory, price: price, product: product, active: active, expand: expand, id: id, image: image, package_dimensions: package_dimensions)
      data
    end

    # &lt;p&gt;Creates a new SKU associated with a product.&lt;/p&gt;
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param inventory [Stripe::InventoryCreateSpecs?]
    # @required @param price [Int32?] The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @required @param product [String?] The ID of the product this SKU is associated with. Must be a product with type `good`.
    # @optional @param active [Bool?] Whether the SKU is available for purchase. Default to `true`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param id [String?] The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
    # @optional @param image [String?] The URL of an image for this SKU, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PackageDimensionsSpecs?]
    # @return [Tuple(Stripe::Sku, Integer, Hash)] Stripe::Sku, response status code and response headers
    def post_skus_with_http_info(
      *,
      currency : String? = nil,
      inventory : Stripe::InventoryCreateSpecs? = nil,
      price : Int64? = nil,
      product : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      image : String? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil
    ) : Tuple(Stripe::Sku, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_skus(currency: currency, inventory: inventory, price: price, product: product, active: active, expand: expand, id: id, image: image, package_dimensions: package_dimensions)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SkusApi#post_skus\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Sku.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new SKU associated with a product.&lt;/p&gt;
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param inventory [Stripe::InventoryCreateSpecs?]
    # @required @param price [Int32?] The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @required @param product [String?] The ID of the product this SKU is associated with. Must be a product with type `good`.
    # @optional @param active [Bool?] Whether the SKU is available for purchase. Default to `true`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param id [String?] The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
    # @optional @param image [String?] The URL of an image for this SKU, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PackageDimensionsSpecs?]
    # @return nil
    def post_skus(
      *,
      currency : String? = nil,
      inventory : Stripe::InventoryCreateSpecs? = nil,
      price : Int64? = nil,
      product : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      image : String? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_skus(currency: currency, inventory: inventory, price: price, product: product, active: active, expand: expand, id: id, image: image, package_dimensions: package_dimensions).execute(&block)
    end

    POST_SKUS_MAX_LENGTH_FOR_PRODUCT = 5000
    POST_SKUS_MAX_LENGTH_FOR_IMAGE   = 5000

    # @return Crest::Request
    def build_api_request_for_post_skus(
      *,
      currency : String? = nil,
      inventory : Stripe::InventoryCreateSpecs? = nil,
      price : Int64? = nil,
      product : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      image : String? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SkusApi.post_skus ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"inventory\" is required and cannot be null") if inventory.nil?
        unless (_inventory = inventory).nil?
          _inventory.validate if _inventory.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"price\" is required and cannot be null") if price.nil?

        raise ArgumentError.new("\"product\" is required and cannot be null") if product.nil?
        unless (_product = product).nil?
          OpenApi::PrimitiveValidator.validate_max_length("product", product.to_s.size, POST_SKUS_MAX_LENGTH_FOR_PRODUCT)
        end

        unless (_image = image).nil?
          OpenApi::PrimitiveValidator.validate_max_length("image", image.to_s.size, POST_SKUS_MAX_LENGTH_FOR_IMAGE)
        end
        unless (_package_dimensions = package_dimensions).nil?
          _package_dimensions.validate if _package_dimensions.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/skus"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["id"] = id.to_s if !id.nil?
      form_params["image"] = image.to_s if !image.nil?
      form_params["inventory"] = inventory.to_s if !inventory.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["product"] = product.to_s if !product.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SkusApi.post_skus",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
    # @required @param id [String?]
    # @optional @param active [Bool?] Whether this SKU is available for purchase.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param image [String?] The URL of an image for this SKU, meant to be displayable to the customer.
    # @optional @param inventory [Stripe::InventoryUpdateSpecs?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param package_dimensions [Stripe::PostSkusIdRequestPackageDimensions?]
    # @optional @param price [Int32?] The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @optional @param product [String?] The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`.
    # @return [Stripe::Sku]
    def post_skus_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      image : String? = nil,
      inventory : Stripe::InventoryUpdateSpecs? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      package_dimensions : Stripe::PostSkusIdRequestPackageDimensions? = nil,
      price : Int64? = nil,
      product : String? = nil
    ) : Stripe::Sku
      data, _status_code, _headers = post_skus_id_with_http_info(id: id, active: active, currency: currency, expand: expand, image: image, inventory: inventory, metadata: metadata, package_dimensions: package_dimensions, price: price, product: product)
      data
    end

    # &lt;p&gt;Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;Note that a SKU’s &lt;code&gt;attributes&lt;/code&gt; are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active [Bool?] Whether this SKU is available for purchase.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param image [String?] The URL of an image for this SKU, meant to be displayable to the customer.
    # @optional @param inventory [Stripe::InventoryUpdateSpecs?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param package_dimensions [Stripe::PostSkusIdRequestPackageDimensions?]
    # @optional @param price [Int32?] The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @optional @param product [String?] The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`.
    # @return [Tuple(Stripe::Sku, Integer, Hash)] Stripe::Sku, response status code and response headers
    def post_skus_id_with_http_info(
      *,
      id : String? = nil,
      active : Bool? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      image : String? = nil,
      inventory : Stripe::InventoryUpdateSpecs? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      package_dimensions : Stripe::PostSkusIdRequestPackageDimensions? = nil,
      price : Int64? = nil,
      product : String? = nil
    ) : Tuple(Stripe::Sku, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_skus_id(id: id, active: active, currency: currency, expand: expand, image: image, inventory: inventory, metadata: metadata, package_dimensions: package_dimensions, price: price, product: product)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SkusApi#post_skus_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Sku.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;Note that a SKU’s &lt;code&gt;attributes&lt;/code&gt; are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active [Bool?] Whether this SKU is available for purchase.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param image [String?] The URL of an image for this SKU, meant to be displayable to the customer.
    # @optional @param inventory [Stripe::InventoryUpdateSpecs?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param package_dimensions [Stripe::PostSkusIdRequestPackageDimensions?]
    # @optional @param price [Int32?] The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @optional @param product [String?] The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`.
    # @return nil
    def post_skus_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      image : String? = nil,
      inventory : Stripe::InventoryUpdateSpecs? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      package_dimensions : Stripe::PostSkusIdRequestPackageDimensions? = nil,
      price : Int64? = nil,
      product : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_skus_id(id: id, active: active, currency: currency, expand: expand, image: image, inventory: inventory, metadata: metadata, package_dimensions: package_dimensions, price: price, product: product).execute(&block)
    end

    POST_SKUS_ID_MAX_LENGTH_FOR_ID      = 5000
    POST_SKUS_ID_MAX_LENGTH_FOR_IMAGE   = 5000
    POST_SKUS_ID_MAX_LENGTH_FOR_PRODUCT = 5000

    # @return Crest::Request
    def build_api_request_for_post_skus_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      image : String? = nil,
      inventory : Stripe::InventoryUpdateSpecs? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      package_dimensions : Stripe::PostSkusIdRequestPackageDimensions? = nil,
      price : Int64? = nil,
      product : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SkusApi.post_skus_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_SKUS_ID_MAX_LENGTH_FOR_ID)
        end

        unless (_image = image).nil?
          OpenApi::PrimitiveValidator.validate_max_length("image", image.to_s.size, POST_SKUS_ID_MAX_LENGTH_FOR_IMAGE)
        end
        unless (_inventory = inventory).nil?
          _inventory.validate if _inventory.is_a?(OpenApi::Validatable)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_package_dimensions = package_dimensions).nil?
          _package_dimensions.validate if _package_dimensions.is_a?(OpenApi::Validatable)
        end

        unless (_product = product).nil?
          OpenApi::PrimitiveValidator.validate_max_length("product", product.to_s.size, POST_SKUS_ID_MAX_LENGTH_FOR_PRODUCT)
        end
      end

      # resource path
      local_var_path = "/v1/skus/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["image"] = image.to_s if !image.nil?
      form_params["inventory"] = inventory.to_s if !inventory.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["product"] = product.to_s if !product.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SkusApi.post_skus_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
