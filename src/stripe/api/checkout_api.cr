#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class CheckoutApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of Checkout Sessions.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return the Checkout Session for the PaymentIntent specified.
    # @optional @param subscription [String?] Only return the Checkout Session for the subscription specified.
    # @optional @param customer_details [Stripe::CustomerDetailsParams?] Only return the Checkout Sessions for the Customer details specified.
    # @optional @param customer [String?] Only return the Checkout Sessions for the Customer specified.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentPagesCheckoutSessionList]
    def get_checkout_sessions(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, payment_intent : String? = nil, subscription : String? = nil, customer_details : Stripe::CustomerDetailsParams? = nil, customer : String? = nil, expand : Array(Array(String))? = nil) : Stripe::PaymentPagesCheckoutSessionList
      data, _status_code, _headers = get_checkout_sessions_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, subscription: subscription, customer_details: customer_details, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return the Checkout Session for the PaymentIntent specified.
    # @optional @param subscription [String?] Only return the Checkout Session for the subscription specified.
    # @optional @param customer_details [Stripe::CustomerDetailsParams?] Only return the Checkout Sessions for the Customer details specified.
    # @optional @param customer [String?] Only return the Checkout Sessions for the Customer specified.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentPagesCheckoutSessionList, Integer, Hash)] Stripe::PaymentPagesCheckoutSessionList, response status code and response headers
    def get_checkout_sessions_with_http_info(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, payment_intent : String? = nil, subscription : String? = nil, customer_details : Stripe::CustomerDetailsParams? = nil, customer : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::PaymentPagesCheckoutSessionList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_checkout_sessions(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, subscription: subscription, customer_details: customer_details, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#get_checkout_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentPagesCheckoutSessionList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return the Checkout Session for the PaymentIntent specified.
    # @optional @param subscription [String?] Only return the Checkout Session for the subscription specified.
    # @optional @param customer_details [Stripe::CustomerDetailsParams?] Only return the Checkout Sessions for the Customer details specified.
    # @optional @param customer [String?] Only return the Checkout Sessions for the Customer specified.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_checkout_sessions(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, payment_intent : String? = nil, subscription : String? = nil, customer_details : Stripe::CustomerDetailsParams? = nil, customer : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_checkout_sessions(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, subscription: subscription, customer_details: customer_details, customer: customer, expand: expand).execute(&block)
    end

    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_SUBSCRIPTION   = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, payment_intent : String? = nil, subscription : String? = nil, customer_details : Stripe::CustomerDetailsParams? = nil, customer : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.get_checkout_sessions ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_customer_details = customer_details).nil?
          _customer_details.validate if _customer_details.is_a?(OpenApi::Validatable)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CheckoutApi.get_checkout_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a Session object.</p>
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CheckoutSession]
    def get_checkout_sessions_session(*, session : String? = nil, expand : Array(Array(String))? = nil) : Stripe::CheckoutSession
      data, _status_code, _headers = get_checkout_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a Session object.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CheckoutSession, Integer, Hash)] Stripe::CheckoutSession, response status code and response headers
    def get_checkout_sessions_session_with_http_info(*, session : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::CheckoutSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_checkout_sessions_session(session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#get_checkout_sessions_session\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CheckoutSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a Session object.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_checkout_sessions_session(*, session : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_checkout_sessions_session(session: session, expand: expand).execute(&block)
    end

    GET_CHECKOUT_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION = 66

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions_session(*, session : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.get_checkout_sessions_session ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CheckoutApi.get_checkout_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param session [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentPagesCheckoutSessionListLineItems]
    def get_checkout_sessions_session_line_items(*, session : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil) : Stripe::PaymentPagesCheckoutSessionListLineItems
      data, _status_code, _headers = get_checkout_sessions_session_line_items_with_http_info(session: session, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentPagesCheckoutSessionListLineItems, Integer, Hash)] Stripe::PaymentPagesCheckoutSessionListLineItems, response status code and response headers
    def get_checkout_sessions_session_line_items_with_http_info(*, session : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::PaymentPagesCheckoutSessionListLineItems, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_checkout_sessions_session_line_items(session: session, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#get_checkout_sessions_session_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentPagesCheckoutSessionListLineItems.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_checkout_sessions_session_line_items(*, session : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_checkout_sessions_session_line_items(session: session, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_SESSION        = 5000
    GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions_session_line_items(*, session : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.get_checkout_sessions_session_line_items ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_SESSION)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}/line_items".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CheckoutApi.get_checkout_sessions_session_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a Session object.</p>
    # @required @param cancel_url [String?] The URL the customer will be directed to if they decide to cancel payment and return to your website.
    # @required @param success_url [String?] The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    # @optional @param after_expiration [Stripe::AfterExpirationParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Specify whether Checkout should collect the customer's billing address.
    # @optional @param client_reference_id [String?] A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
    # @optional @param consent_collection [Stripe::ConsentCollectionParams?]
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.  If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.  If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.  You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
    # @optional @param customer_creation [String?] Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.  When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).  Sessions that don't create Customers instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.  Can only be set in `payment` and `setup` mode.
    # @optional @param customer_email [String?] If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.
    # @optional @param customer_update [Stripe::CustomerUpdateParams?]
    # @optional @param discounts [Array(Stripe::DiscountParams)?] The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
    # @optional @param line_items [Array(Stripe::LineItemParams)?] A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).  For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.  For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.
    # @optional @param locale [String?] The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    # @optional @param mode [String?] The mode of the Checkout Session. Required when using prices or `setup` mode. Pass `subscription` if the Checkout Session includes at least one recurring item.
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0. This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.  In `payment` and `subscription` mode, you can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). It is required in `setup` mode.  Read more about the supported payment methods and their requirements in our [payment method details guide](/docs/payments/checkout/payment-methods).  If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer's location and other characteristics.
    # @optional @param phone_number_collection [Stripe::PhoneNumberCollectionParams?]
    # @optional @param setup_intent_data [Stripe::SetupIntentDataParam?]
    # @optional @param shipping_address_collection [Stripe::ShippingAddressCollectionParams?]
    # @optional @param shipping_options [Array(Stripe::ShippingOptionParams)?] The shipping rate options to apply to this Session.
    # @optional @param submit_type [String?] Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    # @optional @param subscription_data [Stripe::SubscriptionDataParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @return [Stripe::CheckoutSession]
    def post_checkout_sessions(*, cancel_url : String? = nil, success_url : String? = nil, after_expiration : Stripe::AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : Stripe::AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : Stripe::ConsentCollectionParams? = nil, currency : String? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : Stripe::CustomerUpdateParams? = nil, discounts : Array(Stripe::DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(Stripe::LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : Stripe::PaymentIntentDataParams? = nil, payment_method_collection : String? = nil, payment_method_options : Stripe::PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil, setup_intent_data : Stripe::SetupIntentDataParam? = nil, shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil, shipping_options : Array(Stripe::ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : Stripe::SubscriptionDataParams? = nil, tax_id_collection : Stripe::TaxIdCollectionParams? = nil) : Stripe::CheckoutSession
      data, _status_code, _headers = post_checkout_sessions_with_http_info(cancel_url: cancel_url, success_url: success_url, after_expiration: after_expiration, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, client_reference_id: client_reference_id, consent_collection: consent_collection, currency: currency, customer: customer, customer_creation: customer_creation, customer_email: customer_email, customer_update: customer_update, discounts: discounts, expand: expand, expires_at: expires_at, line_items: line_items, locale: locale, mode: mode, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_options: payment_method_options, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, setup_intent_data: setup_intent_data, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection)
      data
    end

    # &lt;p&gt;Creates a Session object.&lt;/p&gt;
    # @required @param cancel_url [String?] The URL the customer will be directed to if they decide to cancel payment and return to your website.
    # @required @param success_url [String?] The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    # @optional @param after_expiration [Stripe::AfterExpirationParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Specify whether Checkout should collect the customer's billing address.
    # @optional @param client_reference_id [String?] A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
    # @optional @param consent_collection [Stripe::ConsentCollectionParams?]
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.  If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.  If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.  You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
    # @optional @param customer_creation [String?] Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.  When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).  Sessions that don't create Customers instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.  Can only be set in `payment` and `setup` mode.
    # @optional @param customer_email [String?] If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.
    # @optional @param customer_update [Stripe::CustomerUpdateParams?]
    # @optional @param discounts [Array(Stripe::DiscountParams)?] The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
    # @optional @param line_items [Array(Stripe::LineItemParams)?] A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).  For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.  For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.
    # @optional @param locale [String?] The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    # @optional @param mode [String?] The mode of the Checkout Session. Required when using prices or `setup` mode. Pass `subscription` if the Checkout Session includes at least one recurring item.
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0. This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.  In `payment` and `subscription` mode, you can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). It is required in `setup` mode.  Read more about the supported payment methods and their requirements in our [payment method details guide](/docs/payments/checkout/payment-methods).  If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer's location and other characteristics.
    # @optional @param phone_number_collection [Stripe::PhoneNumberCollectionParams?]
    # @optional @param setup_intent_data [Stripe::SetupIntentDataParam?]
    # @optional @param shipping_address_collection [Stripe::ShippingAddressCollectionParams?]
    # @optional @param shipping_options [Array(Stripe::ShippingOptionParams)?] The shipping rate options to apply to this Session.
    # @optional @param submit_type [String?] Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    # @optional @param subscription_data [Stripe::SubscriptionDataParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @return [Tuple(Stripe::CheckoutSession, Integer, Hash)] Stripe::CheckoutSession, response status code and response headers
    def post_checkout_sessions_with_http_info(*, cancel_url : String? = nil, success_url : String? = nil, after_expiration : Stripe::AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : Stripe::AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : Stripe::ConsentCollectionParams? = nil, currency : String? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : Stripe::CustomerUpdateParams? = nil, discounts : Array(Stripe::DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(Stripe::LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : Stripe::PaymentIntentDataParams? = nil, payment_method_collection : String? = nil, payment_method_options : Stripe::PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil, setup_intent_data : Stripe::SetupIntentDataParam? = nil, shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil, shipping_options : Array(Stripe::ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : Stripe::SubscriptionDataParams? = nil, tax_id_collection : Stripe::TaxIdCollectionParams? = nil) : Tuple(Stripe::CheckoutSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_checkout_sessions(cancel_url: cancel_url, success_url: success_url, after_expiration: after_expiration, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, client_reference_id: client_reference_id, consent_collection: consent_collection, currency: currency, customer: customer, customer_creation: customer_creation, customer_email: customer_email, customer_update: customer_update, discounts: discounts, expand: expand, expires_at: expires_at, line_items: line_items, locale: locale, mode: mode, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_options: payment_method_options, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, setup_intent_data: setup_intent_data, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#post_checkout_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CheckoutSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a Session object.&lt;/p&gt;
    # @required @param cancel_url [String?] The URL the customer will be directed to if they decide to cancel payment and return to your website.
    # @required @param success_url [String?] The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    # @optional @param after_expiration [Stripe::AfterExpirationParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Specify whether Checkout should collect the customer's billing address.
    # @optional @param client_reference_id [String?] A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
    # @optional @param consent_collection [Stripe::ConsentCollectionParams?]
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.  If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.  If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.  You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
    # @optional @param customer_creation [String?] Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.  When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).  Sessions that don't create Customers instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.  Can only be set in `payment` and `setup` mode.
    # @optional @param customer_email [String?] If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.
    # @optional @param customer_update [Stripe::CustomerUpdateParams?]
    # @optional @param discounts [Array(Stripe::DiscountParams)?] The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
    # @optional @param line_items [Array(Stripe::LineItemParams)?] A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).  For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.  For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.
    # @optional @param locale [String?] The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    # @optional @param mode [String?] The mode of the Checkout Session. Required when using prices or `setup` mode. Pass `subscription` if the Checkout Session includes at least one recurring item.
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0. This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.  In `payment` and `subscription` mode, you can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). It is required in `setup` mode.  Read more about the supported payment methods and their requirements in our [payment method details guide](/docs/payments/checkout/payment-methods).  If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer's location and other characteristics.
    # @optional @param phone_number_collection [Stripe::PhoneNumberCollectionParams?]
    # @optional @param setup_intent_data [Stripe::SetupIntentDataParam?]
    # @optional @param shipping_address_collection [Stripe::ShippingAddressCollectionParams?]
    # @optional @param shipping_options [Array(Stripe::ShippingOptionParams)?] The shipping rate options to apply to this Session.
    # @optional @param submit_type [String?] Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    # @optional @param subscription_data [Stripe::SubscriptionDataParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @return nil
    def post_checkout_sessions(*, cancel_url : String? = nil, success_url : String? = nil, after_expiration : Stripe::AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : Stripe::AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : Stripe::ConsentCollectionParams? = nil, currency : String? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : Stripe::CustomerUpdateParams? = nil, discounts : Array(Stripe::DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(Stripe::LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : Stripe::PaymentIntentDataParams? = nil, payment_method_collection : String? = nil, payment_method_options : Stripe::PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil, setup_intent_data : Stripe::SetupIntentDataParam? = nil, shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil, shipping_options : Array(Stripe::ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : Stripe::SubscriptionDataParams? = nil, tax_id_collection : Stripe::TaxIdCollectionParams? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_checkout_sessions(cancel_url: cancel_url, success_url: success_url, after_expiration: after_expiration, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, client_reference_id: client_reference_id, consent_collection: consent_collection, currency: currency, customer: customer, customer_creation: customer_creation, customer_email: customer_email, customer_update: customer_update, discounts: discounts, expand: expand, expires_at: expires_at, line_items: line_items, locale: locale, mode: mode, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_options: payment_method_options, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, setup_intent_data: setup_intent_data, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection).execute(&block)
    end

    POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CANCEL_URL                   = 5000
    POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_SUCCESS_URL                  = 5000
    POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION = String.static_array("auto", "required")
    POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID          =  200
    POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CUSTOMER                     = 5000
    POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_CUSTOMER_CREATION          = String.static_array("always", "if_required")
    POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_LOCALE                     = String.static_array("auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW")
    POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_MODE                       = String.static_array("payment", "setup", "subscription")
    POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION  = String.static_array("always", "if_required")
    POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_PAYMENT_METHOD_TYPES       = String.static_array("acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "oxxo", "p24", "paynow", "pix", "promptpay", "sepa_debit", "sofort", "us_bank_account", "wechat_pay")
    POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_SUBMIT_TYPE                = String.static_array("auto", "book", "donate", "pay")

    # @return Crest::Request
    def build_api_request_for_post_checkout_sessions(*, cancel_url : String? = nil, success_url : String? = nil, after_expiration : Stripe::AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : Stripe::AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : Stripe::ConsentCollectionParams? = nil, currency : String? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : Stripe::CustomerUpdateParams? = nil, discounts : Array(Stripe::DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(Stripe::LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : Stripe::PaymentIntentDataParams? = nil, payment_method_collection : String? = nil, payment_method_options : Stripe::PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil, setup_intent_data : Stripe::SetupIntentDataParam? = nil, shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil, shipping_options : Array(Stripe::ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : Stripe::SubscriptionDataParams? = nil, tax_id_collection : Stripe::TaxIdCollectionParams? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.post_checkout_sessions ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"cancel_url\" is required and cannot be null") if cancel_url.nil?
        unless (_cancel_url = cancel_url).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cancel_url", cancel_url.to_s.size, POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CANCEL_URL)
        end
        raise ArgumentError.new("\"success_url\" is required and cannot be null") if success_url.nil?
        unless (_success_url = success_url).nil?
          OpenApi::PrimitiveValidator.validate_max_length("success_url", success_url.to_s.size, POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_SUCCESS_URL)
        end
        unless (_after_expiration = after_expiration).nil?
          _after_expiration.validate if _after_expiration.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_billing_address_collection = billing_address_collection).nil?
          OpenApi::EnumValidator.validate("billing_address_collection", _billing_address_collection, POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
        end
        unless (_client_reference_id = client_reference_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", client_reference_id.to_s.size, POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
        end
        unless (_consent_collection = consent_collection).nil?
          _consent_collection.validate if _consent_collection.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_customer_creation = customer_creation).nil?
          OpenApi::EnumValidator.validate("customer_creation", _customer_creation, POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_CUSTOMER_CREATION)
        end

        unless (_customer_update = customer_update).nil?
          _customer_update.validate if _customer_update.is_a?(OpenApi::Validatable)
        end
        unless (_discounts = discounts).nil?
          OpenApi::ContainerValidator.validate(container: _discounts) if _discounts.is_a?(Array)
        end

        unless (_line_items = line_items).nil?
          OpenApi::ContainerValidator.validate(container: _line_items) if _line_items.is_a?(Array)
        end
        unless (_locale = locale).nil?
          OpenApi::EnumValidator.validate("locale", _locale, POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_LOCALE)
        end
        unless (_mode = mode).nil?
          OpenApi::EnumValidator.validate("mode", _mode, POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_MODE)
        end
        unless (_payment_intent_data = payment_intent_data).nil?
          _payment_intent_data.validate if _payment_intent_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_collection = payment_method_collection).nil?
          OpenApi::EnumValidator.validate("payment_method_collection", _payment_method_collection, POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
        end
        unless (_payment_method_options = payment_method_options).nil?
          _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_types = payment_method_types).nil?
          OpenApi::EnumValidator.validate("payment_method_types", _payment_method_types, POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
        end
        unless (_phone_number_collection = phone_number_collection).nil?
          _phone_number_collection.validate if _phone_number_collection.is_a?(OpenApi::Validatable)
        end
        unless (_setup_intent_data = setup_intent_data).nil?
          _setup_intent_data.validate if _setup_intent_data.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_address_collection = shipping_address_collection).nil?
          _shipping_address_collection.validate if _shipping_address_collection.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_options = shipping_options).nil?
          OpenApi::ContainerValidator.validate(container: _shipping_options) if _shipping_options.is_a?(Array)
        end
        unless (_submit_type = submit_type).nil?
          OpenApi::EnumValidator.validate("submit_type", _submit_type, POST_CHECKOUT_SESSIONS_VALID_VALUES_FOR_SUBMIT_TYPE)
        end
        unless (_subscription_data = subscription_data).nil?
          _subscription_data.validate if _subscription_data.is_a?(OpenApi::Validatable)
        end
        unless (_tax_id_collection = tax_id_collection).nil?
          _tax_id_collection.validate if _tax_id_collection.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["after_expiration"] = after_expiration.to_s if !after_expiration.nil?
      form_params["allow_promotion_codes"] = allow_promotion_codes.to_s if !allow_promotion_codes.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_address_collection"] = billing_address_collection.to_s if !billing_address_collection.nil?
      form_params["cancel_url"] = cancel_url.to_s if !cancel_url.nil?
      form_params["client_reference_id"] = client_reference_id.to_s if !client_reference_id.nil?
      form_params["consent_collection"] = consent_collection.to_s if !consent_collection.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["customer_creation"] = customer_creation.to_s if !customer_creation.nil?
      form_params["customer_email"] = customer_email.to_s if !customer_email.nil?
      form_params["customer_update"] = customer_update.to_s if !customer_update.nil?
      form_params["discounts"] = @api_client.build_collection_param(discounts, "csv") if !discounts.nil? && !discounts.empty?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["locale"] = locale.to_s if !locale.nil?
      form_params["mode"] = mode.to_s if !mode.nil?
      form_params["payment_intent_data"] = payment_intent_data.to_s if !payment_intent_data.nil?
      form_params["payment_method_collection"] = payment_method_collection.to_s if !payment_method_collection.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["phone_number_collection"] = phone_number_collection.to_s if !phone_number_collection.nil?
      form_params["setup_intent_data"] = setup_intent_data.to_s if !setup_intent_data.nil?
      form_params["shipping_address_collection"] = shipping_address_collection.to_s if !shipping_address_collection.nil?
      form_params["shipping_options"] = @api_client.build_collection_param(shipping_options, "csv") if !shipping_options.nil? && !shipping_options.empty?
      form_params["submit_type"] = submit_type.to_s if !submit_type.nil?
      form_params["subscription_data"] = subscription_data.to_s if !subscription_data.nil?
      form_params["success_url"] = success_url.to_s if !success_url.nil?
      form_params["tax_id_collection"] = tax_id_collection.to_s if !tax_id_collection.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CheckoutApi.post_checkout_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>  <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CheckoutSession]
    def post_checkout_sessions_session_expire(*, session : String? = nil, expand : Array(String)? = nil) : Stripe::CheckoutSession
      data, _status_code, _headers = post_checkout_sessions_session_expire_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;A Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CheckoutSession, Integer, Hash)] Stripe::CheckoutSession, response status code and response headers
    def post_checkout_sessions_session_expire_with_http_info(*, session : String? = nil, expand : Array(String)? = nil) : Tuple(Stripe::CheckoutSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_checkout_sessions_session_expire(session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#post_checkout_sessions_session_expire\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CheckoutSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_checkout_sessions_session_expire(*, session : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_checkout_sessions_session_expire(session: session, expand: expand).execute(&block)
    end

    POST_CHECKOUT_SESSIONS_SESSION_EXPIRE_MAX_LENGTH_FOR_SESSION = 5000

    # @return Crest::Request
    def build_api_request_for_post_checkout_sessions_session_expire(*, session : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.post_checkout_sessions_session_expire ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, POST_CHECKOUT_SESSIONS_SESSION_EXPIRE_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}/expire".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CheckoutApi.post_checkout_sessions_session_expire",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
