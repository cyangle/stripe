#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class CheckoutApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of Checkout Sessions.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return the Checkout Session for the PaymentIntent specified.
    # @optional @param subscription [String?] Only return the Checkout Session for the subscription specified.
    # @optional @param customer_details [Stripe::CustomerDetailsParams?] Only return the Checkout Sessions for the Customer details specified.
    # @optional @param customer [String?] Only return the Checkout Sessions for the Customer specified.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentPagesCheckoutSessionList]
    def get_checkout_sessions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      subscription : String? = nil,
      customer_details : Stripe::CustomerDetailsParams? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentPagesCheckoutSessionList
      data, _status_code, _headers = get_checkout_sessions_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, subscription: subscription, customer_details: customer_details, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return the Checkout Session for the PaymentIntent specified.
    # @optional @param subscription [String?] Only return the Checkout Session for the subscription specified.
    # @optional @param customer_details [Stripe::CustomerDetailsParams?] Only return the Checkout Sessions for the Customer details specified.
    # @optional @param customer [String?] Only return the Checkout Sessions for the Customer specified.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentPagesCheckoutSessionList, Integer, Hash)] Stripe::PaymentPagesCheckoutSessionList, response status code and response headers
    def get_checkout_sessions_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      subscription : String? = nil,
      customer_details : Stripe::CustomerDetailsParams? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentPagesCheckoutSessionList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_checkout_sessions(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, subscription: subscription, customer_details: customer_details, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#get_checkout_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentPagesCheckoutSessionList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return the Checkout Session for the PaymentIntent specified.
    # @optional @param subscription [String?] Only return the Checkout Session for the subscription specified.
    # @optional @param customer_details [Stripe::CustomerDetailsParams?] Only return the Checkout Sessions for the Customer details specified.
    # @optional @param customer [String?] Only return the Checkout Sessions for the Customer specified.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_checkout_sessions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      subscription : String? = nil,
      customer_details : Stripe::CustomerDetailsParams? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_checkout_sessions(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, subscription: subscription, customer_details: customer_details, customer: customer, expand: expand).execute(&block)
    end

    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_SUBSCRIPTION   = 5000
    GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      subscription : String? = nil,
      customer_details : Stripe::CustomerDetailsParams? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.get_checkout_sessions ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_customer_details = customer_details).nil?
          _customer_details.validate if _customer_details.is_a?(OpenApi::Validatable)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_CHECKOUT_SESSIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CheckoutApi.get_checkout_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a Session object.</p>
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CheckoutSession]
    def get_checkout_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::CheckoutSession
      data, _status_code, _headers = get_checkout_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a Session object.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CheckoutSession, Integer, Hash)] Stripe::CheckoutSession, response status code and response headers
    def get_checkout_sessions_session_with_http_info(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::CheckoutSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_checkout_sessions_session(session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#get_checkout_sessions_session\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CheckoutSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a Session object.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_checkout_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_checkout_sessions_session(session: session, expand: expand).execute(&block)
    end

    GET_CHECKOUT_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION = 66

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.get_checkout_sessions_session ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CheckoutApi.get_checkout_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param session [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentPagesCheckoutSessionListLineItems]
    def get_checkout_sessions_session_line_items(
      *,
      session : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentPagesCheckoutSessionListLineItems
      data, _status_code, _headers = get_checkout_sessions_session_line_items_with_http_info(session: session, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentPagesCheckoutSessionListLineItems, Integer, Hash)] Stripe::PaymentPagesCheckoutSessionListLineItems, response status code and response headers
    def get_checkout_sessions_session_line_items_with_http_info(
      *,
      session : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentPagesCheckoutSessionListLineItems, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_checkout_sessions_session_line_items(session: session, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#get_checkout_sessions_session_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentPagesCheckoutSessionListLineItems.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_checkout_sessions_session_line_items(
      *,
      session : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_checkout_sessions_session_line_items(session: session, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_SESSION        = 5000
    GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions_session_line_items(
      *,
      session : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.get_checkout_sessions_session_line_items ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_SESSION)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CHECKOUT_SESSIONS_SESSION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}/line_items".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CheckoutApi.get_checkout_sessions_session_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a Session object.</p>
    # @required @param post_checkout_sessions_request [Stripe::PostCheckoutSessionsRequest?]
    # @return [Stripe::CheckoutSession]
    def post_checkout_sessions(
      *,
      post_checkout_sessions_request : Stripe::PostCheckoutSessionsRequest? = nil
    ) : Stripe::CheckoutSession
      data, _status_code, _headers = post_checkout_sessions_with_http_info(post_checkout_sessions_request: post_checkout_sessions_request)
      data
    end

    # &lt;p&gt;Creates a Session object.&lt;/p&gt;
    # @required @param post_checkout_sessions_request [Stripe::PostCheckoutSessionsRequest?]
    # @return [Tuple(Stripe::CheckoutSession, Integer, Hash)] Stripe::CheckoutSession, response status code and response headers
    def post_checkout_sessions_with_http_info(
      *,
      post_checkout_sessions_request : Stripe::PostCheckoutSessionsRequest? = nil
    ) : Tuple(Stripe::CheckoutSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_checkout_sessions(post_checkout_sessions_request: post_checkout_sessions_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#post_checkout_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CheckoutSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a Session object.&lt;/p&gt;
    # @required @param post_checkout_sessions_request [Stripe::PostCheckoutSessionsRequest?]
    # @return nil
    def post_checkout_sessions(
      *,
      post_checkout_sessions_request : Stripe::PostCheckoutSessionsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_checkout_sessions(post_checkout_sessions_request: post_checkout_sessions_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_checkout_sessions(
      *,
      post_checkout_sessions_request : Stripe::PostCheckoutSessionsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.post_checkout_sessions ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_checkout_sessions_request\" is required and cannot be null") if post_checkout_sessions_request.nil?
        unless (_post_checkout_sessions_request = post_checkout_sessions_request).nil?
          _post_checkout_sessions_request.validate if _post_checkout_sessions_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_checkout_sessions_request, content_type: header_params["Content-Type"]?) if !post_checkout_sessions_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CheckoutApi.post_checkout_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>  <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
    # @required @param session [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::CheckoutSession]
    def post_checkout_sessions_session_expire(
      *,
      session : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::CheckoutSession
      data, _status_code, _headers = post_checkout_sessions_session_expire_with_http_info(session: session, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;A Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::CheckoutSession, Integer, Hash)] Stripe::CheckoutSession, response status code and response headers
    def post_checkout_sessions_session_expire_with_http_info(
      *,
      session : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::CheckoutSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_checkout_sessions_session_expire(session: session, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CheckoutApi#post_checkout_sessions_session_expire\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CheckoutSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_checkout_sessions_session_expire(
      *,
      session : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_checkout_sessions_session_expire(session: session, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_CHECKOUT_SESSIONS_SESSION_EXPIRE_MAX_LENGTH_FOR_SESSION = 5000

    # @return Crest::Request
    def build_api_request_for_post_checkout_sessions_session_expire(
      *,
      session : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CheckoutApi.post_checkout_sessions_session_expire ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, POST_CHECKOUT_SESSIONS_SESSION_EXPIRE_MAX_LENGTH_FOR_SESSION)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}/expire".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CheckoutApi.post_checkout_sessions_session_expire",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
