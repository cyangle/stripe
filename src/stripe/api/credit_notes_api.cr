#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class CreditNotesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of credit notes.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return credit notes for the customer specified by this customer ID.
    # @optional @param invoice [String?] Only return credit notes for the invoice specified by this invoice ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CreditNotesList]
    def get_credit_notes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::CreditNotesList
      data, _status_code, _headers = get_credit_notes_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of credit notes.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return credit notes for the customer specified by this customer ID.
    # @optional @param invoice [String?] Only return credit notes for the invoice specified by this invoice ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CreditNotesList, Integer, Hash)] Stripe::CreditNotesList, response status code and response headers
    def get_credit_notes_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::CreditNotesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_credit_notes(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, invoice: invoice, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#get_credit_notes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNotesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of credit notes.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return credit notes for the customer specified by this customer ID.
    # @optional @param invoice [String?] Only return credit notes for the invoice specified by this invoice ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_credit_notes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_credit_notes(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, invoice: invoice, expand: expand).execute(&block)
    end

    GET_CREDIT_NOTES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CREDIT_NOTES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_CREDIT_NOTES_MAX_LENGTH_FOR_CUSTOMER       = 5000
    GET_CREDIT_NOTES_MAX_LENGTH_FOR_INVOICE        = 5000

    # @return Crest::Request
    def build_api_request_for_get_credit_notes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.get_credit_notes ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CREDIT_NOTES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CREDIT_NOTES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_CREDIT_NOTES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, GET_CREDIT_NOTES_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["invoice"] = invoice.to_s if !invoice.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CreditNotesApi.get_credit_notes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a credit note, youâ€™ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param credit_note [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CreditNoteLinesList]
    def get_credit_notes_credit_note_lines(
      *,
      credit_note : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::CreditNoteLinesList
      data, _status_code, _headers = get_credit_notes_credit_note_lines_with_http_info(credit_note: credit_note, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving a credit note, youâ€™ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param credit_note [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CreditNoteLinesList, Integer, Hash)] Stripe::CreditNoteLinesList, response status code and response headers
    def get_credit_notes_credit_note_lines_with_http_info(
      *,
      credit_note : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::CreditNoteLinesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_credit_notes_credit_note_lines(credit_note: credit_note, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#get_credit_notes_credit_note_lines\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNoteLinesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a credit note, youâ€™ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param credit_note [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_credit_notes_credit_note_lines(
      *,
      credit_note : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_credit_notes_credit_note_lines(credit_note: credit_note, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_CREDIT_NOTES_CREDIT_NOTE_LINES_MAX_LENGTH_FOR_CREDIT_NOTE    = 5000
    GET_CREDIT_NOTES_CREDIT_NOTE_LINES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CREDIT_NOTES_CREDIT_NOTE_LINES_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_credit_note_lines(
      *,
      credit_note : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.get_credit_notes_credit_note_lines ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"credit_note\" is required and cannot be null") if credit_note.nil?
        unless (_credit_note = credit_note).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credit_note", credit_note.to_s.size, GET_CREDIT_NOTES_CREDIT_NOTE_LINES_MAX_LENGTH_FOR_CREDIT_NOTE)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CREDIT_NOTES_CREDIT_NOTE_LINES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CREDIT_NOTES_CREDIT_NOTE_LINES_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes/{credit_note}/lines".sub("{" + "credit_note" + "}", URI.encode_path(credit_note.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CreditNotesApi.get_credit_notes_credit_note_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the credit note object with the given identifier.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CreditNote]
    def get_credit_notes_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::CreditNote
      data, _status_code, _headers = get_credit_notes_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the credit note object with the given identifier.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CreditNote, Integer, Hash)] Stripe::CreditNote, response status code and response headers
    def get_credit_notes_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::CreditNote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_credit_notes_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#get_credit_notes_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the credit note object with the given identifier.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_credit_notes_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_credit_notes_id(id: id, expand: expand).execute(&block)
    end

    GET_CREDIT_NOTES_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.get_credit_notes_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_CREDIT_NOTES_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CreditNotesApi.get_credit_notes_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Get a preview of a credit note without creating it.</p>
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param lines [Array(Array(CreditNoteLineItemParams))?] Line items that make up the credit note.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param metadata [Hash(String, Hash(String, String))?] Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @return [Stripe::CreditNote]
    def get_credit_notes_preview(
      *,
      invoice : String? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil
    ) : Stripe::CreditNote
      data, _status_code, _headers = get_credit_notes_preview_with_http_info(invoice: invoice, refund: refund, lines: lines, reason: reason, metadata: metadata, expand: expand, memo: memo, out_of_band_amount: out_of_band_amount, credit_amount: credit_amount, refund_amount: refund_amount, amount: amount)
      data
    end

    # &lt;p&gt;Get a preview of a credit note without creating it.&lt;/p&gt;
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param lines [Array(Array(CreditNoteLineItemParams))?] Line items that make up the credit note.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param metadata [Hash(String, Hash(String, String))?] Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @return [Tuple(Stripe::CreditNote, Integer, Hash)] Stripe::CreditNote, response status code and response headers
    def get_credit_notes_preview_with_http_info(
      *,
      invoice : String? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil
    ) : Tuple(Stripe::CreditNote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_credit_notes_preview(invoice: invoice, refund: refund, lines: lines, reason: reason, metadata: metadata, expand: expand, memo: memo, out_of_band_amount: out_of_band_amount, credit_amount: credit_amount, refund_amount: refund_amount, amount: amount)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#get_credit_notes_preview\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Get a preview of a credit note without creating it.&lt;/p&gt;
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param lines [Array(Array(CreditNoteLineItemParams))?] Line items that make up the credit note.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param metadata [Hash(String, Hash(String, String))?] Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @return nil
    def get_credit_notes_preview(
      *,
      invoice : String? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_credit_notes_preview(invoice: invoice, refund: refund, lines: lines, reason: reason, metadata: metadata, expand: expand, memo: memo, out_of_band_amount: out_of_band_amount, credit_amount: credit_amount, refund_amount: refund_amount, amount: amount).execute(&block)
    end

    GET_CREDIT_NOTES_PREVIEW_MAX_LENGTH_FOR_INVOICE  = 5000
    GET_CREDIT_NOTES_PREVIEW_VALID_VALUES_FOR_REASON = String.static_array("duplicate", "fraudulent", "order_change", "product_unsatisfactory")
    GET_CREDIT_NOTES_PREVIEW_MAX_LENGTH_FOR_MEMO     = 5000

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_preview(
      *,
      invoice : String? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.get_credit_notes_preview ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, GET_CREDIT_NOTES_PREVIEW_MAX_LENGTH_FOR_INVOICE)
        end

        unless (_reason = reason).nil?
          OpenApi::EnumValidator.validate("reason", _reason, GET_CREDIT_NOTES_PREVIEW_VALID_VALUES_FOR_REASON)
        end

        unless (_memo = memo).nil?
          OpenApi::PrimitiveValidator.validate_max_length("memo", memo.to_s.size, GET_CREDIT_NOTES_PREVIEW_MAX_LENGTH_FOR_MEMO)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes/preview"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["refund"] = refund.to_s if !refund.nil?
      query_params["invoice"] = invoice.to_s if !invoice.nil?
      query_params["lines"] = @api_client.build_collection_param(lines, "csv") if !lines.nil? && !lines.empty?
      query_params["reason"] = reason.to_s if !reason.nil?
      query_params["metadata"] = metadata.to_s if !metadata.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["memo"] = memo.to_s if !memo.nil?
      query_params["out_of_band_amount"] = out_of_band_amount.to_s if !out_of_band_amount.nil?
      query_params["credit_amount"] = credit_amount.to_s if !credit_amount.nil?
      query_params["refund_amount"] = refund_amount.to_s if !refund_amount.nil?
      query_params["amount"] = amount.to_s if !amount.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CreditNotesApi.get_credit_notes_preview",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a credit note preview, youâ€™ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param lines [Array(Array(CreditNoteLineItemParams))?] Line items that make up the credit note.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param metadata [Hash(String, Hash(String, String))?] Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @return [Stripe::CreditNoteLinesList]
    def get_credit_notes_preview_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil
    ) : Stripe::CreditNoteLinesList
      data, _status_code, _headers = get_credit_notes_preview_lines_with_http_info(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, refund: refund, lines: lines, reason: reason, metadata: metadata, expand: expand, memo: memo, out_of_band_amount: out_of_band_amount, credit_amount: credit_amount, refund_amount: refund_amount, amount: amount)
      data
    end

    # &lt;p&gt;When retrieving a credit note preview, youâ€™ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param lines [Array(Array(CreditNoteLineItemParams))?] Line items that make up the credit note.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param metadata [Hash(String, Hash(String, String))?] Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @return [Tuple(Stripe::CreditNoteLinesList, Integer, Hash)] Stripe::CreditNoteLinesList, response status code and response headers
    def get_credit_notes_preview_lines_with_http_info(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil
    ) : Tuple(Stripe::CreditNoteLinesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_credit_notes_preview_lines(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, refund: refund, lines: lines, reason: reason, metadata: metadata, expand: expand, memo: memo, out_of_band_amount: out_of_band_amount, credit_amount: credit_amount, refund_amount: refund_amount, amount: amount)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#get_credit_notes_preview_lines\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNoteLinesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a credit note preview, youâ€™ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param lines [Array(Array(CreditNoteLineItemParams))?] Line items that make up the credit note.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param metadata [Hash(String, Hash(String, String))?] Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @return nil
    def get_credit_notes_preview_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_credit_notes_preview_lines(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, refund: refund, lines: lines, reason: reason, metadata: metadata, expand: expand, memo: memo, out_of_band_amount: out_of_band_amount, credit_amount: credit_amount, refund_amount: refund_amount, amount: amount).execute(&block)
    end

    GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_INVOICE        = 5000
    GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_CREDIT_NOTES_PREVIEW_LINES_VALID_VALUES_FOR_REASON       = String.static_array("duplicate", "fraudulent", "order_change", "product_unsatisfactory")
    GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_MEMO           = 5000

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_preview_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      refund : String? = nil,
      lines : Array(Array(CreditNoteLineItemParams))? = nil,
      reason : String? = nil,
      metadata : Hash(String, Hash(String, String))? = nil,
      expand : Array(Array(String))? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      credit_amount : Int64? = nil,
      refund_amount : Int64? = nil,
      amount : Int64? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.get_credit_notes_preview_lines ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_reason = reason).nil?
          OpenApi::EnumValidator.validate("reason", _reason, GET_CREDIT_NOTES_PREVIEW_LINES_VALID_VALUES_FOR_REASON)
        end

        unless (_memo = memo).nil?
          OpenApi::PrimitiveValidator.validate_max_length("memo", memo.to_s.size, GET_CREDIT_NOTES_PREVIEW_LINES_MAX_LENGTH_FOR_MEMO)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes/preview/lines"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["refund"] = refund.to_s if !refund.nil?
      query_params["invoice"] = invoice.to_s if !invoice.nil?
      query_params["lines"] = @api_client.build_collection_param(lines, "csv") if !lines.nil? && !lines.empty?
      query_params["reason"] = reason.to_s if !reason.nil?
      query_params["metadata"] = metadata.to_s if !metadata.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["memo"] = memo.to_s if !memo.nil?
      query_params["out_of_band_amount"] = out_of_band_amount.to_s if !out_of_band_amount.nil?
      query_params["credit_amount"] = credit_amount.to_s if !credit_amount.nil?
      query_params["refund_amount"] = refund_amount.to_s if !refund_amount.nil?
      query_params["amount"] = amount.to_s if !amount.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CreditNotesApi.get_credit_notes_preview_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result in any combination of the following:</p>  <ul> <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li> <li>Customer balance credit: credit the customerâ€™s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when itâ€™s finalized.</li> <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li> </ul>  <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>  <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoiceâ€™s <code>pre_payment_credit_notes_amount</code> or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lines [Array(Stripe::CreditNoteLineItemParams)?] Line items that make up the credit note.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @return [Stripe::CreditNote]
    def post_credit_notes(
      *,
      invoice : String? = nil,
      amount : Int64? = nil,
      credit_amount : Int64? = nil,
      expand : Array(String)? = nil,
      lines : Array(Stripe::CreditNoteLineItemParams)? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      reason : String? = nil,
      refund : String? = nil,
      refund_amount : Int64? = nil
    ) : Stripe::CreditNote
      data, _status_code, _headers = post_credit_notes_with_http_info(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount)
      data
    end

    # &lt;p&gt;Issue a credit note to adjust the amount of a finalized invoice. For a &lt;code&gt;status&#x3D;open&lt;/code&gt; invoice, a credit note reduces its &lt;code&gt;amount_due&lt;/code&gt;. For a &lt;code&gt;status&#x3D;paid&lt;/code&gt; invoice, a credit note does not affect its &lt;code&gt;amount_due&lt;/code&gt;. Instead, it can result in any combination of the following:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Refund: create a new refund (using &lt;code&gt;refund_amount&lt;/code&gt;) or link an existing refund (using &lt;code&gt;refund&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Customer balance credit: credit the customerâ€™s balance (using &lt;code&gt;credit_amount&lt;/code&gt;) which will be automatically applied to their next invoice when itâ€™s finalized.&lt;/li&gt; &lt;li&gt;Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using &lt;code&gt;out_of_band_amount&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.&lt;/p&gt;  &lt;p&gt;You may issue multiple credit notes for an invoice. Each credit note will increment the invoiceâ€™s &lt;code&gt;pre_payment_credit_notes_amount&lt;/code&gt; or &lt;code&gt;post_payment_credit_notes_amount&lt;/code&gt; depending on its &lt;code&gt;status&lt;/code&gt; at the time of credit note creation.&lt;/p&gt;
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lines [Array(Stripe::CreditNoteLineItemParams)?] Line items that make up the credit note.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @return [Tuple(Stripe::CreditNote, Integer, Hash)] Stripe::CreditNote, response status code and response headers
    def post_credit_notes_with_http_info(
      *,
      invoice : String? = nil,
      amount : Int64? = nil,
      credit_amount : Int64? = nil,
      expand : Array(String)? = nil,
      lines : Array(Stripe::CreditNoteLineItemParams)? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      reason : String? = nil,
      refund : String? = nil,
      refund_amount : Int64? = nil
    ) : Tuple(Stripe::CreditNote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_credit_notes(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#post_credit_notes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Issue a credit note to adjust the amount of a finalized invoice. For a &lt;code&gt;status&#x3D;open&lt;/code&gt; invoice, a credit note reduces its &lt;code&gt;amount_due&lt;/code&gt;. For a &lt;code&gt;status&#x3D;paid&lt;/code&gt; invoice, a credit note does not affect its &lt;code&gt;amount_due&lt;/code&gt;. Instead, it can result in any combination of the following:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Refund: create a new refund (using &lt;code&gt;refund_amount&lt;/code&gt;) or link an existing refund (using &lt;code&gt;refund&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Customer balance credit: credit the customerâ€™s balance (using &lt;code&gt;credit_amount&lt;/code&gt;) which will be automatically applied to their next invoice when itâ€™s finalized.&lt;/li&gt; &lt;li&gt;Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using &lt;code&gt;out_of_band_amount&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.&lt;/p&gt;  &lt;p&gt;You may issue multiple credit notes for an invoice. Each credit note will increment the invoiceâ€™s &lt;code&gt;pre_payment_credit_notes_amount&lt;/code&gt; or &lt;code&gt;post_payment_credit_notes_amount&lt;/code&gt; depending on its &lt;code&gt;status&lt;/code&gt; at the time of credit note creation.&lt;/p&gt;
    # @required @param invoice [String?] ID of the invoice.
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    # @optional @param credit_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lines [Array(Stripe::CreditNoteLineItemParams)?] Line items that make up the credit note.
    # @optional @param memo [String?] The credit note's memo appears on the credit note PDF.
    # @optional @param out_of_band_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    # @optional @param reason [String?] Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    # @optional @param refund [String?] ID of an existing refund to link this credit note to.
    # @optional @param refund_amount [Int32?] The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    # @return nil
    def post_credit_notes(
      *,
      invoice : String? = nil,
      amount : Int64? = nil,
      credit_amount : Int64? = nil,
      expand : Array(String)? = nil,
      lines : Array(Stripe::CreditNoteLineItemParams)? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      reason : String? = nil,
      refund : String? = nil,
      refund_amount : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_credit_notes(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount).execute(&block)
    end

    POST_CREDIT_NOTES_MAX_LENGTH_FOR_INVOICE  = 5000
    POST_CREDIT_NOTES_MAX_LENGTH_FOR_MEMO     = 5000
    POST_CREDIT_NOTES_VALID_VALUES_FOR_REASON = String.static_array("duplicate", "fraudulent", "order_change", "product_unsatisfactory")

    # @return Crest::Request
    def build_api_request_for_post_credit_notes(
      *,
      invoice : String? = nil,
      amount : Int64? = nil,
      credit_amount : Int64? = nil,
      expand : Array(String)? = nil,
      lines : Array(Stripe::CreditNoteLineItemParams)? = nil,
      memo : String? = nil,
      out_of_band_amount : Int64? = nil,
      reason : String? = nil,
      refund : String? = nil,
      refund_amount : Int64? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.post_credit_notes ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_CREDIT_NOTES_MAX_LENGTH_FOR_INVOICE)
        end

        unless (_lines = lines).nil?
          OpenApi::ContainerValidator.validate(container: _lines) if _lines.is_a?(Array)
        end
        unless (_memo = memo).nil?
          OpenApi::PrimitiveValidator.validate_max_length("memo", memo.to_s.size, POST_CREDIT_NOTES_MAX_LENGTH_FOR_MEMO)
        end

        unless (_reason = reason).nil?
          OpenApi::EnumValidator.validate("reason", _reason, POST_CREDIT_NOTES_VALID_VALUES_FOR_REASON)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["credit_amount"] = credit_amount.to_s if !credit_amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice"] = invoice.to_s if !invoice.nil?
      form_params["lines"] = @api_client.build_collection_param(lines, "csv") if !lines.nil? && !lines.empty?
      form_params["memo"] = memo.to_s if !memo.nil?
      form_params["out_of_band_amount"] = out_of_band_amount.to_s if !out_of_band_amount.nil?
      form_params["reason"] = reason.to_s if !reason.nil?
      form_params["refund"] = refund.to_s if !refund.nil?
      form_params["refund_amount"] = refund_amount.to_s if !refund_amount.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CreditNotesApi.post_credit_notes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing credit note.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] Credit note memo.
    # @return [Stripe::CreditNote]
    def post_credit_notes_id(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      memo : String? = nil
    ) : Stripe::CreditNote
      data, _status_code, _headers = post_credit_notes_id_with_http_info(id: id, expand: expand, memo: memo)
      data
    end

    # &lt;p&gt;Updates an existing credit note.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] Credit note memo.
    # @return [Tuple(Stripe::CreditNote, Integer, Hash)] Stripe::CreditNote, response status code and response headers
    def post_credit_notes_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      memo : String? = nil
    ) : Tuple(Stripe::CreditNote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_credit_notes_id(id: id, expand: expand, memo: memo)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#post_credit_notes_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing credit note.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param memo [String?] Credit note memo.
    # @return nil
    def post_credit_notes_id(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      memo : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_credit_notes_id(id: id, expand: expand, memo: memo).execute(&block)
    end

    POST_CREDIT_NOTES_ID_MAX_LENGTH_FOR_ID   = 5000
    POST_CREDIT_NOTES_ID_MAX_LENGTH_FOR_MEMO = 5000

    # @return Crest::Request
    def build_api_request_for_post_credit_notes_id(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      memo : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.post_credit_notes_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_CREDIT_NOTES_ID_MAX_LENGTH_FOR_ID)
        end

        unless (_memo = memo).nil?
          OpenApi::PrimitiveValidator.validate_max_length("memo", memo.to_s.size, POST_CREDIT_NOTES_ID_MAX_LENGTH_FOR_MEMO)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["memo"] = memo.to_s if !memo.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CreditNotesApi.post_credit_notes_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Marks a credit note as void. Learn more about <a href=\"/docs/billing/invoices/credit-notes#voiding\">voiding credit notes</a>.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CreditNote]
    def post_credit_notes_id_void(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::CreditNote
      data, _status_code, _headers = post_credit_notes_id_void_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Marks a credit note as void. Learn more about &lt;a href&#x3D;\&quot;/docs/billing/invoices/credit-notes#voiding\&quot;&gt;voiding credit notes&lt;/a&gt;.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CreditNote, Integer, Hash)] Stripe::CreditNote, response status code and response headers
    def post_credit_notes_id_void_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::CreditNote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_credit_notes_id_void(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CreditNotesApi#post_credit_notes_id_void\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CreditNote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Marks a credit note as void. Learn more about &lt;a href&#x3D;\&quot;/docs/billing/invoices/credit-notes#voiding\&quot;&gt;voiding credit notes&lt;/a&gt;.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_credit_notes_id_void(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_credit_notes_id_void(id: id, expand: expand).execute(&block)
    end

    POST_CREDIT_NOTES_ID_VOID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_credit_notes_id_void(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CreditNotesApi.post_credit_notes_id_void ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_CREDIT_NOTES_ID_VOID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/credit_notes/{id}/void".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CreditNotesApi.post_credit_notes_id_void",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
