#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class PricesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your prices.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param currency [String?] Only return prices for the given currency.
    # @optional @param product [String?] Only return prices for the given product.
    # @optional @param _type [String?] Only return prices of type `recurring` or `one_time`.
    # @optional @param active [Bool?] Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).
    # @optional @param recurring [Stripe::AllPricesRecurringParams?] Only return prices with these recurring fields.
    # @optional @param lookup_keys [Array(Array(String))?] Only return the price with these lookup_keys, if any exist.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PriceList]
    def get_prices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      currency : String? = nil,
      product : String? = nil,
      _type : String? = nil,
      active : Bool? = nil,
      recurring : Stripe::AllPricesRecurringParams? = nil,
      lookup_keys : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PriceList
      data, _status_code, _headers = get_prices_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, currency: currency, product: product, _type: _type, active: active, recurring: recurring, lookup_keys: lookup_keys, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your prices.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param currency [String?] Only return prices for the given currency.
    # @optional @param product [String?] Only return prices for the given product.
    # @optional @param _type [String?] Only return prices of type `recurring` or `one_time`.
    # @optional @param active [Bool?] Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).
    # @optional @param recurring [Stripe::AllPricesRecurringParams?] Only return prices with these recurring fields.
    # @optional @param lookup_keys [Array(Array(String))?] Only return the price with these lookup_keys, if any exist.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PriceList, Integer, Hash)] Stripe::PriceList, response status code and response headers
    def get_prices_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      currency : String? = nil,
      product : String? = nil,
      _type : String? = nil,
      active : Bool? = nil,
      recurring : Stripe::AllPricesRecurringParams? = nil,
      lookup_keys : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PriceList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_prices(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, currency: currency, product: product, _type: _type, active: active, recurring: recurring, lookup_keys: lookup_keys, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PricesApi#get_prices\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PriceList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your prices.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param currency [String?] Only return prices for the given currency.
    # @optional @param product [String?] Only return prices for the given product.
    # @optional @param _type [String?] Only return prices of type `recurring` or `one_time`.
    # @optional @param active [Bool?] Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).
    # @optional @param recurring [Stripe::AllPricesRecurringParams?] Only return prices with these recurring fields.
    # @optional @param lookup_keys [Array(Array(String))?] Only return the price with these lookup_keys, if any exist.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_prices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      currency : String? = nil,
      product : String? = nil,
      _type : String? = nil,
      active : Bool? = nil,
      recurring : Stripe::AllPricesRecurringParams? = nil,
      lookup_keys : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_prices(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, currency: currency, product: product, _type: _type, active: active, recurring: recurring, lookup_keys: lookup_keys, expand: expand).execute(&block)
    end

    GET_PRICES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PRICES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_PRICES_MAX_LENGTH_FOR_PRODUCT        = 5000
    GET_PRICES_VALID_VALUES_FOR__TYPE        = String.static_array("one_time", "recurring")

    # @return Crest::Request
    def build_api_request_for_get_prices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      currency : String? = nil,
      product : String? = nil,
      _type : String? = nil,
      active : Bool? = nil,
      recurring : Stripe::AllPricesRecurringParams? = nil,
      lookup_keys : Array(Array(String))? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PricesApi.get_prices ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PRICES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PRICES_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_product = product).nil?
          OpenApi::PrimitiveValidator.validate_max_length("product", product.to_s.size, GET_PRICES_MAX_LENGTH_FOR_PRODUCT)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_PRICES_VALID_VALUES_FOR__TYPE)
        end

        unless (_recurring = recurring).nil?
          _recurring.validate if _recurring.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/prices"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["product"] = product.to_s if !product.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["recurring"] = recurring.to_s if !recurring.nil?
      query_params["lookup_keys"] = @api_client.build_collection_param(lookup_keys, "csv") if !lookup_keys.nil? && !lookup_keys.empty?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PricesApi.get_prices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the price with the given ID.</p>
    # @required @param price [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Price]
    def get_prices_price(
      *,
      price : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Price
      data, _status_code, _headers = get_prices_price_with_http_info(price: price, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the price with the given ID.&lt;/p&gt;
    # @required @param price [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Price, Integer, Hash)] Stripe::Price, response status code and response headers
    def get_prices_price_with_http_info(
      *,
      price : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Price, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_prices_price(price: price, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PricesApi#get_prices_price\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Price.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the price with the given ID.&lt;/p&gt;
    # @required @param price [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_prices_price(
      *,
      price : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_prices_price(price: price, expand: expand).execute(&block)
    end

    GET_PRICES_PRICE_MAX_LENGTH_FOR_PRICE = 5000

    # @return Crest::Request
    def build_api_request_for_get_prices_price(
      *,
      price : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PricesApi.get_prices_price ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"price\" is required and cannot be null") if price.nil?
        unless (_price = price).nil?
          OpenApi::PrimitiveValidator.validate_max_length("price", price.to_s.size, GET_PRICES_PRICE_MAX_LENGTH_FOR_PRICE)
        end
      end

      # resource path
      local_var_path = "/v1/prices/{price}".sub("{" + "price" + "}", URI.encode_path(price.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PricesApi.get_prices_price",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for prices you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_prices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_prices_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for prices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_prices_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_prices_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PricesApi#get_prices_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for prices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_prices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_prices_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_PRICES_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_PRICES_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_prices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PricesApi.get_prices_search ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_PRICES_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_PRICES_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/prices/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PricesApi.get_prices_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
    # @required @param post_prices_request [Stripe::PostPricesRequest?]
    # @return [Stripe::Price]
    def post_prices(
      *,
      post_prices_request : Stripe::PostPricesRequest? = nil
    ) : Stripe::Price
      data, _status_code, _headers = post_prices_with_http_info(post_prices_request: post_prices_request)
      data
    end

    # &lt;p&gt;Creates a new price for an existing product. The price can be recurring or one-time.&lt;/p&gt;
    # @required @param post_prices_request [Stripe::PostPricesRequest?]
    # @return [Tuple(Stripe::Price, Integer, Hash)] Stripe::Price, response status code and response headers
    def post_prices_with_http_info(
      *,
      post_prices_request : Stripe::PostPricesRequest? = nil
    ) : Tuple(Stripe::Price, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_prices(post_prices_request: post_prices_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PricesApi#post_prices\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Price.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new price for an existing product. The price can be recurring or one-time.&lt;/p&gt;
    # @required @param post_prices_request [Stripe::PostPricesRequest?]
    # @return nil
    def post_prices(
      *,
      post_prices_request : Stripe::PostPricesRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_prices(post_prices_request: post_prices_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_prices(
      *,
      post_prices_request : Stripe::PostPricesRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PricesApi.post_prices ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_prices_request\" is required and cannot be null") if post_prices_request.nil?
        unless (_post_prices_request = post_prices_request).nil?
          _post_prices_request.validate if _post_prices_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/prices"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_prices_request, content_type: header_params["Content-Type"]?) if !post_prices_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PricesApi.post_prices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
    # @required @param price [String?]
    # @optional @param post_prices_price_request [Stripe::PostPricesPriceRequest?]
    # @return [Stripe::Price]
    def post_prices_price(
      *,
      price : String? = nil,
      post_prices_price_request : Stripe::PostPricesPriceRequest? = nil
    ) : Stripe::Price
      data, _status_code, _headers = post_prices_price_with_http_info(price: price, post_prices_price_request: post_prices_price_request)
      data
    end

    # &lt;p&gt;Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.&lt;/p&gt;
    # @required @param price [String?]
    # @optional @param post_prices_price_request [Stripe::PostPricesPriceRequest?]
    # @return [Tuple(Stripe::Price, Integer, Hash)] Stripe::Price, response status code and response headers
    def post_prices_price_with_http_info(
      *,
      price : String? = nil,
      post_prices_price_request : Stripe::PostPricesPriceRequest? = nil
    ) : Tuple(Stripe::Price, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_prices_price(price: price, post_prices_price_request: post_prices_price_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PricesApi#post_prices_price\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Price.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.&lt;/p&gt;
    # @required @param price [String?]
    # @optional @param post_prices_price_request [Stripe::PostPricesPriceRequest?]
    # @return nil
    def post_prices_price(
      *,
      price : String? = nil,
      post_prices_price_request : Stripe::PostPricesPriceRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_prices_price(price: price, post_prices_price_request: post_prices_price_request).execute(&block)
    end

    POST_PRICES_PRICE_MAX_LENGTH_FOR_PRICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_prices_price(
      *,
      price : String? = nil,
      post_prices_price_request : Stripe::PostPricesPriceRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PricesApi.post_prices_price ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"price\" is required and cannot be null") if price.nil?
        unless (_price = price).nil?
          OpenApi::PrimitiveValidator.validate_max_length("price", price.to_s.size, POST_PRICES_PRICE_MAX_LENGTH_FOR_PRICE)
        end
        unless (_post_prices_price_request = post_prices_price_request).nil?
          _post_prices_price_request.validate if _post_prices_price_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/prices/{price}".sub("{" + "price" + "}", URI.encode_path(price.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_prices_price_request, content_type: header_params["Content-Type"]?) if !post_prices_price_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PricesApi.post_prices_price",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
