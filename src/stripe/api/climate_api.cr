#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/beneficiary_params"
require "../models/climate_order"
require "../models/climate_product"
require "../models/climate_removals_orders_list"
require "../models/climate_removals_products_list"
require "../models/climate_removals_suppliers_list"
require "../models/climate_supplier"
require "../models/error"

require "../models/post_climate_orders_order_request_beneficiary"

module Stripe
  class ClimateApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ClimateRemovalsOrdersList]
    def get_climate_orders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ClimateRemovalsOrdersList
      data, _status_code, _headers = get_climate_orders_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Lists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ClimateRemovalsOrdersList, Integer, Hash)] Stripe::ClimateRemovalsOrdersList, response status code and response headers
    def get_climate_orders_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ClimateRemovalsOrdersList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_climate_orders(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#get_climate_orders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateRemovalsOrdersList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Lists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_climate_orders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_climate_orders(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_CLIMATE_ORDERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CLIMATE_ORDERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_climate_orders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.get_climate_orders ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CLIMATE_ORDERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CLIMATE_ORDERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/climate/orders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ClimateApi.get_climate_orders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a Climate order object with the given ID.</p>
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ClimateOrder]
    def get_climate_orders_order(
      *,
      order : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ClimateOrder
      data, _status_code, _headers = get_climate_orders_order_with_http_info(order: order, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a Climate order object with the given ID.&lt;/p&gt;
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ClimateOrder, Integer, Hash)] Stripe::ClimateOrder, response status code and response headers
    def get_climate_orders_order_with_http_info(
      *,
      order : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ClimateOrder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_climate_orders_order(order: order, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#get_climate_orders_order\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateOrder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a Climate order object with the given ID.&lt;/p&gt;
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_climate_orders_order(
      *,
      order : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_climate_orders_order(order: order, expand: expand).execute(&block)
    end

    GET_CLIMATE_ORDERS_ORDER_MAX_LENGTH_FOR_ORDER = 5000

    # @return Crest::Request
    def build_api_request_for_get_climate_orders_order(
      *,
      order : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.get_climate_orders_order ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"order\" is required and cannot be null") if order.nil?
        unless (_order = order).nil?
          OpenApi::PrimitiveValidator.validate_max_length("order", order.to_s.size, GET_CLIMATE_ORDERS_ORDER_MAX_LENGTH_FOR_ORDER)
        end
      end

      # resource path
      local_var_path = "/v1/climate/orders/{order}".sub("{" + "order" + "}", URI.encode_path(order.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ClimateApi.get_climate_orders_order",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Lists all available Climate product objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ClimateRemovalsProductsList]
    def get_climate_products(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ClimateRemovalsProductsList
      data, _status_code, _headers = get_climate_products_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Lists all available Climate product objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ClimateRemovalsProductsList, Integer, Hash)] Stripe::ClimateRemovalsProductsList, response status code and response headers
    def get_climate_products_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ClimateRemovalsProductsList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_climate_products(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#get_climate_products\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateRemovalsProductsList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Lists all available Climate product objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_climate_products(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_climate_products(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_CLIMATE_PRODUCTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CLIMATE_PRODUCTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_climate_products(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.get_climate_products ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CLIMATE_PRODUCTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CLIMATE_PRODUCTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/climate/products"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ClimateApi.get_climate_products",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a Climate product with the given ID.</p>
    # @required @param product [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ClimateProduct]
    def get_climate_products_product(
      *,
      product : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ClimateProduct
      data, _status_code, _headers = get_climate_products_product_with_http_info(product: product, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a Climate product with the given ID.&lt;/p&gt;
    # @required @param product [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ClimateProduct, Integer, Hash)] Stripe::ClimateProduct, response status code and response headers
    def get_climate_products_product_with_http_info(
      *,
      product : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ClimateProduct, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_climate_products_product(product: product, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#get_climate_products_product\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateProduct.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a Climate product with the given ID.&lt;/p&gt;
    # @required @param product [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_climate_products_product(
      *,
      product : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_climate_products_product(product: product, expand: expand).execute(&block)
    end

    GET_CLIMATE_PRODUCTS_PRODUCT_MAX_LENGTH_FOR_PRODUCT = 5000

    # @return Crest::Request
    def build_api_request_for_get_climate_products_product(
      *,
      product : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.get_climate_products_product ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"product\" is required and cannot be null") if product.nil?
        unless (_product = product).nil?
          OpenApi::PrimitiveValidator.validate_max_length("product", product.to_s.size, GET_CLIMATE_PRODUCTS_PRODUCT_MAX_LENGTH_FOR_PRODUCT)
        end
      end

      # resource path
      local_var_path = "/v1/climate/products/{product}".sub("{" + "product" + "}", URI.encode_path(product.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ClimateApi.get_climate_products_product",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Lists all available Climate supplier objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ClimateRemovalsSuppliersList]
    def get_climate_suppliers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ClimateRemovalsSuppliersList
      data, _status_code, _headers = get_climate_suppliers_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Lists all available Climate supplier objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ClimateRemovalsSuppliersList, Integer, Hash)] Stripe::ClimateRemovalsSuppliersList, response status code and response headers
    def get_climate_suppliers_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ClimateRemovalsSuppliersList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_climate_suppliers(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#get_climate_suppliers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateRemovalsSuppliersList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Lists all available Climate supplier objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_climate_suppliers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_climate_suppliers(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_CLIMATE_SUPPLIERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_CLIMATE_SUPPLIERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_climate_suppliers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.get_climate_suppliers ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_CLIMATE_SUPPLIERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_CLIMATE_SUPPLIERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/climate/suppliers"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ClimateApi.get_climate_suppliers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a Climate supplier object.</p>
    # @required @param supplier [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ClimateSupplier]
    def get_climate_suppliers_supplier(
      *,
      supplier : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ClimateSupplier
      data, _status_code, _headers = get_climate_suppliers_supplier_with_http_info(supplier: supplier, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a Climate supplier object.&lt;/p&gt;
    # @required @param supplier [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ClimateSupplier, Integer, Hash)] Stripe::ClimateSupplier, response status code and response headers
    def get_climate_suppliers_supplier_with_http_info(
      *,
      supplier : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ClimateSupplier, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_climate_suppliers_supplier(supplier: supplier, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#get_climate_suppliers_supplier\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateSupplier.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a Climate supplier object.&lt;/p&gt;
    # @required @param supplier [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_climate_suppliers_supplier(
      *,
      supplier : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_climate_suppliers_supplier(supplier: supplier, expand: expand).execute(&block)
    end

    GET_CLIMATE_SUPPLIERS_SUPPLIER_MAX_LENGTH_FOR_SUPPLIER = 5000

    # @return Crest::Request
    def build_api_request_for_get_climate_suppliers_supplier(
      *,
      supplier : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.get_climate_suppliers_supplier ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"supplier\" is required and cannot be null") if supplier.nil?
        unless (_supplier = supplier).nil?
          OpenApi::PrimitiveValidator.validate_max_length("supplier", supplier.to_s.size, GET_CLIMATE_SUPPLIERS_SUPPLIER_MAX_LENGTH_FOR_SUPPLIER)
        end
      end

      # resource path
      local_var_path = "/v1/climate/suppliers/{supplier}".sub("{" + "supplier" + "}", URI.encode_path(supplier.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ClimateApi.get_climate_suppliers_supplier",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a Climate order object for a given Climate product. The order will be processed immediately after creation and payment will be deducted your Stripe balance.</p>
    # @required @param product [String?] Unique identifier of the Climate product.
    # @optional @param amount [Int32?] Requested amount of carbon removal units. Either this or `metric_tons` must be specified.
    # @optional @param beneficiary [Stripe::BeneficiaryParams?]
    # @optional @param currency [String?] Request currency for the order as a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a supported [settlement currency for your account](https://stripe.com/docs/currencies). If omitted, the account's default currency will be used.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param metric_tons [BigDecimal?] Requested number of tons for the order. Either this or `amount` must be specified.
    # @return [Stripe::ClimateOrder]
    def post_climate_orders(
      *,
      product : String? = nil,
      amount : Int64? = nil,
      beneficiary : Stripe::BeneficiaryParams? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      metric_tons : BigDecimal? = nil
    ) : Stripe::ClimateOrder
      data, _status_code, _headers = post_climate_orders_with_http_info(product: product, amount: amount, beneficiary: beneficiary, currency: currency, expand: expand, metadata: metadata, metric_tons: metric_tons)
      data
    end

    # &lt;p&gt;Creates a Climate order object for a given Climate product. The order will be processed immediately after creation and payment will be deducted your Stripe balance.&lt;/p&gt;
    # @required @param product [String?] Unique identifier of the Climate product.
    # @optional @param amount [Int32?] Requested amount of carbon removal units. Either this or `metric_tons` must be specified.
    # @optional @param beneficiary [Stripe::BeneficiaryParams?]
    # @optional @param currency [String?] Request currency for the order as a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a supported [settlement currency for your account](https://stripe.com/docs/currencies). If omitted, the account's default currency will be used.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param metric_tons [BigDecimal?] Requested number of tons for the order. Either this or `amount` must be specified.
    # @return [Tuple(Stripe::ClimateOrder, Integer, Hash)] Stripe::ClimateOrder, response status code and response headers
    def post_climate_orders_with_http_info(
      *,
      product : String? = nil,
      amount : Int64? = nil,
      beneficiary : Stripe::BeneficiaryParams? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      metric_tons : BigDecimal? = nil
    ) : Tuple(Stripe::ClimateOrder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_climate_orders(product: product, amount: amount, beneficiary: beneficiary, currency: currency, expand: expand, metadata: metadata, metric_tons: metric_tons)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#post_climate_orders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateOrder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a Climate order object for a given Climate product. The order will be processed immediately after creation and payment will be deducted your Stripe balance.&lt;/p&gt;
    # @required @param product [String?] Unique identifier of the Climate product.
    # @optional @param amount [Int32?] Requested amount of carbon removal units. Either this or `metric_tons` must be specified.
    # @optional @param beneficiary [Stripe::BeneficiaryParams?]
    # @optional @param currency [String?] Request currency for the order as a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a supported [settlement currency for your account](https://stripe.com/docs/currencies). If omitted, the account's default currency will be used.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param metric_tons [BigDecimal?] Requested number of tons for the order. Either this or `amount` must be specified.
    # @return nil
    def post_climate_orders(
      *,
      product : String? = nil,
      amount : Int64? = nil,
      beneficiary : Stripe::BeneficiaryParams? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      metric_tons : BigDecimal? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_climate_orders(product: product, amount: amount, beneficiary: beneficiary, currency: currency, expand: expand, metadata: metadata, metric_tons: metric_tons).execute(&block)
    end

    POST_CLIMATE_ORDERS_MAX_LENGTH_FOR_PRODUCT  = 5000
    POST_CLIMATE_ORDERS_MAX_LENGTH_FOR_CURRENCY = 5000

    # @return Crest::Request
    def build_api_request_for_post_climate_orders(
      *,
      product : String? = nil,
      amount : Int64? = nil,
      beneficiary : Stripe::BeneficiaryParams? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      metric_tons : BigDecimal? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.post_climate_orders ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"product\" is required and cannot be null") if product.nil?
        unless (_product = product).nil?
          OpenApi::PrimitiveValidator.validate_max_length("product", product.to_s.size, POST_CLIMATE_ORDERS_MAX_LENGTH_FOR_PRODUCT)
        end

        unless (_beneficiary = beneficiary).nil?
          _beneficiary.validate if _beneficiary.is_a?(OpenApi::Validatable)
        end
        unless (_currency = currency).nil?
          OpenApi::PrimitiveValidator.validate_max_length("currency", currency.to_s.size, POST_CLIMATE_ORDERS_MAX_LENGTH_FOR_CURRENCY)
        end
      end

      # resource path
      local_var_path = "/v1/climate/orders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(beneficiary.to_json), "beneficiary")) if !beneficiary.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("metric_tons", metric_tons.to_s) if !metric_tons.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("product", product.to_s) if !product.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ClimateApi.post_climate_orders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified order by setting the values of the parameters passed.</p>
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param beneficiary [Stripe::PostClimateOrdersOrderRequestBeneficiary?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return [Stripe::ClimateOrder]
    def post_climate_orders_order(
      *,
      order : String? = nil,
      beneficiary : Stripe::PostClimateOrdersOrderRequestBeneficiary? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Stripe::ClimateOrder
      data, _status_code, _headers = post_climate_orders_order_with_http_info(order: order, beneficiary: beneficiary, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified order by setting the values of the parameters passed.&lt;/p&gt;
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param beneficiary [Stripe::PostClimateOrdersOrderRequestBeneficiary?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return [Tuple(Stripe::ClimateOrder, Integer, Hash)] Stripe::ClimateOrder, response status code and response headers
    def post_climate_orders_order_with_http_info(
      *,
      order : String? = nil,
      beneficiary : Stripe::PostClimateOrdersOrderRequestBeneficiary? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Tuple(Stripe::ClimateOrder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_climate_orders_order(order: order, beneficiary: beneficiary, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#post_climate_orders_order\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateOrder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified order by setting the values of the parameters passed.&lt;/p&gt;
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param beneficiary [Stripe::PostClimateOrdersOrderRequestBeneficiary?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return nil
    def post_climate_orders_order(
      *,
      order : String? = nil,
      beneficiary : Stripe::PostClimateOrdersOrderRequestBeneficiary? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_climate_orders_order(order: order, beneficiary: beneficiary, expand: expand, metadata: metadata).execute(&block)
    end

    POST_CLIMATE_ORDERS_ORDER_MAX_LENGTH_FOR_ORDER = 5000

    # @return Crest::Request
    def build_api_request_for_post_climate_orders_order(
      *,
      order : String? = nil,
      beneficiary : Stripe::PostClimateOrdersOrderRequestBeneficiary? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.post_climate_orders_order ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"order\" is required and cannot be null") if order.nil?
        unless (_order = order).nil?
          OpenApi::PrimitiveValidator.validate_max_length("order", order.to_s.size, POST_CLIMATE_ORDERS_ORDER_MAX_LENGTH_FOR_ORDER)
        end
        unless (_beneficiary = beneficiary).nil?
          _beneficiary.validate if _beneficiary.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/climate/orders/{order}".sub("{" + "order" + "}", URI.encode_path(order.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(beneficiary.to_json), "beneficiary")) if !beneficiary.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ClimateApi.post_climate_orders_order",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ClimateOrder]
    def post_climate_orders_order_cancel(
      *,
      order : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::ClimateOrder
      data, _status_code, _headers = post_climate_orders_order_cancel_with_http_info(order: order, expand: expand)
      data
    end

    # &lt;p&gt;Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation &lt;code&gt;amount_subtotal&lt;/code&gt;, but not the &lt;code&gt;amount_fees&lt;/code&gt; for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the &lt;code&gt;amount_total&lt;/code&gt;.&lt;/p&gt;
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ClimateOrder, Integer, Hash)] Stripe::ClimateOrder, response status code and response headers
    def post_climate_orders_order_cancel_with_http_info(
      *,
      order : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::ClimateOrder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_climate_orders_order_cancel(order: order, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ClimateApi#post_climate_orders_order_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ClimateOrder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation &lt;code&gt;amount_subtotal&lt;/code&gt;, but not the &lt;code&gt;amount_fees&lt;/code&gt; for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the &lt;code&gt;amount_total&lt;/code&gt;.&lt;/p&gt;
    # @required @param order [String?] Unique identifier of the order.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_climate_orders_order_cancel(
      *,
      order : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_climate_orders_order_cancel(order: order, expand: expand).execute(&block)
    end

    POST_CLIMATE_ORDERS_ORDER_CANCEL_MAX_LENGTH_FOR_ORDER = 5000

    # @return Crest::Request
    def build_api_request_for_post_climate_orders_order_cancel(
      *,
      order : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ClimateApi.post_climate_orders_order_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"order\" is required and cannot be null") if order.nil?
        unless (_order = order).nil?
          OpenApi::PrimitiveValidator.validate_max_length("order", order.to_s.size, POST_CLIMATE_ORDERS_ORDER_CANCEL_MAX_LENGTH_FOR_ORDER)
        end
      end

      # resource path
      local_var_path = "/v1/climate/orders/{order}/cancel".sub("{" + "order" + "}", URI.encode_path(order.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ClimateApi.post_climate_orders_order_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
