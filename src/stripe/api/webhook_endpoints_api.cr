#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class WebhookEndpointsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>You can also delete webhook endpoints via the <a href=\"https://dashboard.stripe.com/account/webhooks\">webhook endpoint management</a> page of the Stripe dashboard.</p>
    # @required @param webhook_endpoint [String?]
    # @return [Stripe::DeletedWebhookEndpoint]
    def delete_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil
    ) : Stripe::DeletedWebhookEndpoint
      data, _status_code, _headers = delete_webhook_endpoints_webhook_endpoint_with_http_info(webhook_endpoint: webhook_endpoint)
      data
    end

    # &lt;p&gt;You can also delete webhook endpoints via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhook endpoint management&lt;/a&gt; page of the Stripe dashboard.&lt;/p&gt;
    # @required @param webhook_endpoint [String?]
    # @return [Tuple(Stripe::DeletedWebhookEndpoint, Integer, Hash)] Stripe::DeletedWebhookEndpoint, response status code and response headers
    def delete_webhook_endpoints_webhook_endpoint_with_http_info(
      *,
      webhook_endpoint : String? = nil
    ) : Tuple(Stripe::DeletedWebhookEndpoint, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: WebhookEndpointsApi#delete_webhook_endpoints_webhook_endpoint\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedWebhookEndpoint.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can also delete webhook endpoints via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhook endpoint management&lt;/a&gt; page of the Stripe dashboard.&lt;/p&gt;
    # @required @param webhook_endpoint [String?]
    # @return nil
    def delete_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint).execute(&block)
    end

    DELETE_WEBHOOK_ENDPOINTS_WEBHOOK_ENDPOINT_MAX_LENGTH_FOR_WEBHOOK_ENDPOINT = 5000

    # @return Crest::Request
    def build_api_request_for_delete_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: WebhookEndpointsApi.delete_webhook_endpoints_webhook_endpoint ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"webhook_endpoint\" is required and cannot be null") if webhook_endpoint.nil?
        unless (_webhook_endpoint = webhook_endpoint).nil?
          OpenApi::PrimitiveValidator.validate_max_length("webhook_endpoint", webhook_endpoint.to_s.size, DELETE_WEBHOOK_ENDPOINTS_WEBHOOK_ENDPOINT_MAX_LENGTH_FOR_WEBHOOK_ENDPOINT)
        end
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints/{webhook_endpoint}".sub("{" + "webhook_endpoint" + "}", URI.encode_path(webhook_endpoint.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "WebhookEndpointsApi.delete_webhook_endpoints_webhook_endpoint",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your webhook endpoints.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::NotificationWebhookEndpointList]
    def get_webhook_endpoints(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::NotificationWebhookEndpointList
      data, _status_code, _headers = get_webhook_endpoints_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your webhook endpoints.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::NotificationWebhookEndpointList, Integer, Hash)] Stripe::NotificationWebhookEndpointList, response status code and response headers
    def get_webhook_endpoints_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::NotificationWebhookEndpointList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_webhook_endpoints(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: WebhookEndpointsApi#get_webhook_endpoints\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::NotificationWebhookEndpointList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your webhook endpoints.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_webhook_endpoints(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_webhook_endpoints(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_WEBHOOK_ENDPOINTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_WEBHOOK_ENDPOINTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_webhook_endpoints(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: WebhookEndpointsApi.get_webhook_endpoints ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_WEBHOOK_ENDPOINTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_WEBHOOK_ENDPOINTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "WebhookEndpointsApi.get_webhook_endpoints",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the webhook endpoint with the given ID.</p>
    # @required @param webhook_endpoint [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::WebhookEndpoint]
    def get_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::WebhookEndpoint
      data, _status_code, _headers = get_webhook_endpoints_webhook_endpoint_with_http_info(webhook_endpoint: webhook_endpoint, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the webhook endpoint with the given ID.&lt;/p&gt;
    # @required @param webhook_endpoint [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::WebhookEndpoint, Integer, Hash)] Stripe::WebhookEndpoint, response status code and response headers
    def get_webhook_endpoints_webhook_endpoint_with_http_info(
      *,
      webhook_endpoint : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::WebhookEndpoint, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: WebhookEndpointsApi#get_webhook_endpoints_webhook_endpoint\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::WebhookEndpoint.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the webhook endpoint with the given ID.&lt;/p&gt;
    # @required @param webhook_endpoint [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, expand: expand).execute(&block)
    end

    GET_WEBHOOK_ENDPOINTS_WEBHOOK_ENDPOINT_MAX_LENGTH_FOR_WEBHOOK_ENDPOINT = 5000

    # @return Crest::Request
    def build_api_request_for_get_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: WebhookEndpointsApi.get_webhook_endpoints_webhook_endpoint ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"webhook_endpoint\" is required and cannot be null") if webhook_endpoint.nil?
        unless (_webhook_endpoint = webhook_endpoint).nil?
          OpenApi::PrimitiveValidator.validate_max_length("webhook_endpoint", webhook_endpoint.to_s.size, GET_WEBHOOK_ENDPOINTS_WEBHOOK_ENDPOINT_MAX_LENGTH_FOR_WEBHOOK_ENDPOINT)
        end
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints/{webhook_endpoint}".sub("{" + "webhook_endpoint" + "}", URI.encode_path(webhook_endpoint.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "WebhookEndpointsApi.get_webhook_endpoints_webhook_endpoint",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href=\"https://dashboard.stripe.com/account/webhooks\">webhooks settings</a> section of the Dashboard.</p>
    # @required @param post_webhook_endpoints_request [Stripe::PostWebhookEndpointsRequest?]
    # @return [Stripe::WebhookEndpoint]
    def post_webhook_endpoints(
      *,
      post_webhook_endpoints_request : Stripe::PostWebhookEndpointsRequest? = nil
    ) : Stripe::WebhookEndpoint
      data, _status_code, _headers = post_webhook_endpoints_with_http_info(post_webhook_endpoints_request: post_webhook_endpoints_request)
      data
    end

    # &lt;p&gt;A webhook endpoint must have a &lt;code&gt;url&lt;/code&gt; and a list of &lt;code&gt;enabled_events&lt;/code&gt;. You may optionally specify the Boolean &lt;code&gt;connect&lt;/code&gt; parameter. If set to true, then a Connect webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; only about events from your account is created. You can also create webhook endpoints in the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhooks settings&lt;/a&gt; section of the Dashboard.&lt;/p&gt;
    # @required @param post_webhook_endpoints_request [Stripe::PostWebhookEndpointsRequest?]
    # @return [Tuple(Stripe::WebhookEndpoint, Integer, Hash)] Stripe::WebhookEndpoint, response status code and response headers
    def post_webhook_endpoints_with_http_info(
      *,
      post_webhook_endpoints_request : Stripe::PostWebhookEndpointsRequest? = nil
    ) : Tuple(Stripe::WebhookEndpoint, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_webhook_endpoints(post_webhook_endpoints_request: post_webhook_endpoints_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: WebhookEndpointsApi#post_webhook_endpoints\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::WebhookEndpoint.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A webhook endpoint must have a &lt;code&gt;url&lt;/code&gt; and a list of &lt;code&gt;enabled_events&lt;/code&gt;. You may optionally specify the Boolean &lt;code&gt;connect&lt;/code&gt; parameter. If set to true, then a Connect webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; only about events from your account is created. You can also create webhook endpoints in the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhooks settings&lt;/a&gt; section of the Dashboard.&lt;/p&gt;
    # @required @param post_webhook_endpoints_request [Stripe::PostWebhookEndpointsRequest?]
    # @return nil
    def post_webhook_endpoints(
      *,
      post_webhook_endpoints_request : Stripe::PostWebhookEndpointsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_webhook_endpoints(post_webhook_endpoints_request: post_webhook_endpoints_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_webhook_endpoints(
      *,
      post_webhook_endpoints_request : Stripe::PostWebhookEndpointsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: WebhookEndpointsApi.post_webhook_endpoints ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_webhook_endpoints_request\" is required and cannot be null") if post_webhook_endpoints_request.nil?
        unless (_post_webhook_endpoints_request = post_webhook_endpoints_request).nil?
          _post_webhook_endpoints_request.validate if _post_webhook_endpoints_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_webhook_endpoints_request, content_type: header_params["Content-Type"]?) if !post_webhook_endpoints_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "WebhookEndpointsApi.post_webhook_endpoints",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
    # @required @param webhook_endpoint [String?]
    # @optional @param post_webhook_endpoints_webhook_endpoint_request [Stripe::PostWebhookEndpointsWebhookEndpointRequest?]
    # @return [Stripe::WebhookEndpoint]
    def post_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil,
      post_webhook_endpoints_webhook_endpoint_request : Stripe::PostWebhookEndpointsWebhookEndpointRequest? = nil
    ) : Stripe::WebhookEndpoint
      data, _status_code, _headers = post_webhook_endpoints_webhook_endpoint_with_http_info(webhook_endpoint: webhook_endpoint, post_webhook_endpoints_webhook_endpoint_request: post_webhook_endpoints_webhook_endpoint_request)
      data
    end

    # &lt;p&gt;Updates the webhook endpoint. You may edit the &lt;code&gt;url&lt;/code&gt;, the list of &lt;code&gt;enabled_events&lt;/code&gt;, and the status of your endpoint.&lt;/p&gt;
    # @required @param webhook_endpoint [String?]
    # @optional @param post_webhook_endpoints_webhook_endpoint_request [Stripe::PostWebhookEndpointsWebhookEndpointRequest?]
    # @return [Tuple(Stripe::WebhookEndpoint, Integer, Hash)] Stripe::WebhookEndpoint, response status code and response headers
    def post_webhook_endpoints_webhook_endpoint_with_http_info(
      *,
      webhook_endpoint : String? = nil,
      post_webhook_endpoints_webhook_endpoint_request : Stripe::PostWebhookEndpointsWebhookEndpointRequest? = nil
    ) : Tuple(Stripe::WebhookEndpoint, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, post_webhook_endpoints_webhook_endpoint_request: post_webhook_endpoints_webhook_endpoint_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: WebhookEndpointsApi#post_webhook_endpoints_webhook_endpoint\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::WebhookEndpoint.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the webhook endpoint. You may edit the &lt;code&gt;url&lt;/code&gt;, the list of &lt;code&gt;enabled_events&lt;/code&gt;, and the status of your endpoint.&lt;/p&gt;
    # @required @param webhook_endpoint [String?]
    # @optional @param post_webhook_endpoints_webhook_endpoint_request [Stripe::PostWebhookEndpointsWebhookEndpointRequest?]
    # @return nil
    def post_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil,
      post_webhook_endpoints_webhook_endpoint_request : Stripe::PostWebhookEndpointsWebhookEndpointRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, post_webhook_endpoints_webhook_endpoint_request: post_webhook_endpoints_webhook_endpoint_request).execute(&block)
    end

    POST_WEBHOOK_ENDPOINTS_WEBHOOK_ENDPOINT_MAX_LENGTH_FOR_WEBHOOK_ENDPOINT = 5000

    # @return Crest::Request
    def build_api_request_for_post_webhook_endpoints_webhook_endpoint(
      *,
      webhook_endpoint : String? = nil,
      post_webhook_endpoints_webhook_endpoint_request : Stripe::PostWebhookEndpointsWebhookEndpointRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: WebhookEndpointsApi.post_webhook_endpoints_webhook_endpoint ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"webhook_endpoint\" is required and cannot be null") if webhook_endpoint.nil?
        unless (_webhook_endpoint = webhook_endpoint).nil?
          OpenApi::PrimitiveValidator.validate_max_length("webhook_endpoint", webhook_endpoint.to_s.size, POST_WEBHOOK_ENDPOINTS_WEBHOOK_ENDPOINT_MAX_LENGTH_FOR_WEBHOOK_ENDPOINT)
        end
        unless (_post_webhook_endpoints_webhook_endpoint_request = post_webhook_endpoints_webhook_endpoint_request).nil?
          _post_webhook_endpoints_webhook_endpoint_request.validate if _post_webhook_endpoints_webhook_endpoint_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints/{webhook_endpoint}".sub("{" + "webhook_endpoint" + "}", URI.encode_path(webhook_endpoint.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_webhook_endpoints_webhook_endpoint_request, content_type: header_params["Content-Type"]?) if !post_webhook_endpoints_webhook_endpoint_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "WebhookEndpointsApi.post_webhook_endpoints_webhook_endpoint",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
