#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/dispute"
require "../models/dispute_evidence_params"
require "../models/dispute_list"
require "../models/error"
require "../models/get_accounts_created_parameter"

require "../models/post_accounts_request_metadata"

module Stripe
  class DisputesApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your disputes.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param charge [String?] Only return disputes associated to the charge specified by this charge ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return disputes that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::DisputeList]
    def get_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::DisputeList
      data, _status_code, _headers = get_disputes_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your disputes.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param charge [String?] Only return disputes associated to the charge specified by this charge ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return disputes that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::DisputeList, Integer, Hash)] Stripe::DisputeList, response status code and response headers
    def get_disputes_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::DisputeList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_disputes(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: DisputesApi#get_disputes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DisputeList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your disputes.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param charge [String?] Only return disputes associated to the charge specified by this charge ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return disputes that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_disputes(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, created: created, expand: expand).execute(&block)
    end

    GET_DISPUTES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_DISPUTES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_DISPUTES_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000
    GET_DISPUTES_MAX_LENGTH_FOR_CHARGE         = 5000

    # @return Crest::Request
    def build_api_request_for_get_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: DisputesApi.get_disputes ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_DISPUTES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_DISPUTES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_DISPUTES_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, GET_DISPUTES_MAX_LENGTH_FOR_CHARGE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/disputes"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DisputesApi.get_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the dispute with the given ID.</p>
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Dispute]
    def get_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Dispute
      data, _status_code, _headers = get_disputes_dispute_with_http_info(dispute: dispute, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the dispute with the given ID.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Dispute, Integer, Hash)] Stripe::Dispute, response status code and response headers
    def get_disputes_dispute_with_http_info(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Dispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_disputes_dispute(dispute: dispute, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: DisputesApi#get_disputes_dispute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Dispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the dispute with the given ID.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_disputes_dispute(dispute: dispute, expand: expand).execute(&block)
    end

    GET_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_get_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: DisputesApi.get_disputes_dispute ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, GET_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE)
        end
      end

      # resource path
      local_var_path = "/v1/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DisputesApi.get_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href=\"https://dashboard.stripe.com/disputes\">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>  <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href=\"/docs/disputes/categories\">guide to dispute types</a>.</p>
    # @required @param dispute [String?]
    # @optional @param evidence [Stripe::DisputeEvidenceParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param submit [Bool?] Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).
    # @return [Stripe::Dispute]
    def post_disputes_dispute(
      *,
      dispute : String? = nil,
      evidence : Stripe::DisputeEvidenceParams? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      submit : Bool? = nil
    ) : Stripe::Dispute
      data, _status_code, _headers = post_disputes_dispute_with_http_info(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata, submit: submit)
      data
    end

    # &lt;p&gt;When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/disputes\&quot;&gt;dashboard&lt;/a&gt;, but if you prefer, you can use the API to submit evidence programmatically.&lt;/p&gt;  &lt;p&gt;Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our &lt;a href&#x3D;\&quot;/docs/disputes/categories\&quot;&gt;guide to dispute types&lt;/a&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param evidence [Stripe::DisputeEvidenceParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param submit [Bool?] Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).
    # @return [Tuple(Stripe::Dispute, Integer, Hash)] Stripe::Dispute, response status code and response headers
    def post_disputes_dispute_with_http_info(
      *,
      dispute : String? = nil,
      evidence : Stripe::DisputeEvidenceParams? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      submit : Bool? = nil
    ) : Tuple(Stripe::Dispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_disputes_dispute(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata, submit: submit)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: DisputesApi#post_disputes_dispute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Dispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/disputes\&quot;&gt;dashboard&lt;/a&gt;, but if you prefer, you can use the API to submit evidence programmatically.&lt;/p&gt;  &lt;p&gt;Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our &lt;a href&#x3D;\&quot;/docs/disputes/categories\&quot;&gt;guide to dispute types&lt;/a&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param evidence [Stripe::DisputeEvidenceParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param submit [Bool?] Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).
    # @return nil
    def post_disputes_dispute(
      *,
      dispute : String? = nil,
      evidence : Stripe::DisputeEvidenceParams? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      submit : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_disputes_dispute(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata, submit: submit).execute(&block)
    end

    POST_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_disputes_dispute(
      *,
      dispute : String? = nil,
      evidence : Stripe::DisputeEvidenceParams? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      submit : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: DisputesApi.post_disputes_dispute ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, POST_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE)
        end
        unless (_evidence = evidence).nil?
          _evidence.validate if _evidence.is_a?(OpenApi::Validatable)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(evidence.to_json), "evidence")) if !evidence.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("submit", submit.to_s) if !submit.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DisputesApi.post_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>  <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
    # @required @param dispute [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Dispute]
    def post_disputes_dispute_close(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Dispute
      data, _status_code, _headers = post_disputes_dispute_close_with_http_info(dispute: dispute, expand: expand)
      data
    end

    # &lt;p&gt;Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.&lt;/p&gt;  &lt;p&gt;The status of the dispute will change from &lt;code&gt;needs_response&lt;/code&gt; to &lt;code&gt;lost&lt;/code&gt;. &lt;em&gt;Closing a dispute is irreversible&lt;/em&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Dispute, Integer, Hash)] Stripe::Dispute, response status code and response headers
    def post_disputes_dispute_close_with_http_info(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Dispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_disputes_dispute_close(dispute: dispute, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: DisputesApi#post_disputes_dispute_close\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Dispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.&lt;/p&gt;  &lt;p&gt;The status of the dispute will change from &lt;code&gt;needs_response&lt;/code&gt; to &lt;code&gt;lost&lt;/code&gt;. &lt;em&gt;Closing a dispute is irreversible&lt;/em&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_disputes_dispute_close(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_disputes_dispute_close(dispute: dispute, expand: expand).execute(&block)
    end

    POST_DISPUTES_DISPUTE_CLOSE_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_disputes_dispute_close(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: DisputesApi.post_disputes_dispute_close ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, POST_DISPUTES_DISPUTE_CLOSE_MAX_LENGTH_FOR_DISPUTE)
        end
      end

      # resource path
      local_var_path = "/v1/disputes/{dispute}/close".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DisputesApi.post_disputes_dispute_close",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
