#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class TreasuryApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of CreditReversals.</p>
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return CreditReversals for a given status.
    # @optional @param received_credit [String?] Only return CreditReversals for the ReceivedCredit ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryReceivedCreditsResourceCreditReversalList]
    def get_treasury_credit_reversals(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, received_credit : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryReceivedCreditsResourceCreditReversalList
      data, _status_code, _headers = get_treasury_credit_reversals_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, received_credit: received_credit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of CreditReversals.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return CreditReversals for a given status.
    # @optional @param received_credit [String?] Only return CreditReversals for the ReceivedCredit ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryReceivedCreditsResourceCreditReversalList, Integer, Hash)] Stripe::TreasuryReceivedCreditsResourceCreditReversalList, response status code and response headers
    def get_treasury_credit_reversals_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, received_credit : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryReceivedCreditsResourceCreditReversalList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_credit_reversals(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, received_credit: received_credit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_credit_reversals\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedCreditsResourceCreditReversalList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of CreditReversals.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return CreditReversals for a given status.
    # @optional @param received_credit [String?] Only return CreditReversals for the ReceivedCredit ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_credit_reversals(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, received_credit : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_credit_reversals(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, received_credit: received_credit, expand: expand).execute(&block)
    end

    GET_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_ENDING_BEFORE   = 5000
    GET_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_STARTING_AFTER  = 5000
    GET_TREASURY_CREDIT_REVERSALS_VALID_VALUES_FOR_STATUS        = String.static_array("canceled", "posted", "processing")
    GET_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_CREDIT = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_credit_reversals(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, received_credit : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_credit_reversals ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_CREDIT_REVERSALS_VALID_VALUES_FOR_STATUS)
        end
        unless (_received_credit = received_credit).nil?
          OpenApi::PrimitiveValidator.validate_max_length("received_credit", received_credit.to_s.size, GET_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_CREDIT)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/credit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["received_credit"] = received_credit.to_s if !received_credit.nil?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_credit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
    # @required @param credit_reversal [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryCreditReversal]
    def get_treasury_credit_reversals_credit_reversal(*, credit_reversal : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryCreditReversal
      data, _status_code, _headers = get_treasury_credit_reversals_credit_reversal_with_http_info(credit_reversal: credit_reversal, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list&lt;/p&gt;
    # @required @param credit_reversal [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryCreditReversal, Integer, Hash)] Stripe::TreasuryCreditReversal, response status code and response headers
    def get_treasury_credit_reversals_credit_reversal_with_http_info(*, credit_reversal : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryCreditReversal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_credit_reversals_credit_reversal(credit_reversal: credit_reversal, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_credit_reversals_credit_reversal\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryCreditReversal.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list&lt;/p&gt;
    # @required @param credit_reversal [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_credit_reversals_credit_reversal(*, credit_reversal : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_credit_reversals_credit_reversal(credit_reversal: credit_reversal, expand: expand).execute(&block)
    end

    GET_TREASURY_CREDIT_REVERSALS_CREDIT_REVERSAL_MAX_LENGTH_FOR_CREDIT_REVERSAL = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_credit_reversals_credit_reversal(*, credit_reversal : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_credit_reversals_credit_reversal ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"credit_reversal\" is required and cannot be null") if credit_reversal.nil?
        unless (_credit_reversal = credit_reversal).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credit_reversal", credit_reversal.to_s.size, GET_TREASURY_CREDIT_REVERSALS_CREDIT_REVERSAL_MAX_LENGTH_FOR_CREDIT_REVERSAL)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/credit_reversals/{credit_reversal}".sub("{" + "credit_reversal" + "}", URI.encode_path(credit_reversal.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_credit_reversals_credit_reversal",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of DebitReversals.</p>
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param resolution [String?] Only return DebitReversals for a given resolution.
    # @optional @param status [String?] Only return DebitReversals for a given status.
    # @optional @param received_debit [String?] Only return DebitReversals for the ReceivedDebit ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryReceivedDebitsResourceDebitReversalList]
    def get_treasury_debit_reversals(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, resolution : String? = nil, status : String? = nil, received_debit : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryReceivedDebitsResourceDebitReversalList
      data, _status_code, _headers = get_treasury_debit_reversals_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, resolution: resolution, status: status, received_debit: received_debit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of DebitReversals.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param resolution [String?] Only return DebitReversals for a given resolution.
    # @optional @param status [String?] Only return DebitReversals for a given status.
    # @optional @param received_debit [String?] Only return DebitReversals for the ReceivedDebit ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryReceivedDebitsResourceDebitReversalList, Integer, Hash)] Stripe::TreasuryReceivedDebitsResourceDebitReversalList, response status code and response headers
    def get_treasury_debit_reversals_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, resolution : String? = nil, status : String? = nil, received_debit : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryReceivedDebitsResourceDebitReversalList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_debit_reversals(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, resolution: resolution, status: status, received_debit: received_debit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_debit_reversals\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedDebitsResourceDebitReversalList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of DebitReversals.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param resolution [String?] Only return DebitReversals for a given resolution.
    # @optional @param status [String?] Only return DebitReversals for a given status.
    # @optional @param received_debit [String?] Only return DebitReversals for the ReceivedDebit ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_debit_reversals(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, resolution : String? = nil, status : String? = nil, received_debit : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_debit_reversals(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, resolution: resolution, status: status, received_debit: received_debit, expand: expand).execute(&block)
    end

    GET_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_DEBIT_REVERSALS_VALID_VALUES_FOR_RESOLUTION   = String.static_array("lost", "won")
    GET_TREASURY_DEBIT_REVERSALS_VALID_VALUES_FOR_STATUS       = String.static_array("canceled", "completed", "processing")
    GET_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_DEBIT = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_debit_reversals(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, resolution : String? = nil, status : String? = nil, received_debit : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_debit_reversals ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_resolution = resolution).nil?
          OpenApi::EnumValidator.validate("resolution", _resolution, GET_TREASURY_DEBIT_REVERSALS_VALID_VALUES_FOR_RESOLUTION)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_DEBIT_REVERSALS_VALID_VALUES_FOR_STATUS)
        end
        unless (_received_debit = received_debit).nil?
          OpenApi::PrimitiveValidator.validate_max_length("received_debit", received_debit.to_s.size, GET_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_DEBIT)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/debit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["resolution"] = resolution.to_s if !resolution.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["received_debit"] = received_debit.to_s if !received_debit.nil?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_debit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a DebitReversal object.</p>
    # @required @param debit_reversal [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryDebitReversal]
    def get_treasury_debit_reversals_debit_reversal(*, debit_reversal : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryDebitReversal
      data, _status_code, _headers = get_treasury_debit_reversals_debit_reversal_with_http_info(debit_reversal: debit_reversal, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a DebitReversal object.&lt;/p&gt;
    # @required @param debit_reversal [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryDebitReversal, Integer, Hash)] Stripe::TreasuryDebitReversal, response status code and response headers
    def get_treasury_debit_reversals_debit_reversal_with_http_info(*, debit_reversal : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryDebitReversal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_debit_reversals_debit_reversal(debit_reversal: debit_reversal, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_debit_reversals_debit_reversal\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryDebitReversal.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a DebitReversal object.&lt;/p&gt;
    # @required @param debit_reversal [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_debit_reversals_debit_reversal(*, debit_reversal : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_debit_reversals_debit_reversal(debit_reversal: debit_reversal, expand: expand).execute(&block)
    end

    GET_TREASURY_DEBIT_REVERSALS_DEBIT_REVERSAL_MAX_LENGTH_FOR_DEBIT_REVERSAL = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_debit_reversals_debit_reversal(*, debit_reversal : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_debit_reversals_debit_reversal ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"debit_reversal\" is required and cannot be null") if debit_reversal.nil?
        unless (_debit_reversal = debit_reversal).nil?
          OpenApi::PrimitiveValidator.validate_max_length("debit_reversal", debit_reversal.to_s.size, GET_TREASURY_DEBIT_REVERSALS_DEBIT_REVERSAL_MAX_LENGTH_FOR_DEBIT_REVERSAL)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/debit_reversals/{debit_reversal}".sub("{" + "debit_reversal" + "}", URI.encode_path(debit_reversal.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_debit_reversals_debit_reversal",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of FinancialAccounts.</p>
    # @optional @param limit [Int32?] A limit ranging from 1 to 100 (defaults to 10).
    # @optional @param ending_before [String?] An object ID cursor for use in pagination.
    # @optional @param starting_after [String?] An object ID cursor for use in pagination.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::TreasuryFinancialAccountsResourceFinancialAccountList]
    def get_treasury_financial_accounts(*, limit : Int64? = nil, ending_before : String? = nil, starting_after : String? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Stripe::TreasuryFinancialAccountsResourceFinancialAccountList
      data, _status_code, _headers = get_treasury_financial_accounts_with_http_info(limit: limit, ending_before: ending_before, starting_after: starting_after, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of FinancialAccounts.&lt;/p&gt;
    # @optional @param limit [Int32?] A limit ranging from 1 to 100 (defaults to 10).
    # @optional @param ending_before [String?] An object ID cursor for use in pagination.
    # @optional @param starting_after [String?] An object ID cursor for use in pagination.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::TreasuryFinancialAccountsResourceFinancialAccountList, Integer, Hash)] Stripe::TreasuryFinancialAccountsResourceFinancialAccountList, response status code and response headers
    def get_treasury_financial_accounts_with_http_info(*, limit : Int64? = nil, ending_before : String? = nil, starting_after : String? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Tuple(Stripe::TreasuryFinancialAccountsResourceFinancialAccountList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_financial_accounts(limit: limit, ending_before: ending_before, starting_after: starting_after, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_financial_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryFinancialAccountsResourceFinancialAccountList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of FinancialAccounts.&lt;/p&gt;
    # @optional @param limit [Int32?] A limit ranging from 1 to 100 (defaults to 10).
    # @optional @param ending_before [String?] An object ID cursor for use in pagination.
    # @optional @param starting_after [String?] An object ID cursor for use in pagination.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_treasury_financial_accounts(*, limit : Int64? = nil, ending_before : String? = nil, starting_after : String? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_financial_accounts(limit: limit, ending_before: ending_before, starting_after: starting_after, expand: expand, created: created).execute(&block)
    end

    GET_TREASURY_FINANCIAL_ACCOUNTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_FINANCIAL_ACCOUNTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_financial_accounts(*, limit : Int64? = nil, ending_before : String? = nil, starting_after : String? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_financial_accounts ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_FINANCIAL_ACCOUNTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_FINANCIAL_ACCOUNTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_financial_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a FinancialAccount.</p>
    # @required @param financial_account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryFinancialAccount]
    def get_treasury_financial_accounts_financial_account(*, financial_account : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryFinancialAccount
      data, _status_code, _headers = get_treasury_financial_accounts_financial_account_with_http_info(financial_account: financial_account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryFinancialAccount, Integer, Hash)] Stripe::TreasuryFinancialAccount, response status code and response headers
    def get_treasury_financial_accounts_financial_account_with_http_info(*, financial_account : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryFinancialAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_financial_accounts_financial_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryFinancialAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_financial_accounts_financial_account(*, financial_account : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand).execute(&block)
    end

    GET_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_financial_accounts_financial_account(*, financial_account : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_financial_accounts_financial_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?
        unless (_financial_account = financial_account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("financial_account", financial_account.to_s.size, GET_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_financial_accounts_financial_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves Features information associated with the FinancialAccount.</p>
    # @required @param financial_account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryFinancialAccountFeatures]
    def get_treasury_financial_accounts_financial_account_features(*, financial_account : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryFinancialAccountFeatures
      data, _status_code, _headers = get_treasury_financial_accounts_financial_account_features_with_http_info(financial_account: financial_account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves Features information associated with the FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryFinancialAccountFeatures, Integer, Hash)] Stripe::TreasuryFinancialAccountFeatures, response status code and response headers
    def get_treasury_financial_accounts_financial_account_features_with_http_info(*, financial_account : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryFinancialAccountFeatures, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_financial_accounts_financial_account_features(financial_account: financial_account, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_financial_accounts_financial_account_features\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryFinancialAccountFeatures.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves Features information associated with the FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_financial_accounts_financial_account_features(*, financial_account : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_financial_accounts_financial_account_features(financial_account: financial_account, expand: expand).execute(&block)
    end

    GET_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_FEATURES_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_financial_accounts_financial_account_features(*, financial_account : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_financial_accounts_financial_account_features ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?
        unless (_financial_account = financial_account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("financial_account", financial_account.to_s.size, GET_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_FEATURES_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}/features".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_financial_accounts_financial_account_features",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryInboundTransfersResourceInboundTransferList]
    def get_treasury_inbound_transfers(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryInboundTransfersResourceInboundTransferList
      data, _status_code, _headers = get_treasury_inbound_transfers_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of InboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryInboundTransfersResourceInboundTransferList, Integer, Hash)] Stripe::TreasuryInboundTransfersResourceInboundTransferList, response status code and response headers
    def get_treasury_inbound_transfers_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryInboundTransfersResourceInboundTransferList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_inbound_transfers(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_inbound_transfers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfersResourceInboundTransferList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of InboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_inbound_transfers(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_inbound_transfers(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand).execute(&block)
    end

    GET_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_INBOUND_TRANSFERS_VALID_VALUES_FOR_STATUS       = String.static_array("canceled", "failed", "processing", "succeeded")

    # @return Crest::Request
    def build_api_request_for_get_treasury_inbound_transfers(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_inbound_transfers ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_INBOUND_TRANSFERS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/inbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_inbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing InboundTransfer.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryInboundTransfer]
    def get_treasury_inbound_transfers_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryInboundTransfer
      data, _status_code, _headers = get_treasury_inbound_transfers_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing InboundTransfer.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryInboundTransfer, Integer, Hash)] Stripe::TreasuryInboundTransfer, response status code and response headers
    def get_treasury_inbound_transfers_id_with_http_info(*, id : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryInboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_inbound_transfers_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_inbound_transfers_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing InboundTransfer.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_inbound_transfers_id(*, id : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_inbound_transfers_id(id: id, expand: expand).execute(&block)
    end

    GET_TREASURY_INBOUND_TRANSFERS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_inbound_transfers_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_inbound_transfers_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TREASURY_INBOUND_TRANSFERS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/inbound_transfers/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_inbound_transfers_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return OutboundPayments sent to this customer.
    # @optional @param status [String?] Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentList]
    def get_treasury_outbound_payments(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, customer : String? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentList
      data, _status_code, _headers = get_treasury_outbound_payments_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of OutboundPayments sent from the specified FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return OutboundPayments sent to this customer.
    # @optional @param status [String?] Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentList, Integer, Hash)] Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentList, response status code and response headers
    def get_treasury_outbound_payments_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, customer : String? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_outbound_payments(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_outbound_payments\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of OutboundPayments sent from the specified FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return OutboundPayments sent to this customer.
    # @optional @param status [String?] Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_outbound_payments(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, customer : String? = nil, status : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_outbound_payments(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, status: status, expand: expand).execute(&block)
    end

    GET_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_CUSTOMER       = 5000
    GET_TREASURY_OUTBOUND_PAYMENTS_VALID_VALUES_FOR_STATUS       = String.static_array("canceled", "failed", "posted", "processing", "returned")

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_payments(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, customer : String? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_outbound_payments ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_OUTBOUND_PAYMENTS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_payments"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_outbound_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundPayment]
    def get_treasury_outbound_payments_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = get_treasury_outbound_payments_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def get_treasury_outbound_payments_id_with_http_info(*, id : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_outbound_payments_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_outbound_payments_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_outbound_payments_id(*, id : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_outbound_payments_id(id: id, expand: expand).execute(&block)
    end

    GET_TREASURY_OUTBOUND_PAYMENTS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_payments_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_outbound_payments_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TREASURY_OUTBOUND_PAYMENTS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_payments/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_outbound_payments_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundTransfersResourceOutboundTransferList]
    def get_treasury_outbound_transfers(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryOutboundTransfersResourceOutboundTransferList
      data, _status_code, _headers = get_treasury_outbound_transfers_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of OutboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundTransfersResourceOutboundTransferList, Integer, Hash)] Stripe::TreasuryOutboundTransfersResourceOutboundTransferList, response status code and response headers
    def get_treasury_outbound_transfers_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryOutboundTransfersResourceOutboundTransferList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_outbound_transfers(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_outbound_transfers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfersResourceOutboundTransferList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of OutboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_outbound_transfers(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_outbound_transfers(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand).execute(&block)
    end

    GET_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_OUTBOUND_TRANSFERS_VALID_VALUES_FOR_STATUS       = String.static_array("canceled", "failed", "posted", "processing", "returned")

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_transfers(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_outbound_transfers ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_OUTBOUND_TRANSFERS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_outbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundTransfer]
    def get_treasury_outbound_transfers_outbound_transfer(*, outbound_transfer : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = get_treasury_outbound_transfers_outbound_transfer_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def get_treasury_outbound_transfers_outbound_transfer_with_http_info(*, outbound_transfer : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_outbound_transfers_outbound_transfer(outbound_transfer: outbound_transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_outbound_transfers_outbound_transfer\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_outbound_transfers_outbound_transfer(*, outbound_transfer : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_outbound_transfers_outbound_transfer(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    GET_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_transfers_outbound_transfer(*, outbound_transfer : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_outbound_transfers_outbound_transfer ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, GET_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_transfers/{outbound_transfer}".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_outbound_transfers_outbound_transfer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of ReceivedCredits.</p>
    # @required @param financial_account [String?] The FinancialAccount that received the funds.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param linked_flows [Stripe::LinkedFlowsParam?] Only return ReceivedCredits described by the flow.
    # @optional @param status [String?] Only return ReceivedCredits that have the given status: `succeeded` or `failed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryReceivedCreditsResourceReceivedCreditList]
    def get_treasury_received_credits(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, linked_flows : Stripe::LinkedFlowsParam? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryReceivedCreditsResourceReceivedCreditList
      data, _status_code, _headers = get_treasury_received_credits_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, linked_flows: linked_flows, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of ReceivedCredits.&lt;/p&gt;
    # @required @param financial_account [String?] The FinancialAccount that received the funds.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param linked_flows [Stripe::LinkedFlowsParam?] Only return ReceivedCredits described by the flow.
    # @optional @param status [String?] Only return ReceivedCredits that have the given status: `succeeded` or `failed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryReceivedCreditsResourceReceivedCreditList, Integer, Hash)] Stripe::TreasuryReceivedCreditsResourceReceivedCreditList, response status code and response headers
    def get_treasury_received_credits_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, linked_flows : Stripe::LinkedFlowsParam? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryReceivedCreditsResourceReceivedCreditList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_received_credits(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, linked_flows: linked_flows, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_received_credits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedCreditsResourceReceivedCreditList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of ReceivedCredits.&lt;/p&gt;
    # @required @param financial_account [String?] The FinancialAccount that received the funds.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param linked_flows [Stripe::LinkedFlowsParam?] Only return ReceivedCredits described by the flow.
    # @optional @param status [String?] Only return ReceivedCredits that have the given status: `succeeded` or `failed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_received_credits(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, linked_flows : Stripe::LinkedFlowsParam? = nil, status : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_received_credits(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, linked_flows: linked_flows, status: status, expand: expand).execute(&block)
    end

    GET_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_RECEIVED_CREDITS_VALID_VALUES_FOR_STATUS       = String.static_array("failed", "succeeded")

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_credits(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, linked_flows : Stripe::LinkedFlowsParam? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_received_credits ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_linked_flows = linked_flows).nil?
          _linked_flows.validate if _linked_flows.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_RECEIVED_CREDITS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/received_credits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["linked_flows"] = linked_flows.to_s if !linked_flows.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_received_credits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryReceivedCredit]
    def get_treasury_received_credits_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryReceivedCredit
      data, _status_code, _headers = get_treasury_received_credits_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryReceivedCredit, Integer, Hash)] Stripe::TreasuryReceivedCredit, response status code and response headers
    def get_treasury_received_credits_id_with_http_info(*, id : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryReceivedCredit, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_received_credits_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_received_credits_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedCredit.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_received_credits_id(*, id : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_received_credits_id(id: id, expand: expand).execute(&block)
    end

    GET_TREASURY_RECEIVED_CREDITS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_credits_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_received_credits_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TREASURY_RECEIVED_CREDITS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/received_credits/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_received_credits_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of ReceivedDebits.</p>
    # @required @param financial_account [String?] The FinancialAccount that funds were pulled from.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return ReceivedDebits that have the given status: `succeeded` or `failed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryReceivedDebitsResourceReceivedDebitList]
    def get_treasury_received_debits(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryReceivedDebitsResourceReceivedDebitList
      data, _status_code, _headers = get_treasury_received_debits_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of ReceivedDebits.&lt;/p&gt;
    # @required @param financial_account [String?] The FinancialAccount that funds were pulled from.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return ReceivedDebits that have the given status: `succeeded` or `failed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryReceivedDebitsResourceReceivedDebitList, Integer, Hash)] Stripe::TreasuryReceivedDebitsResourceReceivedDebitList, response status code and response headers
    def get_treasury_received_debits_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryReceivedDebitsResourceReceivedDebitList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_received_debits(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_received_debits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedDebitsResourceReceivedDebitList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of ReceivedDebits.&lt;/p&gt;
    # @required @param financial_account [String?] The FinancialAccount that funds were pulled from.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return ReceivedDebits that have the given status: `succeeded` or `failed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_received_debits(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_received_debits(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand).execute(&block)
    end

    GET_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_RECEIVED_DEBITS_VALID_VALUES_FOR_STATUS       = String.static_array("failed", "succeeded")

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_debits(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_received_debits ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_RECEIVED_DEBITS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/received_debits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_received_debits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryReceivedDebit]
    def get_treasury_received_debits_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryReceivedDebit
      data, _status_code, _headers = get_treasury_received_debits_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryReceivedDebit, Integer, Hash)] Stripe::TreasuryReceivedDebit, response status code and response headers
    def get_treasury_received_debits_id_with_http_info(*, id : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryReceivedDebit, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_received_debits_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_received_debits_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedDebit.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_received_debits_id(*, id : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_received_debits_id(id: id, expand: expand).execute(&block)
    end

    GET_TREASURY_RECEIVED_DEBITS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_debits_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_received_debits_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TREASURY_RECEIVED_DEBITS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/received_debits/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_received_debits_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a list of TransactionEntry objects.</p>
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param transaction [String?] Only return TransactionEntries associated with this Transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param order_by [String?] The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @optional @param effective_at [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::TreasuryTransactionsResourceTransactionEntryList]
    def get_treasury_transaction_entries(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, transaction : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, effective_at : Stripe::GetAccountsCreatedParameter? = nil) : Stripe::TreasuryTransactionsResourceTransactionEntryList
      data, _status_code, _headers = get_treasury_transaction_entries_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, transaction: transaction, expand: expand, order_by: order_by, created: created, effective_at: effective_at)
      data
    end

    # &lt;p&gt;Retrieves a list of TransactionEntry objects.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param transaction [String?] Only return TransactionEntries associated with this Transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param order_by [String?] The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @optional @param effective_at [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::TreasuryTransactionsResourceTransactionEntryList, Integer, Hash)] Stripe::TreasuryTransactionsResourceTransactionEntryList, response status code and response headers
    def get_treasury_transaction_entries_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, transaction : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, effective_at : Stripe::GetAccountsCreatedParameter? = nil) : Tuple(Stripe::TreasuryTransactionsResourceTransactionEntryList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_transaction_entries(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, transaction: transaction, expand: expand, order_by: order_by, created: created, effective_at: effective_at)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_transaction_entries\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryTransactionsResourceTransactionEntryList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a list of TransactionEntry objects.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param transaction [String?] Only return TransactionEntries associated with this Transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param order_by [String?] The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @optional @param effective_at [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_treasury_transaction_entries(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, transaction : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, effective_at : Stripe::GetAccountsCreatedParameter? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_transaction_entries(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, limit: limit, transaction: transaction, expand: expand, order_by: order_by, created: created, effective_at: effective_at).execute(&block)
    end

    GET_TREASURY_TRANSACTION_ENTRIES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_TRANSACTION_ENTRIES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_TRANSACTION_ENTRIES_MAX_LENGTH_FOR_TRANSACTION    = 5000
    GET_TREASURY_TRANSACTION_ENTRIES_VALID_VALUES_FOR_ORDER_BY     = String.static_array("created", "effective_at")

    # @return Crest::Request
    def build_api_request_for_get_treasury_transaction_entries(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, transaction : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, effective_at : Stripe::GetAccountsCreatedParameter? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_transaction_entries ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_TRANSACTION_ENTRIES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_TRANSACTION_ENTRIES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, GET_TREASURY_TRANSACTION_ENTRIES_MAX_LENGTH_FOR_TRANSACTION)
        end

        unless (_order_by = order_by).nil?
          OpenApi::EnumValidator.validate("order_by", _order_by, GET_TREASURY_TRANSACTION_ENTRIES_VALID_VALUES_FOR_ORDER_BY)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_effective_at = effective_at).nil?
          _effective_at.validate if _effective_at.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/transaction_entries"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["transaction"] = transaction.to_s if !transaction.nil?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["order_by"] = order_by.to_s if !order_by.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["effective_at"] = effective_at.to_s if !effective_at.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_transaction_entries",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a TransactionEntry object.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryTransactionEntry]
    def get_treasury_transaction_entries_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryTransactionEntry
      data, _status_code, _headers = get_treasury_transaction_entries_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a TransactionEntry object.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryTransactionEntry, Integer, Hash)] Stripe::TreasuryTransactionEntry, response status code and response headers
    def get_treasury_transaction_entries_id_with_http_info(*, id : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryTransactionEntry, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_transaction_entries_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_transaction_entries_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryTransactionEntry.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a TransactionEntry object.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_transaction_entries_id(*, id : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_transaction_entries_id(id: id, expand: expand).execute(&block)
    end

    GET_TREASURY_TRANSACTION_ENTRIES_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_transaction_entries_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_transaction_entries_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TREASURY_TRANSACTION_ENTRIES_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/transaction_entries/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_transaction_entries_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a list of Transaction objects.</p>
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param status_transitions [Stripe::StatusTransitionTimestampSpecs?] A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return Transactions that have the given status: `open`, `posted`, or `void`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param order_by [String?] The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::TreasuryTransactionsResourceTransactionList]
    def get_treasury_transactions(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, status_transitions : Stripe::StatusTransitionTimestampSpecs? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Stripe::TreasuryTransactionsResourceTransactionList
      data, _status_code, _headers = get_treasury_transactions_with_http_info(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, status_transitions: status_transitions, limit: limit, status: status, expand: expand, order_by: order_by, created: created)
      data
    end

    # &lt;p&gt;Retrieves a list of Transaction objects.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param status_transitions [Stripe::StatusTransitionTimestampSpecs?] A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return Transactions that have the given status: `open`, `posted`, or `void`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param order_by [String?] The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::TreasuryTransactionsResourceTransactionList, Integer, Hash)] Stripe::TreasuryTransactionsResourceTransactionList, response status code and response headers
    def get_treasury_transactions_with_http_info(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, status_transitions : Stripe::StatusTransitionTimestampSpecs? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Tuple(Stripe::TreasuryTransactionsResourceTransactionList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_transactions(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, status_transitions: status_transitions, limit: limit, status: status, expand: expand, order_by: order_by, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_transactions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryTransactionsResourceTransactionList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a list of Transaction objects.&lt;/p&gt;
    # @required @param financial_account [String?] Returns objects associated with this FinancialAccount.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param status_transitions [Stripe::StatusTransitionTimestampSpecs?] A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return Transactions that have the given status: `open`, `posted`, or `void`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param order_by [String?] The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_treasury_transactions(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, status_transitions : Stripe::StatusTransitionTimestampSpecs? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_transactions(financial_account: financial_account, ending_before: ending_before, starting_after: starting_after, status_transitions: status_transitions, limit: limit, status: status, expand: expand, order_by: order_by, created: created).execute(&block)
    end

    GET_TREASURY_TRANSACTIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TREASURY_TRANSACTIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TREASURY_TRANSACTIONS_VALID_VALUES_FOR_STATUS       = String.static_array("open", "posted", "void")
    GET_TREASURY_TRANSACTIONS_VALID_VALUES_FOR_ORDER_BY     = String.static_array("created", "posted_at")

    # @return Crest::Request
    def build_api_request_for_get_treasury_transactions(*, financial_account : String? = nil, ending_before : String? = nil, starting_after : String? = nil, status_transitions : Stripe::StatusTransitionTimestampSpecs? = nil, limit : Int64? = nil, status : String? = nil, expand : Array(Array(String))? = nil, order_by : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_transactions ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TREASURY_TRANSACTIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TREASURY_TRANSACTIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_status_transitions = status_transitions).nil?
          _status_transitions.validate if _status_transitions.is_a?(OpenApi::Validatable)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TREASURY_TRANSACTIONS_VALID_VALUES_FOR_STATUS)
        end

        unless (_order_by = order_by).nil?
          OpenApi::EnumValidator.validate("order_by", _order_by, GET_TREASURY_TRANSACTIONS_VALID_VALUES_FOR_ORDER_BY)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/transactions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status_transitions"] = status_transitions.to_s if !status_transitions.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["order_by"] = order_by.to_s if !order_by.nil?
      query_params["created"] = created.to_s if !created.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing Transaction.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryTransaction]
    def get_treasury_transactions_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Stripe::TreasuryTransaction
      data, _status_code, _headers = get_treasury_transactions_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing Transaction.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryTransaction, Integer, Hash)] Stripe::TreasuryTransaction, response status code and response headers
    def get_treasury_transactions_id_with_http_info(*, id : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::TreasuryTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_treasury_transactions_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#get_treasury_transactions_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing Transaction.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_treasury_transactions_id(*, id : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_treasury_transactions_id(id: id, expand: expand).execute(&block)
    end

    GET_TREASURY_TRANSACTIONS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_treasury_transactions_id(*, id : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.get_treasury_transactions_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TREASURY_TRANSACTIONS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/transactions/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TreasuryApi.get_treasury_transactions_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
    # @required @param received_credit [String?] The ReceivedCredit to reverse.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryCreditReversal]
    def post_treasury_credit_reversals(*, received_credit : String? = nil, expand : Array(String)? = nil) : Stripe::TreasuryCreditReversal
      data, _status_code, _headers = post_treasury_credit_reversals_with_http_info(received_credit: received_credit, expand: expand)
      data
    end

    # &lt;p&gt;Reverses a ReceivedCredit and creates a CreditReversal object.&lt;/p&gt;
    # @required @param received_credit [String?] The ReceivedCredit to reverse.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryCreditReversal, Integer, Hash)] Stripe::TreasuryCreditReversal, response status code and response headers
    def post_treasury_credit_reversals_with_http_info(*, received_credit : String? = nil, expand : Array(String)? = nil) : Tuple(Stripe::TreasuryCreditReversal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_credit_reversals(received_credit: received_credit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_credit_reversals\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryCreditReversal.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Reverses a ReceivedCredit and creates a CreditReversal object.&lt;/p&gt;
    # @required @param received_credit [String?] The ReceivedCredit to reverse.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_treasury_credit_reversals(*, received_credit : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_credit_reversals(received_credit: received_credit, expand: expand).execute(&block)
    end

    POST_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_CREDIT = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_credit_reversals(*, received_credit : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_credit_reversals ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"received_credit\" is required and cannot be null") if received_credit.nil?
        unless (_received_credit = received_credit).nil?
          OpenApi::PrimitiveValidator.validate_max_length("received_credit", received_credit.to_s.size, POST_TREASURY_CREDIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_CREDIT)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/credit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["received_credit"] = received_credit.to_s if !received_credit.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_credit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
    # @required @param received_debit [String?] The ReceivedDebit to reverse.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryDebitReversal]
    def post_treasury_debit_reversals(*, received_debit : String? = nil, expand : Array(String)? = nil) : Stripe::TreasuryDebitReversal
      data, _status_code, _headers = post_treasury_debit_reversals_with_http_info(received_debit: received_debit, expand: expand)
      data
    end

    # &lt;p&gt;Reverses a ReceivedDebit and creates a DebitReversal object.&lt;/p&gt;
    # @required @param received_debit [String?] The ReceivedDebit to reverse.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryDebitReversal, Integer, Hash)] Stripe::TreasuryDebitReversal, response status code and response headers
    def post_treasury_debit_reversals_with_http_info(*, received_debit : String? = nil, expand : Array(String)? = nil) : Tuple(Stripe::TreasuryDebitReversal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_debit_reversals(received_debit: received_debit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_debit_reversals\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryDebitReversal.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Reverses a ReceivedDebit and creates a DebitReversal object.&lt;/p&gt;
    # @required @param received_debit [String?] The ReceivedDebit to reverse.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_treasury_debit_reversals(*, received_debit : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_debit_reversals(received_debit: received_debit, expand: expand).execute(&block)
    end

    POST_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_DEBIT = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_debit_reversals(*, received_debit : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_debit_reversals ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"received_debit\" is required and cannot be null") if received_debit.nil?
        unless (_received_debit = received_debit).nil?
          OpenApi::PrimitiveValidator.validate_max_length("received_debit", received_debit.to_s.size, POST_TREASURY_DEBIT_REVERSALS_MAX_LENGTH_FOR_RECEIVED_DEBIT)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/debit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["received_debit"] = received_debit.to_s if !received_debit.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_debit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
    # @required @param supported_currencies [Array(String)?] The currencies the FinancialAccount can hold a balance in.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeatureAccess?]
    # @optional @param platform_restrictions [Stripe::PlatformRestrictions?]
    # @return [Stripe::TreasuryFinancialAccount]
    def post_treasury_financial_accounts(*, supported_currencies : Array(String)? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil) : Stripe::TreasuryFinancialAccount
      data, _status_code, _headers = post_treasury_financial_accounts_with_http_info(supported_currencies: supported_currencies, expand: expand, features: features, platform_restrictions: platform_restrictions)
      data
    end

    # &lt;p&gt;Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.&lt;/p&gt;
    # @required @param supported_currencies [Array(String)?] The currencies the FinancialAccount can hold a balance in.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeatureAccess?]
    # @optional @param platform_restrictions [Stripe::PlatformRestrictions?]
    # @return [Tuple(Stripe::TreasuryFinancialAccount, Integer, Hash)] Stripe::TreasuryFinancialAccount, response status code and response headers
    def post_treasury_financial_accounts_with_http_info(*, supported_currencies : Array(String)? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil) : Tuple(Stripe::TreasuryFinancialAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_financial_accounts(supported_currencies: supported_currencies, expand: expand, features: features, platform_restrictions: platform_restrictions)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_financial_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryFinancialAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.&lt;/p&gt;
    # @required @param supported_currencies [Array(String)?] The currencies the FinancialAccount can hold a balance in.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeatureAccess?]
    # @optional @param platform_restrictions [Stripe::PlatformRestrictions?]
    # @return nil
    def post_treasury_financial_accounts(*, supported_currencies : Array(String)? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_financial_accounts(supported_currencies: supported_currencies, expand: expand, features: features, platform_restrictions: platform_restrictions).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_financial_accounts(*, supported_currencies : Array(String)? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_financial_accounts ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"supported_currencies\" is required and cannot be null") if supported_currencies.nil?

        unless (_features = features).nil?
          _features.validate if _features.is_a?(OpenApi::Validatable)
        end
        unless (_platform_restrictions = platform_restrictions).nil?
          _platform_restrictions.validate if _platform_restrictions.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?
      form_params["platform_restrictions"] = platform_restrictions.to_s if !platform_restrictions.nil?
      form_params["supported_currencies"] = @api_client.build_collection_param(supported_currencies, "csv") if !supported_currencies.nil? && !supported_currencies.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_financial_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the details of a FinancialAccount.</p>
    # @required @param financial_account [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeatureAccess?]
    # @optional @param platform_restrictions [Stripe::PlatformRestrictions?]
    # @return [Stripe::TreasuryFinancialAccount]
    def post_treasury_financial_accounts_financial_account(*, financial_account : String? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil) : Stripe::TreasuryFinancialAccount
      data, _status_code, _headers = post_treasury_financial_accounts_financial_account_with_http_info(financial_account: financial_account, expand: expand, features: features, platform_restrictions: platform_restrictions)
      data
    end

    # &lt;p&gt;Updates the details of a FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeatureAccess?]
    # @optional @param platform_restrictions [Stripe::PlatformRestrictions?]
    # @return [Tuple(Stripe::TreasuryFinancialAccount, Integer, Hash)] Stripe::TreasuryFinancialAccount, response status code and response headers
    def post_treasury_financial_accounts_financial_account_with_http_info(*, financial_account : String? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil) : Tuple(Stripe::TreasuryFinancialAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand, features: features, platform_restrictions: platform_restrictions)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_financial_accounts_financial_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryFinancialAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the details of a FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeatureAccess?]
    # @optional @param platform_restrictions [Stripe::PlatformRestrictions?]
    # @return nil
    def post_treasury_financial_accounts_financial_account(*, financial_account : String? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand, features: features, platform_restrictions: platform_restrictions).execute(&block)
    end

    POST_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_financial_accounts_financial_account(*, financial_account : String? = nil, expand : Array(String)? = nil, features : Stripe::FeatureAccess? = nil, platform_restrictions : Stripe::PlatformRestrictions? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_financial_accounts_financial_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?
        unless (_financial_account = financial_account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("financial_account", financial_account.to_s.size, POST_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
        end

        unless (_features = features).nil?
          _features.validate if _features.is_a?(OpenApi::Validatable)
        end
        unless (_platform_restrictions = platform_restrictions).nil?
          _platform_restrictions.validate if _platform_restrictions.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?
      form_params["platform_restrictions"] = platform_restrictions.to_s if !platform_restrictions.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_financial_accounts_financial_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the Features associated with a FinancialAccount.</p>
    # @required @param financial_account [String?]
    # @optional @param card_issuing [Stripe::Access?]
    # @optional @param deposit_insurance [Stripe::Access?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param financial_addresses [Stripe::FinancialAddresses?]
    # @optional @param inbound_transfers [Stripe::InboundTransfers?]
    # @optional @param intra_stripe_flows [Stripe::Access?]
    # @optional @param outbound_payments [Stripe::OutboundPayments?]
    # @optional @param outbound_transfers [Stripe::OutboundTransfers?]
    # @return [Stripe::TreasuryFinancialAccountFeatures]
    def post_treasury_financial_accounts_financial_account_features(*, financial_account : String? = nil, card_issuing : Stripe::Access? = nil, deposit_insurance : Stripe::Access? = nil, expand : Array(String)? = nil, financial_addresses : Stripe::FinancialAddresses? = nil, inbound_transfers : Stripe::InboundTransfers? = nil, intra_stripe_flows : Stripe::Access? = nil, outbound_payments : Stripe::OutboundPayments? = nil, outbound_transfers : Stripe::OutboundTransfers? = nil) : Stripe::TreasuryFinancialAccountFeatures
      data, _status_code, _headers = post_treasury_financial_accounts_financial_account_features_with_http_info(financial_account: financial_account, card_issuing: card_issuing, deposit_insurance: deposit_insurance, expand: expand, financial_addresses: financial_addresses, inbound_transfers: inbound_transfers, intra_stripe_flows: intra_stripe_flows, outbound_payments: outbound_payments, outbound_transfers: outbound_transfers)
      data
    end

    # &lt;p&gt;Updates the Features associated with a FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param card_issuing [Stripe::Access?]
    # @optional @param deposit_insurance [Stripe::Access?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param financial_addresses [Stripe::FinancialAddresses?]
    # @optional @param inbound_transfers [Stripe::InboundTransfers?]
    # @optional @param intra_stripe_flows [Stripe::Access?]
    # @optional @param outbound_payments [Stripe::OutboundPayments?]
    # @optional @param outbound_transfers [Stripe::OutboundTransfers?]
    # @return [Tuple(Stripe::TreasuryFinancialAccountFeatures, Integer, Hash)] Stripe::TreasuryFinancialAccountFeatures, response status code and response headers
    def post_treasury_financial_accounts_financial_account_features_with_http_info(*, financial_account : String? = nil, card_issuing : Stripe::Access? = nil, deposit_insurance : Stripe::Access? = nil, expand : Array(String)? = nil, financial_addresses : Stripe::FinancialAddresses? = nil, inbound_transfers : Stripe::InboundTransfers? = nil, intra_stripe_flows : Stripe::Access? = nil, outbound_payments : Stripe::OutboundPayments? = nil, outbound_transfers : Stripe::OutboundTransfers? = nil) : Tuple(Stripe::TreasuryFinancialAccountFeatures, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_financial_accounts_financial_account_features(financial_account: financial_account, card_issuing: card_issuing, deposit_insurance: deposit_insurance, expand: expand, financial_addresses: financial_addresses, inbound_transfers: inbound_transfers, intra_stripe_flows: intra_stripe_flows, outbound_payments: outbound_payments, outbound_transfers: outbound_transfers)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_financial_accounts_financial_account_features\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryFinancialAccountFeatures.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the Features associated with a FinancialAccount.&lt;/p&gt;
    # @required @param financial_account [String?]
    # @optional @param card_issuing [Stripe::Access?]
    # @optional @param deposit_insurance [Stripe::Access?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param financial_addresses [Stripe::FinancialAddresses?]
    # @optional @param inbound_transfers [Stripe::InboundTransfers?]
    # @optional @param intra_stripe_flows [Stripe::Access?]
    # @optional @param outbound_payments [Stripe::OutboundPayments?]
    # @optional @param outbound_transfers [Stripe::OutboundTransfers?]
    # @return nil
    def post_treasury_financial_accounts_financial_account_features(*, financial_account : String? = nil, card_issuing : Stripe::Access? = nil, deposit_insurance : Stripe::Access? = nil, expand : Array(String)? = nil, financial_addresses : Stripe::FinancialAddresses? = nil, inbound_transfers : Stripe::InboundTransfers? = nil, intra_stripe_flows : Stripe::Access? = nil, outbound_payments : Stripe::OutboundPayments? = nil, outbound_transfers : Stripe::OutboundTransfers? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_financial_accounts_financial_account_features(financial_account: financial_account, card_issuing: card_issuing, deposit_insurance: deposit_insurance, expand: expand, financial_addresses: financial_addresses, inbound_transfers: inbound_transfers, intra_stripe_flows: intra_stripe_flows, outbound_payments: outbound_payments, outbound_transfers: outbound_transfers).execute(&block)
    end

    POST_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_FEATURES_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_financial_accounts_financial_account_features(*, financial_account : String? = nil, card_issuing : Stripe::Access? = nil, deposit_insurance : Stripe::Access? = nil, expand : Array(String)? = nil, financial_addresses : Stripe::FinancialAddresses? = nil, inbound_transfers : Stripe::InboundTransfers? = nil, intra_stripe_flows : Stripe::Access? = nil, outbound_payments : Stripe::OutboundPayments? = nil, outbound_transfers : Stripe::OutboundTransfers? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_financial_accounts_financial_account_features ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?
        unless (_financial_account = financial_account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("financial_account", financial_account.to_s.size, POST_TREASURY_FINANCIAL_ACCOUNTS_FINANCIAL_ACCOUNT_FEATURES_MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
        end
        unless (_card_issuing = card_issuing).nil?
          _card_issuing.validate if _card_issuing.is_a?(OpenApi::Validatable)
        end
        unless (_deposit_insurance = deposit_insurance).nil?
          _deposit_insurance.validate if _deposit_insurance.is_a?(OpenApi::Validatable)
        end

        unless (_financial_addresses = financial_addresses).nil?
          _financial_addresses.validate if _financial_addresses.is_a?(OpenApi::Validatable)
        end
        unless (_inbound_transfers = inbound_transfers).nil?
          _inbound_transfers.validate if _inbound_transfers.is_a?(OpenApi::Validatable)
        end
        unless (_intra_stripe_flows = intra_stripe_flows).nil?
          _intra_stripe_flows.validate if _intra_stripe_flows.is_a?(OpenApi::Validatable)
        end
        unless (_outbound_payments = outbound_payments).nil?
          _outbound_payments.validate if _outbound_payments.is_a?(OpenApi::Validatable)
        end
        unless (_outbound_transfers = outbound_transfers).nil?
          _outbound_transfers.validate if _outbound_transfers.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}/features".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["card_issuing"] = card_issuing.to_s if !card_issuing.nil?
      form_params["deposit_insurance"] = deposit_insurance.to_s if !deposit_insurance.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_addresses"] = financial_addresses.to_s if !financial_addresses.nil?
      form_params["inbound_transfers"] = inbound_transfers.to_s if !inbound_transfers.nil?
      form_params["intra_stripe_flows"] = intra_stripe_flows.to_s if !intra_stripe_flows.nil?
      form_params["outbound_payments"] = outbound_payments.to_s if !outbound_payments.nil?
      form_params["outbound_transfers"] = outbound_transfers.to_s if !outbound_transfers.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_financial_accounts_financial_account_features",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an InboundTransfer.</p>
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param origin_payment_method [String?] The origin payment method to be debited for the InboundTransfer.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] The complete description that appears on your customers' statements. Maximum 10 characters.
    # @return [Stripe::TreasuryInboundTransfer]
    def post_treasury_inbound_transfers(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, origin_payment_method : String? = nil, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Stripe::TreasuryInboundTransfer
      data, _status_code, _headers = post_treasury_inbound_transfers_with_http_info(amount: amount, currency: currency, financial_account: financial_account, origin_payment_method: origin_payment_method, description: description, expand: expand, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;Creates an InboundTransfer.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param origin_payment_method [String?] The origin payment method to be debited for the InboundTransfer.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] The complete description that appears on your customers' statements. Maximum 10 characters.
    # @return [Tuple(Stripe::TreasuryInboundTransfer, Integer, Hash)] Stripe::TreasuryInboundTransfer, response status code and response headers
    def post_treasury_inbound_transfers_with_http_info(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, origin_payment_method : String? = nil, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Tuple(Stripe::TreasuryInboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_inbound_transfers(amount: amount, currency: currency, financial_account: financial_account, origin_payment_method: origin_payment_method, description: description, expand: expand, statement_descriptor: statement_descriptor)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_inbound_transfers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an InboundTransfer.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param origin_payment_method [String?] The origin payment method to be debited for the InboundTransfer.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] The complete description that appears on your customers' statements. Maximum 10 characters.
    # @return nil
    def post_treasury_inbound_transfers(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, origin_payment_method : String? = nil, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_inbound_transfers(amount: amount, currency: currency, financial_account: financial_account, origin_payment_method: origin_payment_method, description: description, expand: expand, statement_descriptor: statement_descriptor).execute(&block)
    end

    POST_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_ORIGIN_PAYMENT_METHOD = 5000
    POST_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_DESCRIPTION           = 5000
    POST_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR  =   10

    # @return Crest::Request
    def build_api_request_for_post_treasury_inbound_transfers(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, origin_payment_method : String? = nil, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_inbound_transfers ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        raise ArgumentError.new("\"origin_payment_method\" is required and cannot be null") if origin_payment_method.nil?
        unless (_origin_payment_method = origin_payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("origin_payment_method", origin_payment_method.to_s.size, POST_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_ORIGIN_PAYMENT_METHOD)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_TREASURY_INBOUND_TRANSFERS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/inbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["origin_payment_method"] = origin_payment_method.to_s if !origin_payment_method.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_inbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels an InboundTransfer.</p>
    # @required @param inbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryInboundTransfer]
    def post_treasury_inbound_transfers_inbound_transfer_cancel(*, inbound_transfer : String? = nil, expand : Array(String)? = nil) : Stripe::TreasuryInboundTransfer
      data, _status_code, _headers = post_treasury_inbound_transfers_inbound_transfer_cancel_with_http_info(inbound_transfer: inbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Cancels an InboundTransfer.&lt;/p&gt;
    # @required @param inbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryInboundTransfer, Integer, Hash)] Stripe::TreasuryInboundTransfer, response status code and response headers
    def post_treasury_inbound_transfers_inbound_transfer_cancel_with_http_info(*, inbound_transfer : String? = nil, expand : Array(String)? = nil) : Tuple(Stripe::TreasuryInboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_inbound_transfers_inbound_transfer_cancel(inbound_transfer: inbound_transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_inbound_transfers_inbound_transfer_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels an InboundTransfer.&lt;/p&gt;
    # @required @param inbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_treasury_inbound_transfers_inbound_transfer_cancel(*, inbound_transfer : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_inbound_transfers_inbound_transfer_cancel(inbound_transfer: inbound_transfer, expand: expand).execute(&block)
    end

    POST_TREASURY_INBOUND_TRANSFERS_INBOUND_TRANSFER_CANCEL_MAX_LENGTH_FOR_INBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_inbound_transfers_inbound_transfer_cancel(*, inbound_transfer : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_inbound_transfers_inbound_transfer_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"inbound_transfer\" is required and cannot be null") if inbound_transfer.nil?
        unless (_inbound_transfer = inbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("inbound_transfer", inbound_transfer.to_s.size, POST_TREASURY_INBOUND_TRANSFERS_INBOUND_TRANSFER_CANCEL_MAX_LENGTH_FOR_INBOUND_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/inbound_transfers/{inbound_transfer}/cancel".sub("{" + "inbound_transfer" + "}", URI.encode_path(inbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_inbound_transfers_inbound_transfer_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an OutboundPayment.</p>
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @optional @param customer [String?] ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination_payment_method [String?] The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.
    # @optional @param destination_payment_method_data [Stripe::PaymentMethodData?]
    # @optional @param destination_payment_method_options [Stripe::PaymentMethodOptions?]
    # @optional @param end_user_details [Stripe::EndUserDetailsParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `wire` payments, or 500 characters for `stripe` network transfers. The default value is `payment`.
    # @return [Stripe::TreasuryOutboundPayment]
    def post_treasury_outbound_payments(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : Stripe::PaymentMethodData? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, end_user_details : Stripe::EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_treasury_outbound_payments_with_http_info(amount: amount, currency: currency, financial_account: financial_account, customer: customer, description: description, destination_payment_method: destination_payment_method, destination_payment_method_data: destination_payment_method_data, destination_payment_method_options: destination_payment_method_options, end_user_details: end_user_details, expand: expand, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;Creates an OutboundPayment.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @optional @param customer [String?] ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination_payment_method [String?] The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.
    # @optional @param destination_payment_method_data [Stripe::PaymentMethodData?]
    # @optional @param destination_payment_method_options [Stripe::PaymentMethodOptions?]
    # @optional @param end_user_details [Stripe::EndUserDetailsParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `wire` payments, or 500 characters for `stripe` network transfers. The default value is `payment`.
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_treasury_outbound_payments_with_http_info(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : Stripe::PaymentMethodData? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, end_user_details : Stripe::EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_outbound_payments(amount: amount, currency: currency, financial_account: financial_account, customer: customer, description: description, destination_payment_method: destination_payment_method, destination_payment_method_data: destination_payment_method_data, destination_payment_method_options: destination_payment_method_options, end_user_details: end_user_details, expand: expand, statement_descriptor: statement_descriptor)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_outbound_payments\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an OutboundPayment.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @optional @param customer [String?] ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination_payment_method [String?] The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.
    # @optional @param destination_payment_method_data [Stripe::PaymentMethodData?]
    # @optional @param destination_payment_method_options [Stripe::PaymentMethodOptions?]
    # @optional @param end_user_details [Stripe::EndUserDetailsParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `wire` payments, or 500 characters for `stripe` network transfers. The default value is `payment`.
    # @return nil
    def post_treasury_outbound_payments(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : Stripe::PaymentMethodData? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, end_user_details : Stripe::EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_outbound_payments(amount: amount, currency: currency, financial_account: financial_account, customer: customer, description: description, destination_payment_method: destination_payment_method, destination_payment_method_data: destination_payment_method_data, destination_payment_method_options: destination_payment_method_options, end_user_details: end_user_details, expand: expand, statement_descriptor: statement_descriptor).execute(&block)
    end

    POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_CUSTOMER                   = 5000
    POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_DESCRIPTION                = 5000
    POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD = 5000
    POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR       = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_payments(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : Stripe::PaymentMethodData? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, end_user_details : Stripe::EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_outbound_payments ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_DESCRIPTION)
        end
        unless (_destination_payment_method = destination_payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("destination_payment_method", destination_payment_method.to_s.size, POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD)
        end
        unless (_destination_payment_method_data = destination_payment_method_data).nil?
          _destination_payment_method_data.validate if _destination_payment_method_data.is_a?(OpenApi::Validatable)
        end
        unless (_destination_payment_method_options = destination_payment_method_options).nil?
          _destination_payment_method_options.validate if _destination_payment_method_options.is_a?(OpenApi::Validatable)
        end
        unless (_end_user_details = end_user_details).nil?
          _end_user_details.validate if _end_user_details.is_a?(OpenApi::Validatable)
        end

        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_TREASURY_OUTBOUND_PAYMENTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_payments"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["destination_payment_method"] = destination_payment_method.to_s if !destination_payment_method.nil?
      form_params["destination_payment_method_data"] = destination_payment_method_data.to_s if !destination_payment_method_data.nil?
      form_params["destination_payment_method_options"] = destination_payment_method_options.to_s if !destination_payment_method_options.nil?
      form_params["end_user_details"] = end_user_details.to_s if !end_user_details.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_outbound_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancel an OutboundPayment.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundPayment]
    def post_treasury_outbound_payments_id_cancel(*, id : String? = nil, expand : Array(String)? = nil) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_treasury_outbound_payments_id_cancel_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Cancel an OutboundPayment.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_treasury_outbound_payments_id_cancel_with_http_info(*, id : String? = nil, expand : Array(String)? = nil) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_outbound_payments_id_cancel(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_outbound_payments_id_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancel an OutboundPayment.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_treasury_outbound_payments_id_cancel(*, id : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_outbound_payments_id_cancel(id: id, expand: expand).execute(&block)
    end

    POST_TREASURY_OUTBOUND_PAYMENTS_ID_CANCEL_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_payments_id_cancel(*, id : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_outbound_payments_id_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TREASURY_OUTBOUND_PAYMENTS_ID_CANCEL_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_payments/{id}/cancel".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_outbound_payments_id_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an OutboundTransfer.</p>
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination_payment_method [String?] The PaymentMethod to use as the payment instrument for the OutboundTransfer.
    # @optional @param destination_payment_method_options [Stripe::PaymentMethodOptions?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `wire` transfers. The default value is `transfer`.
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_treasury_outbound_transfers(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_treasury_outbound_transfers_with_http_info(amount: amount, currency: currency, financial_account: financial_account, description: description, destination_payment_method: destination_payment_method, destination_payment_method_options: destination_payment_method_options, expand: expand, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;Creates an OutboundTransfer.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination_payment_method [String?] The PaymentMethod to use as the payment instrument for the OutboundTransfer.
    # @optional @param destination_payment_method_options [Stripe::PaymentMethodOptions?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `wire` transfers. The default value is `transfer`.
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_treasury_outbound_transfers_with_http_info(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_outbound_transfers(amount: amount, currency: currency, financial_account: financial_account, description: description, destination_payment_method: destination_payment_method, destination_payment_method_options: destination_payment_method_options, expand: expand, statement_descriptor: statement_descriptor)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_outbound_transfers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an OutboundTransfer.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination_payment_method [String?] The PaymentMethod to use as the payment instrument for the OutboundTransfer.
    # @optional @param destination_payment_method_options [Stripe::PaymentMethodOptions?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param statement_descriptor [String?] Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `wire` transfers. The default value is `transfer`.
    # @return nil
    def post_treasury_outbound_transfers(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_outbound_transfers(amount: amount, currency: currency, financial_account: financial_account, description: description, destination_payment_method: destination_payment_method, destination_payment_method_options: destination_payment_method_options, expand: expand, statement_descriptor: statement_descriptor).execute(&block)
    end

    POST_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_DESCRIPTION                = 5000
    POST_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD = 5000
    POST_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR       = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_transfers(*, amount : Int64? = nil, currency : String? = nil, financial_account : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_options : Stripe::PaymentMethodOptions? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_outbound_transfers ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_DESCRIPTION)
        end
        unless (_destination_payment_method = destination_payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("destination_payment_method", destination_payment_method.to_s.size, POST_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD)
        end
        unless (_destination_payment_method_options = destination_payment_method_options).nil?
          _destination_payment_method_options.validate if _destination_payment_method_options.is_a?(OpenApi::Validatable)
        end

        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_TREASURY_OUTBOUND_TRANSFERS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["destination_payment_method"] = destination_payment_method.to_s if !destination_payment_method.nil?
      form_params["destination_payment_method_options"] = destination_payment_method_options.to_s if !destination_payment_method_options.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_outbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_treasury_outbound_transfers_outbound_transfer_cancel(*, outbound_transfer : String? = nil, expand : Array(String)? = nil) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_treasury_outbound_transfers_outbound_transfer_cancel_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;An OutboundTransfer can be canceled if the funds have not yet been paid out.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_treasury_outbound_transfers_outbound_transfer_cancel_with_http_info(*, outbound_transfer : String? = nil, expand : Array(String)? = nil) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_treasury_outbound_transfers_outbound_transfer_cancel(outbound_transfer: outbound_transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TreasuryApi#post_treasury_outbound_transfers_outbound_transfer_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;An OutboundTransfer can be canceled if the funds have not yet been paid out.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_treasury_outbound_transfers_outbound_transfer_cancel(*, outbound_transfer : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_treasury_outbound_transfers_outbound_transfer_cancel(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    POST_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_CANCEL_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_transfers_outbound_transfer_cancel(*, outbound_transfer : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TreasuryApi.post_treasury_outbound_transfers_outbound_transfer_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, POST_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_CANCEL_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_transfers/{outbound_transfer}/cancel".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TreasuryApi.post_treasury_outbound_transfers_outbound_transfer_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
