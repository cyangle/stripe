#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class TokensApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieves the token with the given ID.</p>
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Token]
    def get_tokens_token(*, token : String? = nil, expand : Array(Array(String))? = nil) : Stripe::Token
      data, _status_code, _headers = get_tokens_token_with_http_info(token: token, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Token, Integer, Hash)] Stripe::Token, response status code and response headers
    def get_tokens_token_with_http_info(*, token : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::Token, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tokens_token(token: token, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TokensApi#get_tokens_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Token.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tokens_token(*, token : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_tokens_token(token: token, expand: expand).execute(&block)
    end

    GET_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN = 5000

    # @return Crest::Request
    def build_api_request_for_get_tokens_token(*, token : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TokensApi.get_tokens_token ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"token\" is required and cannot be null") if token.nil?
        unless (_token = token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("token", token.to_s.size, GET_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN)
        end
      end

      # resource path
      local_var_path = "/v1/tokens/{token}".sub("{" + "token" + "}", URI.encode_path(token.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TokensApi.get_tokens_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href=\"#accounts\">Custom account</a>.</p>
    # @optional @param account [Stripe::ConnectJsAccountTokenSpecs?]
    # @optional @param bank_account [Stripe::TokenCreateBankAccount?]
    # @optional @param card [Stripe::PostTokensRequestCard?]
    # @optional @param customer [String?] The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    # @optional @param cvc_update [Stripe::CvcParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param person [Stripe::PersonTokenSpecs?]
    # @optional @param pii [Stripe::PiiTokenSpecs?]
    # @return [Stripe::Token]
    def post_tokens(*, account : Stripe::ConnectJsAccountTokenSpecs? = nil, bank_account : Stripe::TokenCreateBankAccount? = nil, card : Stripe::PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : Stripe::CvcParams? = nil, expand : Array(String)? = nil, person : Stripe::PersonTokenSpecs? = nil, pii : Stripe::PiiTokenSpecs? = nil) : Stripe::Token
      data, _status_code, _headers = post_tokens_with_http_info(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii)
      data
    end

    # &lt;p&gt;Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;Custom account&lt;/a&gt;.&lt;/p&gt;
    # @optional @param account [Stripe::ConnectJsAccountTokenSpecs?]
    # @optional @param bank_account [Stripe::TokenCreateBankAccount?]
    # @optional @param card [Stripe::PostTokensRequestCard?]
    # @optional @param customer [String?] The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    # @optional @param cvc_update [Stripe::CvcParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param person [Stripe::PersonTokenSpecs?]
    # @optional @param pii [Stripe::PiiTokenSpecs?]
    # @return [Tuple(Stripe::Token, Integer, Hash)] Stripe::Token, response status code and response headers
    def post_tokens_with_http_info(*, account : Stripe::ConnectJsAccountTokenSpecs? = nil, bank_account : Stripe::TokenCreateBankAccount? = nil, card : Stripe::PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : Stripe::CvcParams? = nil, expand : Array(String)? = nil, person : Stripe::PersonTokenSpecs? = nil, pii : Stripe::PiiTokenSpecs? = nil) : Tuple(Stripe::Token, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tokens(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TokensApi#post_tokens\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Token.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;Custom account&lt;/a&gt;.&lt;/p&gt;
    # @optional @param account [Stripe::ConnectJsAccountTokenSpecs?]
    # @optional @param bank_account [Stripe::TokenCreateBankAccount?]
    # @optional @param card [Stripe::PostTokensRequestCard?]
    # @optional @param customer [String?] The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    # @optional @param cvc_update [Stripe::CvcParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param person [Stripe::PersonTokenSpecs?]
    # @optional @param pii [Stripe::PiiTokenSpecs?]
    # @return nil
    def post_tokens(*, account : Stripe::ConnectJsAccountTokenSpecs? = nil, bank_account : Stripe::TokenCreateBankAccount? = nil, card : Stripe::PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : Stripe::CvcParams? = nil, expand : Array(String)? = nil, person : Stripe::PersonTokenSpecs? = nil, pii : Stripe::PiiTokenSpecs? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_tokens(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii).execute(&block)
    end

    POST_TOKENS_MAX_LENGTH_FOR_CUSTOMER = 5000

    # @return Crest::Request
    def build_api_request_for_post_tokens(*, account : Stripe::ConnectJsAccountTokenSpecs? = nil, bank_account : Stripe::TokenCreateBankAccount? = nil, card : Stripe::PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : Stripe::CvcParams? = nil, expand : Array(String)? = nil, person : Stripe::PersonTokenSpecs? = nil, pii : Stripe::PiiTokenSpecs? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: TokensApi.post_tokens ..." }
      end

      if client_side_validation
        unless (_account = account).nil?
          _account.validate if _account.is_a?(OpenApi::Validatable)
        end
        unless (_bank_account = bank_account).nil?
          _bank_account.validate if _bank_account.is_a?(OpenApi::Validatable)
        end
        unless (_card = card).nil?
          _card.validate if _card.is_a?(OpenApi::Validatable)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_TOKENS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_cvc_update = cvc_update).nil?
          _cvc_update.validate if _cvc_update.is_a?(OpenApi::Validatable)
        end

        unless (_person = person).nil?
          _person.validate if _person.is_a?(OpenApi::Validatable)
        end
        unless (_pii = pii).nil?
          _pii.validate if _pii.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tokens"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["cvc_update"] = cvc_update.to_s if !cvc_update.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["person"] = person.to_s if !person.nil?
      form_params["pii"] = pii.to_s if !pii.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TokensApi.post_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
