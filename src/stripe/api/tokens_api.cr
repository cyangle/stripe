#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/connect_js_account_token_specs"
require "../models/cvc_params"
require "../models/error"
require "../models/person_token_specs"
require "../models/pii_token_specs"
require "../models/post_tokens_request_card"
require "../models/token"
require "../models/token_create_bank_account"

module Stripe
  class TokensApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieves the token with the given ID.</p>
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Token]
    def get_tokens_token(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Token
      data, _status_code, _headers = get_tokens_token_with_http_info(token: token, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Token, Integer, Hash)] Stripe::Token, response status code and response headers
    def get_tokens_token_with_http_info(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Token, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tokens_token(token: token, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TokensApi#get_tokens_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Token.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tokens_token(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tokens_token(token: token, expand: expand).execute(&block)
    end

    GET_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN = 5000

    # @return Crest::Request
    def build_api_request_for_get_tokens_token(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TokensApi.get_tokens_token ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"token\" is required and cannot be null") if token.nil?
        unless (_token = token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("token", token.to_s.size, GET_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN)
        end
      end

      # resource path
      local_var_path = "/v1/tokens/{token}".sub("{" + "token" + "}", URI.encode_path(token.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TokensApi.get_tokens_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a single-use token that represents a bank account’s details. You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href=\"#accounts\">connected account</a> where <a href=\"/api/accounts/object#account_object-controller-requirement_collection\">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>
    # @optional @param account [Stripe::ConnectJsAccountTokenSpecs?]
    # @optional @param bank_account [Stripe::TokenCreateBankAccount?]
    # @optional @param card [Stripe::PostTokensRequestCard?]
    # @optional @param customer [String?] Create a token for the customer, which is owned by the application's account. You can only use this with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). Learn more about [cloning saved payment methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    # @optional @param cvc_update [Stripe::CvcParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param person [Stripe::PersonTokenSpecs?]
    # @optional @param pii [Stripe::PiiTokenSpecs?]
    # @return [Stripe::Token]
    def post_tokens(
      *,
      account : Stripe::ConnectJsAccountTokenSpecs? = nil,
      bank_account : Stripe::TokenCreateBankAccount? = nil,
      card : Stripe::PostTokensRequestCard? = nil,
      customer : String? = nil,
      cvc_update : Stripe::CvcParams? = nil,
      expand : Array(String)? = nil,
      person : Stripe::PersonTokenSpecs? = nil,
      pii : Stripe::PiiTokenSpecs? = nil
    ) : Stripe::Token
      data, _status_code, _headers = post_tokens_with_http_info(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii)
      data
    end

    # &lt;p&gt;Creates a single-use token that represents a bank account’s details. You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;connected account&lt;/a&gt; where &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;controller.requirement_collection&lt;/a&gt; is &lt;code&gt;application&lt;/code&gt;, which includes Custom accounts.&lt;/p&gt;
    # @optional @param account [Stripe::ConnectJsAccountTokenSpecs?]
    # @optional @param bank_account [Stripe::TokenCreateBankAccount?]
    # @optional @param card [Stripe::PostTokensRequestCard?]
    # @optional @param customer [String?] Create a token for the customer, which is owned by the application's account. You can only use this with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). Learn more about [cloning saved payment methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    # @optional @param cvc_update [Stripe::CvcParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param person [Stripe::PersonTokenSpecs?]
    # @optional @param pii [Stripe::PiiTokenSpecs?]
    # @return [Tuple(Stripe::Token, Integer, Hash)] Stripe::Token, response status code and response headers
    def post_tokens_with_http_info(
      *,
      account : Stripe::ConnectJsAccountTokenSpecs? = nil,
      bank_account : Stripe::TokenCreateBankAccount? = nil,
      card : Stripe::PostTokensRequestCard? = nil,
      customer : String? = nil,
      cvc_update : Stripe::CvcParams? = nil,
      expand : Array(String)? = nil,
      person : Stripe::PersonTokenSpecs? = nil,
      pii : Stripe::PiiTokenSpecs? = nil
    ) : Tuple(Stripe::Token, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tokens(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TokensApi#post_tokens\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Token.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a single-use token that represents a bank account’s details. You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;connected account&lt;/a&gt; where &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;controller.requirement_collection&lt;/a&gt; is &lt;code&gt;application&lt;/code&gt;, which includes Custom accounts.&lt;/p&gt;
    # @optional @param account [Stripe::ConnectJsAccountTokenSpecs?]
    # @optional @param bank_account [Stripe::TokenCreateBankAccount?]
    # @optional @param card [Stripe::PostTokensRequestCard?]
    # @optional @param customer [String?] Create a token for the customer, which is owned by the application's account. You can only use this with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). Learn more about [cloning saved payment methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    # @optional @param cvc_update [Stripe::CvcParams?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param person [Stripe::PersonTokenSpecs?]
    # @optional @param pii [Stripe::PiiTokenSpecs?]
    # @return nil
    def post_tokens(
      *,
      account : Stripe::ConnectJsAccountTokenSpecs? = nil,
      bank_account : Stripe::TokenCreateBankAccount? = nil,
      card : Stripe::PostTokensRequestCard? = nil,
      customer : String? = nil,
      cvc_update : Stripe::CvcParams? = nil,
      expand : Array(String)? = nil,
      person : Stripe::PersonTokenSpecs? = nil,
      pii : Stripe::PiiTokenSpecs? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tokens(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii).execute(&block)
    end

    POST_TOKENS_MAX_LENGTH_FOR_CUSTOMER = 5000

    # @return Crest::Request
    def build_api_request_for_post_tokens(
      *,
      account : Stripe::ConnectJsAccountTokenSpecs? = nil,
      bank_account : Stripe::TokenCreateBankAccount? = nil,
      card : Stripe::PostTokensRequestCard? = nil,
      customer : String? = nil,
      cvc_update : Stripe::CvcParams? = nil,
      expand : Array(String)? = nil,
      person : Stripe::PersonTokenSpecs? = nil,
      pii : Stripe::PiiTokenSpecs? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TokensApi.post_tokens ..." }
      end

      if client_side_validation?
        unless (_account = account).nil?
          _account.validate if _account.is_a?(OpenApi::Validatable)
        end
        unless (_bank_account = bank_account).nil?
          _bank_account.validate if _bank_account.is_a?(OpenApi::Validatable)
        end
        unless (_card = card).nil?
          _card.validate if _card.is_a?(OpenApi::Validatable)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_TOKENS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_cvc_update = cvc_update).nil?
          _cvc_update.validate if _cvc_update.is_a?(OpenApi::Validatable)
        end

        unless (_person = person).nil?
          _person.validate if _person.is_a?(OpenApi::Validatable)
        end
        unless (_pii = pii).nil?
          _pii.validate if _pii.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tokens"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(account.to_json), "account")) if !account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bank_account.to_json), "bank_account")) if !bank_account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(card.to_json), "card")) if !card.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cvc_update.to_json), "cvc_update")) if !cvc_update.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(person.to_json), "person")) if !person.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(pii.to_json), "pii")) if !pii.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TokensApi.post_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
