#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/components"
require "../models/customer_session"
require "../models/error"

module Stripe
  class CustomerSessionsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
    # @required @param components [Stripe::Components?]
    # @required @param customer [String?] The ID of an existing customer for which to create the Customer Session.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CustomerSession]
    def post_customer_sessions(
      *,
      components : Stripe::Components? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::CustomerSession
      data, _status_code, _headers = post_customer_sessions_with_http_info(components: components, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.&lt;/p&gt;
    # @required @param components [Stripe::Components?]
    # @required @param customer [String?] The ID of an existing customer for which to create the Customer Session.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CustomerSession, Integer, Hash)] Stripe::CustomerSession, response status code and response headers
    def post_customer_sessions_with_http_info(
      *,
      components : Stripe::Components? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::CustomerSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_customer_sessions(components: components, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CustomerSessionsApi#post_customer_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CustomerSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.&lt;/p&gt;
    # @required @param components [Stripe::Components?]
    # @required @param customer [String?] The ID of an existing customer for which to create the Customer Session.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_customer_sessions(
      *,
      components : Stripe::Components? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_customer_sessions(components: components, customer: customer, expand: expand).execute(&block)
    end

    POST_CUSTOMER_SESSIONS_MAX_LENGTH_FOR_CUSTOMER = 5000

    # @return Crest::Request
    def build_api_request_for_post_customer_sessions(
      *,
      components : Stripe::Components? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CustomerSessionsApi.post_customer_sessions ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"components\" is required and cannot be null") if components.nil?
        unless (_components = components).nil?
          _components.validate if _components.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"customer\" is required and cannot be null") if customer.nil?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_CUSTOMER_SESSIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/customer_sessions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(components.to_json), "components")) if !components.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CustomerSessionsApi.post_customer_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
