#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class ProductsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
    # @required @param id [String?]
    # @return [Stripe::DeletedProduct]
    def delete_products_id(
      *,
      id : String? = nil
    ) : Stripe::DeletedProduct
      data, _status_code, _headers = delete_products_id_with_http_info(id: id)
      data
    end

    # &lt;p&gt;Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with &lt;code&gt;type&#x3D;good&lt;/code&gt; is only possible if it has no SKUs associated with it.&lt;/p&gt;
    # @required @param id [String?]
    # @return [Tuple(Stripe::DeletedProduct, Integer, Hash)] Stripe::DeletedProduct, response status code and response headers
    def delete_products_id_with_http_info(
      *,
      id : String? = nil
    ) : Tuple(Stripe::DeletedProduct, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_products_id(id: id)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ProductsApi#delete_products_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedProduct.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with &lt;code&gt;type&#x3D;good&lt;/code&gt; is only possible if it has no SKUs associated with it.&lt;/p&gt;
    # @required @param id [String?]
    # @return nil
    def delete_products_id(
      *,
      id : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_products_id(id: id).execute(&block)
    end

    DELETE_PRODUCTS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_delete_products_id(
      *,
      id : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ProductsApi.delete_products_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, DELETE_PRODUCTS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/products/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "ProductsApi.delete_products_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return products that are active or inactive (e.g., pass `false` to list all inactive products).
    # @optional @param shippable [Bool?] Only return products that can be shipped (i.e., physical, not digital products).
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return products that were created during the given date interval.
    # @optional @param ids [Array(Array(String))?] Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before).
    # @optional @param url [String?] Only return products with the given url.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ProductList]
    def get_products(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      shippable : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      ids : Array(Array(String))? = nil,
      url : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ProductList
      data, _status_code, _headers = get_products_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, shippable: shippable, created: created, ids: ids, url: url, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return products that are active or inactive (e.g., pass `false` to list all inactive products).
    # @optional @param shippable [Bool?] Only return products that can be shipped (i.e., physical, not digital products).
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return products that were created during the given date interval.
    # @optional @param ids [Array(Array(String))?] Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before).
    # @optional @param url [String?] Only return products with the given url.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ProductList, Integer, Hash)] Stripe::ProductList, response status code and response headers
    def get_products_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      shippable : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      ids : Array(Array(String))? = nil,
      url : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ProductList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_products(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, shippable: shippable, created: created, ids: ids, url: url, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ProductsApi#get_products\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ProductList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return products that are active or inactive (e.g., pass `false` to list all inactive products).
    # @optional @param shippable [Bool?] Only return products that can be shipped (i.e., physical, not digital products).
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return products that were created during the given date interval.
    # @optional @param ids [Array(Array(String))?] Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before).
    # @optional @param url [String?] Only return products with the given url.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_products(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      shippable : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      ids : Array(Array(String))? = nil,
      url : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_products(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, shippable: shippable, created: created, ids: ids, url: url, expand: expand).execute(&block)
    end

    GET_PRODUCTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PRODUCTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_PRODUCTS_MAX_LENGTH_FOR_URL            = 5000

    # @return Crest::Request
    def build_api_request_for_get_products(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      shippable : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      ids : Array(Array(String))? = nil,
      url : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ProductsApi.get_products ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PRODUCTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PRODUCTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_url = url).nil?
          OpenApi::PrimitiveValidator.validate_max_length("url", url.to_s.size, GET_PRODUCTS_MAX_LENGTH_FOR_URL)
        end
      end

      # resource path
      local_var_path = "/v1/products"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["shippable"] = shippable.to_s if !shippable.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ids"] = @api_client.build_collection_param(ids, "csv") if !ids.nil? && !ids.empty?
      query_params["url"] = url.to_s if !url.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProductsApi.get_products",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Product]
    def get_products_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Product
      data, _status_code, _headers = get_products_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Product, Integer, Hash)] Stripe::Product, response status code and response headers
    def get_products_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Product, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_products_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ProductsApi#get_products_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Product.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_products_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_products_id(id: id, expand: expand).execute(&block)
    end

    GET_PRODUCTS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_products_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ProductsApi.get_products_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_PRODUCTS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/products/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProductsApi.get_products_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for products you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_products_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_products_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for products you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_products_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_products_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ProductsApi#get_products_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for products you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_products_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_products_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_PRODUCTS_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_PRODUCTS_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_products_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ProductsApi.get_products_search ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_PRODUCTS_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_PRODUCTS_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/products/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProductsApi.get_products_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new product object.</p>
    # @required @param name [String?] The product's name, meant to be displayable to the customer.
    # @optional @param active [Bool?] Whether the product is currently available for purchase. Defaults to `true`.
    # @optional @param default_price_data [Stripe::PriceDataWithoutProduct?]
    # @optional @param description [String?] The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param id [String?] An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
    # @optional @param images [Array(String)?] A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PackageDimensionsSpecs?]
    # @optional @param shippable [Bool?] Whether this product is shipped (i.e., physical goods).
    # @optional @param statement_descriptor [String?] An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter.
    # @optional @param tax_code [String?] A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
    # @optional @param unit_label [String?] A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
    # @optional @param url [String?] A URL of a publicly-accessible webpage for this product.
    # @return [Stripe::Product]
    def post_products(
      *,
      name : String? = nil,
      active : Bool? = nil,
      default_price_data : Stripe::PriceDataWithoutProduct? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      images : Array(String)? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : String? = nil,
      unit_label : String? = nil,
      url : String? = nil
    ) : Stripe::Product
      data, _status_code, _headers = post_products_with_http_info(name: name, active: active, default_price_data: default_price_data, description: description, expand: expand, id: id, images: images, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)
      data
    end

    # &lt;p&gt;Creates a new product object.&lt;/p&gt;
    # @required @param name [String?] The product's name, meant to be displayable to the customer.
    # @optional @param active [Bool?] Whether the product is currently available for purchase. Defaults to `true`.
    # @optional @param default_price_data [Stripe::PriceDataWithoutProduct?]
    # @optional @param description [String?] The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param id [String?] An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
    # @optional @param images [Array(String)?] A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PackageDimensionsSpecs?]
    # @optional @param shippable [Bool?] Whether this product is shipped (i.e., physical goods).
    # @optional @param statement_descriptor [String?] An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter.
    # @optional @param tax_code [String?] A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
    # @optional @param unit_label [String?] A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
    # @optional @param url [String?] A URL of a publicly-accessible webpage for this product.
    # @return [Tuple(Stripe::Product, Integer, Hash)] Stripe::Product, response status code and response headers
    def post_products_with_http_info(
      *,
      name : String? = nil,
      active : Bool? = nil,
      default_price_data : Stripe::PriceDataWithoutProduct? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      images : Array(String)? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : String? = nil,
      unit_label : String? = nil,
      url : String? = nil
    ) : Tuple(Stripe::Product, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_products(name: name, active: active, default_price_data: default_price_data, description: description, expand: expand, id: id, images: images, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ProductsApi#post_products\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Product.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new product object.&lt;/p&gt;
    # @required @param name [String?] The product's name, meant to be displayable to the customer.
    # @optional @param active [Bool?] Whether the product is currently available for purchase. Defaults to `true`.
    # @optional @param default_price_data [Stripe::PriceDataWithoutProduct?]
    # @optional @param description [String?] The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param id [String?] An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
    # @optional @param images [Array(String)?] A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PackageDimensionsSpecs?]
    # @optional @param shippable [Bool?] Whether this product is shipped (i.e., physical goods).
    # @optional @param statement_descriptor [String?] An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter.
    # @optional @param tax_code [String?] A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
    # @optional @param unit_label [String?] A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
    # @optional @param url [String?] A URL of a publicly-accessible webpage for this product.
    # @return nil
    def post_products(
      *,
      name : String? = nil,
      active : Bool? = nil,
      default_price_data : Stripe::PriceDataWithoutProduct? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      images : Array(String)? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : String? = nil,
      unit_label : String? = nil,
      url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_products(name: name, active: active, default_price_data: default_price_data, description: description, expand: expand, id: id, images: images, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url).execute(&block)
    end

    POST_PRODUCTS_MAX_LENGTH_FOR_NAME                 =  5000
    POST_PRODUCTS_MAX_LENGTH_FOR_DESCRIPTION          = 40000
    POST_PRODUCTS_MAX_LENGTH_FOR_ID                   =  5000
    POST_PRODUCTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR =    22
    POST_PRODUCTS_MAX_LENGTH_FOR_UNIT_LABEL           =    12
    POST_PRODUCTS_MAX_LENGTH_FOR_URL                  =  5000

    # @return Crest::Request
    def build_api_request_for_post_products(
      *,
      name : String? = nil,
      active : Bool? = nil,
      default_price_data : Stripe::PriceDataWithoutProduct? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      id : String? = nil,
      images : Array(String)? = nil,
      package_dimensions : Stripe::PackageDimensionsSpecs? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : String? = nil,
      unit_label : String? = nil,
      url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ProductsApi.post_products ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"name\" is required and cannot be null") if name.nil?
        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_PRODUCTS_MAX_LENGTH_FOR_NAME)
        end

        unless (_default_price_data = default_price_data).nil?
          _default_price_data.validate if _default_price_data.is_a?(OpenApi::Validatable)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_PRODUCTS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_PRODUCTS_MAX_LENGTH_FOR_ID)
        end

        unless (_package_dimensions = package_dimensions).nil?
          _package_dimensions.validate if _package_dimensions.is_a?(OpenApi::Validatable)
        end

        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_PRODUCTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end

        unless (_unit_label = unit_label).nil?
          OpenApi::PrimitiveValidator.validate_max_length("unit_label", unit_label.to_s.size, POST_PRODUCTS_MAX_LENGTH_FOR_UNIT_LABEL)
        end
        unless (_url = url).nil?
          OpenApi::PrimitiveValidator.validate_max_length("url", url.to_s.size, POST_PRODUCTS_MAX_LENGTH_FOR_URL)
        end
      end

      # resource path
      local_var_path = "/v1/products"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["default_price_data"] = default_price_data.to_s if !default_price_data.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["id"] = id.to_s if !id.nil?
      form_params["images"] = @api_client.build_collection_param(images, "csv") if !images.nil? && !images.empty?
      form_params["name"] = name.to_s if !name.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["shippable"] = shippable.to_s if !shippable.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["tax_code"] = tax_code.to_s if !tax_code.nil?
      form_params["unit_label"] = unit_label.to_s if !unit_label.nil?
      form_params["url"] = url.to_s if !url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ProductsApi.post_products",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param id [String?]
    # @optional @param active [Bool?] Whether the product is available for purchase.
    # @optional @param default_price [String?] The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
    # @optional @param description [String?] The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param images [Stripe::PostProductsIdRequestImages?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param name [String?] The product's name, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PostProductsIdRequestPackageDimensions?]
    # @optional @param shippable [Bool?] Whether this product is shipped (i.e., physical goods).
    # @optional @param statement_descriptor [String?] An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter. May only be set if `type=service`.
    # @optional @param tax_code [Stripe::PostProductsIdRequestTaxCode?]
    # @optional @param unit_label [String?] A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`.
    # @optional @param url [Stripe::PostProductsIdRequestUrl?]
    # @return [Stripe::Product]
    def post_products_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      default_price : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      images : Stripe::PostProductsIdRequestImages? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      name : String? = nil,
      package_dimensions : Stripe::PostProductsIdRequestPackageDimensions? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : Stripe::PostProductsIdRequestTaxCode? = nil,
      unit_label : String? = nil,
      url : Stripe::PostProductsIdRequestUrl? = nil
    ) : Stripe::Product
      data, _status_code, _headers = post_products_id_with_http_info(id: id, active: active, default_price: default_price, description: description, expand: expand, images: images, metadata: metadata, name: name, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)
      data
    end

    # &lt;p&gt;Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active [Bool?] Whether the product is available for purchase.
    # @optional @param default_price [String?] The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
    # @optional @param description [String?] The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param images [Stripe::PostProductsIdRequestImages?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param name [String?] The product's name, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PostProductsIdRequestPackageDimensions?]
    # @optional @param shippable [Bool?] Whether this product is shipped (i.e., physical goods).
    # @optional @param statement_descriptor [String?] An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter. May only be set if `type=service`.
    # @optional @param tax_code [Stripe::PostProductsIdRequestTaxCode?]
    # @optional @param unit_label [String?] A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`.
    # @optional @param url [Stripe::PostProductsIdRequestUrl?]
    # @return [Tuple(Stripe::Product, Integer, Hash)] Stripe::Product, response status code and response headers
    def post_products_id_with_http_info(
      *,
      id : String? = nil,
      active : Bool? = nil,
      default_price : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      images : Stripe::PostProductsIdRequestImages? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      name : String? = nil,
      package_dimensions : Stripe::PostProductsIdRequestPackageDimensions? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : Stripe::PostProductsIdRequestTaxCode? = nil,
      unit_label : String? = nil,
      url : Stripe::PostProductsIdRequestUrl? = nil
    ) : Tuple(Stripe::Product, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_products_id(id: id, active: active, default_price: default_price, description: description, expand: expand, images: images, metadata: metadata, name: name, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ProductsApi#post_products_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Product.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active [Bool?] Whether the product is available for purchase.
    # @optional @param default_price [String?] The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
    # @optional @param description [String?] The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param images [Stripe::PostProductsIdRequestImages?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param name [String?] The product's name, meant to be displayable to the customer.
    # @optional @param package_dimensions [Stripe::PostProductsIdRequestPackageDimensions?]
    # @optional @param shippable [Bool?] Whether this product is shipped (i.e., physical goods).
    # @optional @param statement_descriptor [String?] An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter. May only be set if `type=service`.
    # @optional @param tax_code [Stripe::PostProductsIdRequestTaxCode?]
    # @optional @param unit_label [String?] A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`.
    # @optional @param url [Stripe::PostProductsIdRequestUrl?]
    # @return nil
    def post_products_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      default_price : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      images : Stripe::PostProductsIdRequestImages? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      name : String? = nil,
      package_dimensions : Stripe::PostProductsIdRequestPackageDimensions? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : Stripe::PostProductsIdRequestTaxCode? = nil,
      unit_label : String? = nil,
      url : Stripe::PostProductsIdRequestUrl? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_products_id(id: id, active: active, default_price: default_price, description: description, expand: expand, images: images, metadata: metadata, name: name, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url).execute(&block)
    end

    POST_PRODUCTS_ID_MAX_LENGTH_FOR_ID                   =  5000
    POST_PRODUCTS_ID_MAX_LENGTH_FOR_DEFAULT_PRICE        =  5000
    POST_PRODUCTS_ID_MAX_LENGTH_FOR_DESCRIPTION          = 40000
    POST_PRODUCTS_ID_MAX_LENGTH_FOR_NAME                 =  5000
    POST_PRODUCTS_ID_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR =    22
    POST_PRODUCTS_ID_MAX_LENGTH_FOR_UNIT_LABEL           =    12

    # @return Crest::Request
    def build_api_request_for_post_products_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      default_price : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      images : Stripe::PostProductsIdRequestImages? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      name : String? = nil,
      package_dimensions : Stripe::PostProductsIdRequestPackageDimensions? = nil,
      shippable : Bool? = nil,
      statement_descriptor : String? = nil,
      tax_code : Stripe::PostProductsIdRequestTaxCode? = nil,
      unit_label : String? = nil,
      url : Stripe::PostProductsIdRequestUrl? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ProductsApi.post_products_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_PRODUCTS_ID_MAX_LENGTH_FOR_ID)
        end

        unless (_default_price = default_price).nil?
          OpenApi::PrimitiveValidator.validate_max_length("default_price", default_price.to_s.size, POST_PRODUCTS_ID_MAX_LENGTH_FOR_DEFAULT_PRICE)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_PRODUCTS_ID_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_images = images).nil?
          _images.validate if _images.is_a?(OpenApi::Validatable)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_PRODUCTS_ID_MAX_LENGTH_FOR_NAME)
        end
        unless (_package_dimensions = package_dimensions).nil?
          _package_dimensions.validate if _package_dimensions.is_a?(OpenApi::Validatable)
        end

        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_PRODUCTS_ID_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_tax_code = tax_code).nil?
          _tax_code.validate if _tax_code.is_a?(OpenApi::Validatable)
        end
        unless (_unit_label = unit_label).nil?
          OpenApi::PrimitiveValidator.validate_max_length("unit_label", unit_label.to_s.size, POST_PRODUCTS_ID_MAX_LENGTH_FOR_UNIT_LABEL)
        end
        unless (_url = url).nil?
          _url.validate if _url.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/products/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["default_price"] = default_price.to_s if !default_price.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["images"] = images.to_s if !images.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["shippable"] = shippable.to_s if !shippable.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["tax_code"] = tax_code.to_s if !tax_code.nil?
      form_params["unit_label"] = unit_label.to_s if !unit_label.nil?
      form_params["url"] = url.to_s if !url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ProductsApi.post_products_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
