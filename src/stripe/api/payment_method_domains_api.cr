#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/error"

require "../models/payment_method_domain"
require "../models/payment_method_domain_resource_payment_method_domain_list"

module Stripe
  class PaymentMethodDomainsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Lists the details of existing payment method domains.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param domain_name [String?] The domain name that this payment method domain object represents.
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements
    # @return [Stripe::PaymentMethodDomainResourcePaymentMethodDomainList]
    def get_payment_method_domains(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      domain_name : String? = nil,
      enabled : Bool? = nil
    ) : Stripe::PaymentMethodDomainResourcePaymentMethodDomainList
      data, _status_code, _headers = get_payment_method_domains_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, domain_name: domain_name, enabled: enabled)
      data
    end

    # &lt;p&gt;Lists the details of existing payment method domains.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param domain_name [String?] The domain name that this payment method domain object represents.
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements
    # @return [Tuple(Stripe::PaymentMethodDomainResourcePaymentMethodDomainList, Integer, Hash)] Stripe::PaymentMethodDomainResourcePaymentMethodDomainList, response status code and response headers
    def get_payment_method_domains_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      domain_name : String? = nil,
      enabled : Bool? = nil
    ) : Tuple(Stripe::PaymentMethodDomainResourcePaymentMethodDomainList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_method_domains(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, domain_name: domain_name, enabled: enabled)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodDomainsApi#get_payment_method_domains\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodDomainResourcePaymentMethodDomainList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Lists the details of existing payment method domains.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param domain_name [String?] The domain name that this payment method domain object represents.
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements
    # @return nil
    def get_payment_method_domains(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      domain_name : String? = nil,
      enabled : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_method_domains(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, domain_name: domain_name, enabled: enabled).execute(&block)
    end

    GET_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_DOMAIN_NAME    = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_method_domains(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      domain_name : String? = nil,
      enabled : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodDomainsApi.get_payment_method_domains ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_domain_name = domain_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_name", domain_name.to_s.size, GET_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_DOMAIN_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_domains"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["domain_name"] = domain_name.to_s if !domain_name.nil?
      query_params["enabled"] = enabled.to_s if !enabled.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodDomainsApi.get_payment_method_domains",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing payment method domain.</p>
    # @required @param payment_method_domain [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethodDomain]
    def get_payment_method_domains_payment_method_domain(
      *,
      payment_method_domain : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentMethodDomain
      data, _status_code, _headers = get_payment_method_domains_payment_method_domain_with_http_info(payment_method_domain: payment_method_domain, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing payment method domain.&lt;/p&gt;
    # @required @param payment_method_domain [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethodDomain, Integer, Hash)] Stripe::PaymentMethodDomain, response status code and response headers
    def get_payment_method_domains_payment_method_domain_with_http_info(
      *,
      payment_method_domain : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentMethodDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_method_domains_payment_method_domain(payment_method_domain: payment_method_domain, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodDomainsApi#get_payment_method_domains_payment_method_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodDomain.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing payment method domain.&lt;/p&gt;
    # @required @param payment_method_domain [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_method_domains_payment_method_domain(
      *,
      payment_method_domain : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_method_domains_payment_method_domain(payment_method_domain: payment_method_domain, expand: expand).execute(&block)
    end

    GET_PAYMENT_METHOD_DOMAINS_PAYMENT_METHOD_DOMAIN_MAX_LENGTH_FOR_PAYMENT_METHOD_DOMAIN = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_method_domains_payment_method_domain(
      *,
      payment_method_domain : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodDomainsApi.get_payment_method_domains_payment_method_domain ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method_domain\" is required and cannot be null") if payment_method_domain.nil?
        unless (_payment_method_domain = payment_method_domain).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method_domain", payment_method_domain.to_s.size, GET_PAYMENT_METHOD_DOMAINS_PAYMENT_METHOD_DOMAIN_MAX_LENGTH_FOR_PAYMENT_METHOD_DOMAIN)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_domains/{payment_method_domain}".sub("{" + "payment_method_domain" + "}", URI.encode_path(payment_method_domain.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodDomainsApi.get_payment_method_domains_payment_method_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a payment method domain.</p>
    # @required @param domain_name [String?] The domain name that this payment method domain object represents.
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethodDomain]
    def post_payment_method_domains(
      *,
      domain_name : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentMethodDomain
      data, _status_code, _headers = post_payment_method_domains_with_http_info(domain_name: domain_name, enabled: enabled, expand: expand)
      data
    end

    # &lt;p&gt;Creates a payment method domain.&lt;/p&gt;
    # @required @param domain_name [String?] The domain name that this payment method domain object represents.
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethodDomain, Integer, Hash)] Stripe::PaymentMethodDomain, response status code and response headers
    def post_payment_method_domains_with_http_info(
      *,
      domain_name : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentMethodDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_method_domains(domain_name: domain_name, enabled: enabled, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodDomainsApi#post_payment_method_domains\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodDomain.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a payment method domain.&lt;/p&gt;
    # @required @param domain_name [String?] The domain name that this payment method domain object represents.
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_method_domains(
      *,
      domain_name : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_method_domains(domain_name: domain_name, enabled: enabled, expand: expand).execute(&block)
    end

    POST_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_DOMAIN_NAME = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_method_domains(
      *,
      domain_name : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodDomainsApi.post_payment_method_domains ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"domain_name\" is required and cannot be null") if domain_name.nil?
        unless (_domain_name = domain_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_name", domain_name.to_s.size, POST_PAYMENT_METHOD_DOMAINS_MAX_LENGTH_FOR_DOMAIN_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_domains"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("domain_name", domain_name.to_s) if !domain_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("enabled", enabled.to_s) if !enabled.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodDomainsApi.post_payment_method_domains",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing payment method domain.</p>
    # @required @param payment_method_domain [String?]
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethodDomain]
    def post_payment_method_domains_payment_method_domain(
      *,
      payment_method_domain : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentMethodDomain
      data, _status_code, _headers = post_payment_method_domains_payment_method_domain_with_http_info(payment_method_domain: payment_method_domain, enabled: enabled, expand: expand)
      data
    end

    # &lt;p&gt;Updates an existing payment method domain.&lt;/p&gt;
    # @required @param payment_method_domain [String?]
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethodDomain, Integer, Hash)] Stripe::PaymentMethodDomain, response status code and response headers
    def post_payment_method_domains_payment_method_domain_with_http_info(
      *,
      payment_method_domain : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentMethodDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_method_domains_payment_method_domain(payment_method_domain: payment_method_domain, enabled: enabled, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodDomainsApi#post_payment_method_domains_payment_method_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodDomain.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing payment method domain.&lt;/p&gt;
    # @required @param payment_method_domain [String?]
    # @optional @param enabled [Bool?] Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_method_domains_payment_method_domain(
      *,
      payment_method_domain : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_method_domains_payment_method_domain(payment_method_domain: payment_method_domain, enabled: enabled, expand: expand).execute(&block)
    end

    POST_PAYMENT_METHOD_DOMAINS_PAYMENT_METHOD_DOMAIN_MAX_LENGTH_FOR_PAYMENT_METHOD_DOMAIN = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_method_domains_payment_method_domain(
      *,
      payment_method_domain : String? = nil,
      enabled : Bool? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodDomainsApi.post_payment_method_domains_payment_method_domain ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method_domain\" is required and cannot be null") if payment_method_domain.nil?
        unless (_payment_method_domain = payment_method_domain).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method_domain", payment_method_domain.to_s.size, POST_PAYMENT_METHOD_DOMAINS_PAYMENT_METHOD_DOMAIN_MAX_LENGTH_FOR_PAYMENT_METHOD_DOMAIN)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_domains/{payment_method_domain}".sub("{" + "payment_method_domain" + "}", URI.encode_path(payment_method_domain.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("enabled", enabled.to_s) if !enabled.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodDomainsApi.post_payment_method_domains_payment_method_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain. The payment method doesn’t appear in Elements for this domain until it is active.</p>  <p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>  <p>Related guides: <a href=\"/docs/payments/payment-methods/pmd-registration\">Payment method domains</a>.</p>
    # @required @param payment_method_domain [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethodDomain]
    def post_payment_method_domains_payment_method_domain_validate(
      *,
      payment_method_domain : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentMethodDomain
      data, _status_code, _headers = post_payment_method_domains_payment_method_domain_validate_with_http_info(payment_method_domain: payment_method_domain, expand: expand)
      data
    end

    # &lt;p&gt;Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain. The payment method doesn’t appear in Elements for this domain until it is active.&lt;/p&gt;  &lt;p&gt;To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.&lt;/p&gt;  &lt;p&gt;Related guides: &lt;a href&#x3D;\&quot;/docs/payments/payment-methods/pmd-registration\&quot;&gt;Payment method domains&lt;/a&gt;.&lt;/p&gt;
    # @required @param payment_method_domain [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethodDomain, Integer, Hash)] Stripe::PaymentMethodDomain, response status code and response headers
    def post_payment_method_domains_payment_method_domain_validate_with_http_info(
      *,
      payment_method_domain : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentMethodDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_method_domains_payment_method_domain_validate(payment_method_domain: payment_method_domain, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodDomainsApi#post_payment_method_domains_payment_method_domain_validate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodDomain.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain. The payment method doesn’t appear in Elements for this domain until it is active.&lt;/p&gt;  &lt;p&gt;To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.&lt;/p&gt;  &lt;p&gt;Related guides: &lt;a href&#x3D;\&quot;/docs/payments/payment-methods/pmd-registration\&quot;&gt;Payment method domains&lt;/a&gt;.&lt;/p&gt;
    # @required @param payment_method_domain [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_method_domains_payment_method_domain_validate(
      *,
      payment_method_domain : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_method_domains_payment_method_domain_validate(payment_method_domain: payment_method_domain, expand: expand).execute(&block)
    end

    POST_PAYMENT_METHOD_DOMAINS_PAYMENT_METHOD_DOMAIN_VALIDATE_MAX_LENGTH_FOR_PAYMENT_METHOD_DOMAIN = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_method_domains_payment_method_domain_validate(
      *,
      payment_method_domain : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodDomainsApi.post_payment_method_domains_payment_method_domain_validate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method_domain\" is required and cannot be null") if payment_method_domain.nil?
        unless (_payment_method_domain = payment_method_domain).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method_domain", payment_method_domain.to_s.size, POST_PAYMENT_METHOD_DOMAINS_PAYMENT_METHOD_DOMAIN_VALIDATE_MAX_LENGTH_FOR_PAYMENT_METHOD_DOMAIN)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_domains/{payment_method_domain}/validate".sub("{" + "payment_method_domain" + "}", URI.encode_path(payment_method_domain.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodDomainsApi.post_payment_method_domains_payment_method_domain_validate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
