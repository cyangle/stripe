#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class FileLinksApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of file links.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expired [Bool?] Filter links by their expiration status. By default, all links are returned.
    # @optional @param file [String?] Only return links for the given file.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::FileFileLinkList]
    def get_file_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expired : Bool? = nil,
      file : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::FileFileLinkList
      data, _status_code, _headers = get_file_links_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expired: expired, file: file, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of file links.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expired [Bool?] Filter links by their expiration status. By default, all links are returned.
    # @optional @param file [String?] Only return links for the given file.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::FileFileLinkList, Integer, Hash)] Stripe::FileFileLinkList, response status code and response headers
    def get_file_links_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expired : Bool? = nil,
      file : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::FileFileLinkList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_file_links(ending_before: ending_before, starting_after: starting_after, limit: limit, expired: expired, file: file, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FileLinksApi#get_file_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FileFileLinkList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of file links.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expired [Bool?] Filter links by their expiration status. By default, all links are returned.
    # @optional @param file [String?] Only return links for the given file.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_file_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expired : Bool? = nil,
      file : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_file_links(ending_before: ending_before, starting_after: starting_after, limit: limit, expired: expired, file: file, expand: expand, created: created).execute(&block)
    end

    GET_FILE_LINKS_MAX_LENGTH_FOR_FILE = 5000

    # @return Crest::Request
    def build_api_request_for_get_file_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expired : Bool? = nil,
      file : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FileLinksApi.get_file_links ..." }
      end

      if client_side_validation
        unless (_file = file).nil?
          OpenApi::PrimitiveValidator.validate_max_length("file", file.to_s.size, GET_FILE_LINKS_MAX_LENGTH_FOR_FILE)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/file_links"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expired"] = expired.to_s if !expired.nil?
      query_params["file"] = file.to_s if !file.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FileLinksApi.get_file_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the file link with the given ID.</p>
    # @required @param link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::FileLink]
    def get_file_links_link(
      *,
      link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::FileLink
      data, _status_code, _headers = get_file_links_link_with_http_info(link: link, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the file link with the given ID.&lt;/p&gt;
    # @required @param link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::FileLink, Integer, Hash)] Stripe::FileLink, response status code and response headers
    def get_file_links_link_with_http_info(
      *,
      link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::FileLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_file_links_link(link: link, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FileLinksApi#get_file_links_link\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FileLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the file link with the given ID.&lt;/p&gt;
    # @required @param link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_file_links_link(
      *,
      link : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_file_links_link(link: link, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_file_links_link(
      *,
      link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FileLinksApi.get_file_links_link ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"link\" is required and cannot be null") if link.nil?
      end

      # resource path
      local_var_path = "/v1/file_links/{link}".sub("{" + "link" + "}", URI.encode_path(link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FileLinksApi.get_file_links_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new file link object.</p>
    # @required @param post_file_links_request [Stripe::PostFileLinksRequest?]
    # @return [Stripe::FileLink]
    def post_file_links(
      *,
      post_file_links_request : Stripe::PostFileLinksRequest? = nil
    ) : Stripe::FileLink
      data, _status_code, _headers = post_file_links_with_http_info(post_file_links_request: post_file_links_request)
      data
    end

    # &lt;p&gt;Creates a new file link object.&lt;/p&gt;
    # @required @param post_file_links_request [Stripe::PostFileLinksRequest?]
    # @return [Tuple(Stripe::FileLink, Integer, Hash)] Stripe::FileLink, response status code and response headers
    def post_file_links_with_http_info(
      *,
      post_file_links_request : Stripe::PostFileLinksRequest? = nil
    ) : Tuple(Stripe::FileLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_file_links(post_file_links_request: post_file_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FileLinksApi#post_file_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FileLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new file link object.&lt;/p&gt;
    # @required @param post_file_links_request [Stripe::PostFileLinksRequest?]
    # @return nil
    def post_file_links(
      *,
      post_file_links_request : Stripe::PostFileLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_file_links(post_file_links_request: post_file_links_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_file_links(
      *,
      post_file_links_request : Stripe::PostFileLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FileLinksApi.post_file_links ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_file_links_request\" is required and cannot be null") if post_file_links_request.nil?
        unless (_post_file_links_request = post_file_links_request).nil?
          _post_file_links_request.validate if _post_file_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/file_links"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_file_links_request, content_type: header_params["Content-Type"]?) if !post_file_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FileLinksApi.post_file_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing file link object. Expired links can no longer be updated.</p>
    # @required @param link [String?]
    # @optional @param post_file_links_link_request [Stripe::PostFileLinksLinkRequest?]
    # @return [Stripe::FileLink]
    def post_file_links_link(
      *,
      link : String? = nil,
      post_file_links_link_request : Stripe::PostFileLinksLinkRequest? = nil
    ) : Stripe::FileLink
      data, _status_code, _headers = post_file_links_link_with_http_info(link: link, post_file_links_link_request: post_file_links_link_request)
      data
    end

    # &lt;p&gt;Updates an existing file link object. Expired links can no longer be updated.&lt;/p&gt;
    # @required @param link [String?]
    # @optional @param post_file_links_link_request [Stripe::PostFileLinksLinkRequest?]
    # @return [Tuple(Stripe::FileLink, Integer, Hash)] Stripe::FileLink, response status code and response headers
    def post_file_links_link_with_http_info(
      *,
      link : String? = nil,
      post_file_links_link_request : Stripe::PostFileLinksLinkRequest? = nil
    ) : Tuple(Stripe::FileLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_file_links_link(link: link, post_file_links_link_request: post_file_links_link_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FileLinksApi#post_file_links_link\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FileLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing file link object. Expired links can no longer be updated.&lt;/p&gt;
    # @required @param link [String?]
    # @optional @param post_file_links_link_request [Stripe::PostFileLinksLinkRequest?]
    # @return nil
    def post_file_links_link(
      *,
      link : String? = nil,
      post_file_links_link_request : Stripe::PostFileLinksLinkRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_file_links_link(link: link, post_file_links_link_request: post_file_links_link_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_file_links_link(
      *,
      link : String? = nil,
      post_file_links_link_request : Stripe::PostFileLinksLinkRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FileLinksApi.post_file_links_link ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"link\" is required and cannot be null") if link.nil?

        unless (_post_file_links_link_request = post_file_links_link_request).nil?
          _post_file_links_link_request.validate if _post_file_links_link_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/file_links/{link}".sub("{" + "link" + "}", URI.encode_path(link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_file_links_link_request, content_type: header_params["Content-Type"]?) if !post_file_links_link_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FileLinksApi.post_file_links_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
