#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/entitlements_active_entitlement"
require "../models/entitlements_feature"
require "../models/entitlements_resource_customer_entitlement_list"
require "../models/entitlements_resource_feature_list"
require "../models/error"

require "../models/post_entitlements_features_id_request_metadata"

module Stripe
  class EntitlementsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieve a list of active entitlements for a customer</p>
    # @required @param customer [String?] The ID of the customer.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::EntitlementsResourceCustomerEntitlementList]
    def get_entitlements_active_entitlements(
      *,
      customer : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::EntitlementsResourceCustomerEntitlementList
      data, _status_code, _headers = get_entitlements_active_entitlements_with_http_info(customer: customer, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a list of active entitlements for a customer&lt;/p&gt;
    # @required @param customer [String?] The ID of the customer.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::EntitlementsResourceCustomerEntitlementList, Integer, Hash)] Stripe::EntitlementsResourceCustomerEntitlementList, response status code and response headers
    def get_entitlements_active_entitlements_with_http_info(
      *,
      customer : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::EntitlementsResourceCustomerEntitlementList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_entitlements_active_entitlements(customer: customer, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: EntitlementsApi#get_entitlements_active_entitlements\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::EntitlementsResourceCustomerEntitlementList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve a list of active entitlements for a customer&lt;/p&gt;
    # @required @param customer [String?] The ID of the customer.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_entitlements_active_entitlements(
      *,
      customer : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_entitlements_active_entitlements(customer: customer, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_MAX_LENGTH_FOR_CUSTOMER       = 5000
    GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_entitlements_active_entitlements(
      *,
      customer : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: EntitlementsApi.get_entitlements_active_entitlements ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"customer\" is required and cannot be null") if customer.nil?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/entitlements/active_entitlements"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["customer"] = customer.to_s if !customer.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "EntitlementsApi.get_entitlements_active_entitlements",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve an active entitlement</p>
    # @required @param id [String?] The ID of the entitlement.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::EntitlementsActiveEntitlement]
    def get_entitlements_active_entitlements_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::EntitlementsActiveEntitlement
      data, _status_code, _headers = get_entitlements_active_entitlements_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve an active entitlement&lt;/p&gt;
    # @required @param id [String?] The ID of the entitlement.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::EntitlementsActiveEntitlement, Integer, Hash)] Stripe::EntitlementsActiveEntitlement, response status code and response headers
    def get_entitlements_active_entitlements_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::EntitlementsActiveEntitlement, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_entitlements_active_entitlements_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: EntitlementsApi#get_entitlements_active_entitlements_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::EntitlementsActiveEntitlement.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve an active entitlement&lt;/p&gt;
    # @required @param id [String?] The ID of the entitlement.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_entitlements_active_entitlements_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_entitlements_active_entitlements_id(id: id, expand: expand).execute(&block)
    end

    GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_entitlements_active_entitlements_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: EntitlementsApi.get_entitlements_active_entitlements_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_ENTITLEMENTS_ACTIVE_ENTITLEMENTS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/entitlements/active_entitlements/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "EntitlementsApi.get_entitlements_active_entitlements_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a list of features</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param archived [Bool?] If set, filter results to only include features with the given archive status.
    # @optional @param lookup_key [String?] If set, filter results to only include features with the given lookup_key.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::EntitlementsResourceFeatureList]
    def get_entitlements_features(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      archived : Bool? = nil,
      lookup_key : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::EntitlementsResourceFeatureList
      data, _status_code, _headers = get_entitlements_features_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, archived: archived, lookup_key: lookup_key, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a list of features&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param archived [Bool?] If set, filter results to only include features with the given archive status.
    # @optional @param lookup_key [String?] If set, filter results to only include features with the given lookup_key.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::EntitlementsResourceFeatureList, Integer, Hash)] Stripe::EntitlementsResourceFeatureList, response status code and response headers
    def get_entitlements_features_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      archived : Bool? = nil,
      lookup_key : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::EntitlementsResourceFeatureList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_entitlements_features(ending_before: ending_before, starting_after: starting_after, limit: limit, archived: archived, lookup_key: lookup_key, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: EntitlementsApi#get_entitlements_features\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::EntitlementsResourceFeatureList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve a list of features&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param archived [Bool?] If set, filter results to only include features with the given archive status.
    # @optional @param lookup_key [String?] If set, filter results to only include features with the given lookup_key.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_entitlements_features(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      archived : Bool? = nil,
      lookup_key : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_entitlements_features(ending_before: ending_before, starting_after: starting_after, limit: limit, archived: archived, lookup_key: lookup_key, expand: expand).execute(&block)
    end

    GET_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_LOOKUP_KEY     = 5000

    # @return Crest::Request
    def build_api_request_for_get_entitlements_features(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      archived : Bool? = nil,
      lookup_key : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: EntitlementsApi.get_entitlements_features ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_lookup_key = lookup_key).nil?
          OpenApi::PrimitiveValidator.validate_max_length("lookup_key", lookup_key.to_s.size, GET_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_LOOKUP_KEY)
        end
      end

      # resource path
      local_var_path = "/v1/entitlements/features"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["archived"] = archived.to_s if !archived.nil?
      query_params["lookup_key"] = lookup_key.to_s if !lookup_key.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "EntitlementsApi.get_entitlements_features",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a feature</p>
    # @required @param id [String?] The ID of the feature.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::EntitlementsFeature]
    def get_entitlements_features_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::EntitlementsFeature
      data, _status_code, _headers = get_entitlements_features_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a feature&lt;/p&gt;
    # @required @param id [String?] The ID of the feature.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::EntitlementsFeature, Integer, Hash)] Stripe::EntitlementsFeature, response status code and response headers
    def get_entitlements_features_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::EntitlementsFeature, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_entitlements_features_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: EntitlementsApi#get_entitlements_features_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::EntitlementsFeature.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a feature&lt;/p&gt;
    # @required @param id [String?] The ID of the feature.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_entitlements_features_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_entitlements_features_id(id: id, expand: expand).execute(&block)
    end

    GET_ENTITLEMENTS_FEATURES_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_entitlements_features_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: EntitlementsApi.get_entitlements_features_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_ENTITLEMENTS_FEATURES_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/entitlements/features/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "EntitlementsApi.get_entitlements_features_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a feature</p>
    # @required @param lookup_key [String?] A unique key you provide as your own system identifier. This may be up to 80 characters.
    # @required @param name [String?] The feature's name, for your own purpose, not meant to be displayable to the customer.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return [Stripe::EntitlementsFeature]
    def post_entitlements_features(
      *,
      lookup_key : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Stripe::EntitlementsFeature
      data, _status_code, _headers = post_entitlements_features_with_http_info(lookup_key: lookup_key, name: name, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Creates a feature&lt;/p&gt;
    # @required @param lookup_key [String?] A unique key you provide as your own system identifier. This may be up to 80 characters.
    # @required @param name [String?] The feature's name, for your own purpose, not meant to be displayable to the customer.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return [Tuple(Stripe::EntitlementsFeature, Integer, Hash)] Stripe::EntitlementsFeature, response status code and response headers
    def post_entitlements_features_with_http_info(
      *,
      lookup_key : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Tuple(Stripe::EntitlementsFeature, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_entitlements_features(lookup_key: lookup_key, name: name, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: EntitlementsApi#post_entitlements_features\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::EntitlementsFeature.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a feature&lt;/p&gt;
    # @required @param lookup_key [String?] A unique key you provide as your own system identifier. This may be up to 80 characters.
    # @required @param name [String?] The feature's name, for your own purpose, not meant to be displayable to the customer.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return nil
    def post_entitlements_features(
      *,
      lookup_key : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_entitlements_features(lookup_key: lookup_key, name: name, expand: expand, metadata: metadata).execute(&block)
    end

    POST_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_LOOKUP_KEY = 80
    POST_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_NAME       = 80

    # @return Crest::Request
    def build_api_request_for_post_entitlements_features(
      *,
      lookup_key : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: EntitlementsApi.post_entitlements_features ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"lookup_key\" is required and cannot be null") if lookup_key.nil?
        unless (_lookup_key = lookup_key).nil?
          OpenApi::PrimitiveValidator.validate_max_length("lookup_key", lookup_key.to_s.size, POST_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_LOOKUP_KEY)
        end
        raise ArgumentError.new("\"name\" is required and cannot be null") if name.nil?
        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_ENTITLEMENTS_FEATURES_MAX_LENGTH_FOR_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/entitlements/features"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("lookup_key", lookup_key.to_s) if !lookup_key.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "EntitlementsApi.post_entitlements_features",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Update a feature’s metadata or permanently deactivate it.</p>
    # @required @param id [String?]
    # @optional @param active [Bool?] Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostEntitlementsFeaturesIdRequestMetadata?]
    # @optional @param name [String?] The feature's name, for your own purpose, not meant to be displayable to the customer.
    # @return [Stripe::EntitlementsFeature]
    def post_entitlements_features_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostEntitlementsFeaturesIdRequestMetadata? = nil,
      name : String? = nil
    ) : Stripe::EntitlementsFeature
      data, _status_code, _headers = post_entitlements_features_id_with_http_info(id: id, active: active, expand: expand, metadata: metadata, name: name)
      data
    end

    # &lt;p&gt;Update a feature’s metadata or permanently deactivate it.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active [Bool?] Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostEntitlementsFeaturesIdRequestMetadata?]
    # @optional @param name [String?] The feature's name, for your own purpose, not meant to be displayable to the customer.
    # @return [Tuple(Stripe::EntitlementsFeature, Integer, Hash)] Stripe::EntitlementsFeature, response status code and response headers
    def post_entitlements_features_id_with_http_info(
      *,
      id : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostEntitlementsFeaturesIdRequestMetadata? = nil,
      name : String? = nil
    ) : Tuple(Stripe::EntitlementsFeature, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_entitlements_features_id(id: id, active: active, expand: expand, metadata: metadata, name: name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: EntitlementsApi#post_entitlements_features_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::EntitlementsFeature.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Update a feature’s metadata or permanently deactivate it.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active [Bool?] Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostEntitlementsFeaturesIdRequestMetadata?]
    # @optional @param name [String?] The feature's name, for your own purpose, not meant to be displayable to the customer.
    # @return nil
    def post_entitlements_features_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostEntitlementsFeaturesIdRequestMetadata? = nil,
      name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_entitlements_features_id(id: id, active: active, expand: expand, metadata: metadata, name: name).execute(&block)
    end

    POST_ENTITLEMENTS_FEATURES_ID_MAX_LENGTH_FOR_ID   = 5000
    POST_ENTITLEMENTS_FEATURES_ID_MAX_LENGTH_FOR_NAME =   80

    # @return Crest::Request
    def build_api_request_for_post_entitlements_features_id(
      *,
      id : String? = nil,
      active : Bool? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostEntitlementsFeaturesIdRequestMetadata? = nil,
      name : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: EntitlementsApi.post_entitlements_features_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_ENTITLEMENTS_FEATURES_ID_MAX_LENGTH_FOR_ID)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_ENTITLEMENTS_FEATURES_ID_MAX_LENGTH_FOR_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/entitlements/features/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("active", active.to_s) if !active.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "EntitlementsApi.post_entitlements_features_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
