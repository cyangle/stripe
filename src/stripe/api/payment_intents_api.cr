#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class PaymentIntentsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of PaymentIntents.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return PaymentIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentFlowsPaymentIntentList]
    def get_payment_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentFlowsPaymentIntentList
      data, _status_code, _headers = get_payment_intents_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return PaymentIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentFlowsPaymentIntentList, Integer, Hash)] Stripe::PaymentFlowsPaymentIntentList, response status code and response headers
    def get_payment_intents_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentFlowsPaymentIntentList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#get_payment_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentFlowsPaymentIntentList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return PaymentIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, customer: customer, expand: expand).execute(&block)
    end

    GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.get_payment_intents ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentIntentsApi.get_payment_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a PaymentIntent that has previously been created. </p>  <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>  <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href=\"#payment_intent_object\">payment intent</a> object reference for more details.</p>
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
    # @return [Stripe::PaymentIntent]
    def get_payment_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = get_payment_intents_intent_with_http_info(intent: intent, expand: expand, client_secret: client_secret)
      data
    end

    # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def get_payment_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_intents_intent(intent: intent, expand: expand, client_secret: client_secret)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#get_payment_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
    # @return nil
    def get_payment_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_intents_intent(intent: intent, expand: expand, client_secret: client_secret).execute(&block)
    end

    GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT        = 5000
    GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.get_payment_intents_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end

        unless (_client_secret = client_secret).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_secret", client_secret.to_s.size, GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentIntentsApi.get_payment_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_payment_intents_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_payment_intents_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_payment_intents_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_intents_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#get_payment_intents_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_intents_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_intents_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_intents_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.get_payment_intents_search ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentIntentsApi.get_payment_intents_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a PaymentIntent object.</p>  <p>After the PaymentIntent is created, attach a payment method and <a href=\"/docs/api/payment_intents/confirm\">confirm</a> to continue the payment. You can read more about the different payment flows available via the Payment Intents API <a href=\"/docs/payments/payment-intents\">here</a>.</p>  <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> when <code>confirm=true</code> is supplied.</p>
    # @required @param post_payment_intents_request [Stripe::PostPaymentIntentsRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents(
      *,
      post_payment_intents_request : Stripe::PostPaymentIntentsRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_with_http_info(post_payment_intents_request: post_payment_intents_request)
      data
    end

    # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. You can read more about the different payment flows available via the Payment Intents API &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is supplied.&lt;/p&gt;
    # @required @param post_payment_intents_request [Stripe::PostPaymentIntentsRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_with_http_info(
      *,
      post_payment_intents_request : Stripe::PostPaymentIntentsRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents(post_payment_intents_request: post_payment_intents_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. You can read more about the different payment flows available via the Payment Intents API &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is supplied.&lt;/p&gt;
    # @required @param post_payment_intents_request [Stripe::PostPaymentIntentsRequest?]
    # @return nil
    def post_payment_intents(
      *,
      post_payment_intents_request : Stripe::PostPaymentIntentsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents(post_payment_intents_request: post_payment_intents_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents(
      *,
      post_payment_intents_request : Stripe::PostPaymentIntentsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_payment_intents_request\" is required and cannot be null") if post_payment_intents_request.nil?
        unless (_post_payment_intents_request = post_payment_intents_request).nil?
          _post_payment_intents_request.validate if _post_payment_intents_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates properties on a PaymentIntent object without confirming.</p>  <p>Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the <code>payment_method</code> will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> instead.</p>
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_request [Stripe::PostPaymentIntentsIntentRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent(
      *,
      intent : String? = nil,
      post_payment_intents_intent_request : Stripe::PostPaymentIntentsIntentRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_with_http_info(intent: intent, post_payment_intents_intent_request: post_payment_intents_intent_request)
      data
    end

    # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_request [Stripe::PostPaymentIntentsIntentRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      post_payment_intents_intent_request : Stripe::PostPaymentIntentsIntentRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent(intent: intent, post_payment_intents_intent_request: post_payment_intents_intent_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_request [Stripe::PostPaymentIntentsIntentRequest?]
    # @return nil
    def post_payment_intents_intent(
      *,
      intent : String? = nil,
      post_payment_intents_intent_request : Stripe::PostPaymentIntentsIntentRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent(intent: intent, post_payment_intents_intent_request: post_payment_intents_intent_request).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent(
      *,
      intent : String? = nil,
      post_payment_intents_intent_request : Stripe::PostPaymentIntentsIntentRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_payment_intents_intent_request = post_payment_intents_intent_request).nil?
          _post_payment_intents_intent_request.validate if _post_payment_intents_intent_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_intent_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_intent_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Manually reconcile the remaining amount for a customer_balance PaymentIntent.</p>
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_apply_customer_balance_request [Stripe::PostPaymentIntentsIntentApplyCustomerBalanceRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_apply_customer_balance(
      *,
      intent : String? = nil,
      post_payment_intents_intent_apply_customer_balance_request : Stripe::PostPaymentIntentsIntentApplyCustomerBalanceRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_apply_customer_balance_with_http_info(intent: intent, post_payment_intents_intent_apply_customer_balance_request: post_payment_intents_intent_apply_customer_balance_request)
      data
    end

    # &lt;p&gt;Manually reconcile the remaining amount for a customer_balance PaymentIntent.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_apply_customer_balance_request [Stripe::PostPaymentIntentsIntentApplyCustomerBalanceRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_apply_customer_balance_with_http_info(
      *,
      intent : String? = nil,
      post_payment_intents_intent_apply_customer_balance_request : Stripe::PostPaymentIntentsIntentApplyCustomerBalanceRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_apply_customer_balance(intent: intent, post_payment_intents_intent_apply_customer_balance_request: post_payment_intents_intent_apply_customer_balance_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_apply_customer_balance\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Manually reconcile the remaining amount for a customer_balance PaymentIntent.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_apply_customer_balance_request [Stripe::PostPaymentIntentsIntentApplyCustomerBalanceRequest?]
    # @return nil
    def post_payment_intents_intent_apply_customer_balance(
      *,
      intent : String? = nil,
      post_payment_intents_intent_apply_customer_balance_request : Stripe::PostPaymentIntentsIntentApplyCustomerBalanceRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_apply_customer_balance(intent: intent, post_payment_intents_intent_apply_customer_balance_request: post_payment_intents_intent_apply_customer_balance_request).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_APPLY_CUSTOMER_BALANCE_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_apply_customer_balance(
      *,
      intent : String? = nil,
      post_payment_intents_intent_apply_customer_balance_request : Stripe::PostPaymentIntentsIntentApplyCustomerBalanceRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_apply_customer_balance ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_APPLY_CUSTOMER_BALANCE_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_payment_intents_intent_apply_customer_balance_request = post_payment_intents_intent_apply_customer_balance_request).nil?
          _post_payment_intents_intent_apply_customer_balance_request.validate if _post_payment_intents_intent_apply_customer_balance_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/apply_customer_balance".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_intent_apply_customer_balance_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_intent_apply_customer_balance_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_apply_customer_balance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href=\"/docs/payments/intents\">in rare cases</a>, <code>processing</code>. </p>  <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded. </p>  <p>You cannot cancel the PaymentIntent for a Checkout Session. <a href=\"/docs/api/checkout/sessions/expire\">Expire the Checkout Session</a> instead.</p>
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_cancel_request [Stripe::PostPaymentIntentsIntentCancelRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_cancel(
      *,
      intent : String? = nil,
      post_payment_intents_intent_cancel_request : Stripe::PostPaymentIntentsIntentCancelRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_cancel_with_http_info(intent: intent, post_payment_intents_intent_cancel_request: post_payment_intents_intent_cancel_request)
      data
    end

    # &lt;p&gt;A PaymentIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt; or, &lt;a href&#x3D;\&quot;/docs/payments/intents\&quot;&gt;in rare cases&lt;/a&gt;, &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with &lt;code&gt;status&#x3D;’requires_capture’&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; will automatically be refunded. &lt;/p&gt;  &lt;p&gt;You cannot cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_cancel_request [Stripe::PostPaymentIntentsIntentCancelRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_cancel_with_http_info(
      *,
      intent : String? = nil,
      post_payment_intents_intent_cancel_request : Stripe::PostPaymentIntentsIntentCancelRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_cancel(intent: intent, post_payment_intents_intent_cancel_request: post_payment_intents_intent_cancel_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A PaymentIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt; or, &lt;a href&#x3D;\&quot;/docs/payments/intents\&quot;&gt;in rare cases&lt;/a&gt;, &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with &lt;code&gt;status&#x3D;’requires_capture’&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; will automatically be refunded. &lt;/p&gt;  &lt;p&gt;You cannot cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_cancel_request [Stripe::PostPaymentIntentsIntentCancelRequest?]
    # @return nil
    def post_payment_intents_intent_cancel(
      *,
      intent : String? = nil,
      post_payment_intents_intent_cancel_request : Stripe::PostPaymentIntentsIntentCancelRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_cancel(intent: intent, post_payment_intents_intent_cancel_request: post_payment_intents_intent_cancel_request).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_cancel(
      *,
      intent : String? = nil,
      post_payment_intents_intent_cancel_request : Stripe::PostPaymentIntentsIntentCancelRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_payment_intents_intent_cancel_request = post_payment_intents_intent_cancel_request).nil?
          _post_payment_intents_intent_cancel_request.validate if _post_payment_intents_intent_cancel_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/cancel".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_intent_cancel_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_intent_cancel_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>  <p>Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).</p>  <p>Learn more about <a href=\"/docs/payments/capture-later\">separate authorization and capture</a>.</p>
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_capture_request [Stripe::PostPaymentIntentsIntentCaptureRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_capture(
      *,
      intent : String? = nil,
      post_payment_intents_intent_capture_request : Stripe::PostPaymentIntentsIntentCaptureRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_capture_with_http_info(intent: intent, post_payment_intents_intent_capture_request: post_payment_intents_intent_capture_request)
      data
    end

    # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_capture_request [Stripe::PostPaymentIntentsIntentCaptureRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_capture_with_http_info(
      *,
      intent : String? = nil,
      post_payment_intents_intent_capture_request : Stripe::PostPaymentIntentsIntentCaptureRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_capture(intent: intent, post_payment_intents_intent_capture_request: post_payment_intents_intent_capture_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_capture\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_capture_request [Stripe::PostPaymentIntentsIntentCaptureRequest?]
    # @return nil
    def post_payment_intents_intent_capture(
      *,
      intent : String? = nil,
      post_payment_intents_intent_capture_request : Stripe::PostPaymentIntentsIntentCaptureRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_capture(intent: intent, post_payment_intents_intent_capture_request: post_payment_intents_intent_capture_request).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_capture(
      *,
      intent : String? = nil,
      post_payment_intents_intent_capture_request : Stripe::PostPaymentIntentsIntentCaptureRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_capture ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_payment_intents_intent_capture_request = post_payment_intents_intent_capture_request).nil?
          _post_payment_intents_intent_capture_request.validate if _post_payment_intents_intent_capture_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/capture".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_intent_capture_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_intent_capture_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If payment fails, the PaymentIntent will transition to the <code>requires_payment_method</code> status. If payment succeeds, the PaymentIntent will transition to the <code>succeeded</code> status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>). If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted using our <a href=\"/docs/stripe-js/reference#stripe-handle-card-payment\">client SDKs</a> and the PaymentIntent’s <a href=\"#payment_intent_object-client_secret\">client_secret</a>. After <code>next_action</code>s are handled by the client, no additional confirmation is required to complete the payment. If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the <code>requires_confirmation</code> state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the <a href=\"/docs/payments/payment-intents/web-manual\">expanded documentation</a> to learn more about manual confirmation.</p>
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_confirm_request [Stripe::PostPaymentIntentsIntentConfirmRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_confirm(
      *,
      intent : String? = nil,
      post_payment_intents_intent_confirm_request : Stripe::PostPaymentIntentsIntentConfirmRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_confirm_with_http_info(intent: intent, post_payment_intents_intent_confirm_request: post_payment_intents_intent_confirm_request)
      data
    end

    # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;). If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment. If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the &lt;a href&#x3D;\&quot;/docs/payments/payment-intents/web-manual\&quot;&gt;expanded documentation&lt;/a&gt; to learn more about manual confirmation.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_confirm_request [Stripe::PostPaymentIntentsIntentConfirmRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_confirm_with_http_info(
      *,
      intent : String? = nil,
      post_payment_intents_intent_confirm_request : Stripe::PostPaymentIntentsIntentConfirmRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_confirm(intent: intent, post_payment_intents_intent_confirm_request: post_payment_intents_intent_confirm_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_confirm\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;). If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment. If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the &lt;a href&#x3D;\&quot;/docs/payments/payment-intents/web-manual\&quot;&gt;expanded documentation&lt;/a&gt; to learn more about manual confirmation.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_confirm_request [Stripe::PostPaymentIntentsIntentConfirmRequest?]
    # @return nil
    def post_payment_intents_intent_confirm(
      *,
      intent : String? = nil,
      post_payment_intents_intent_confirm_request : Stripe::PostPaymentIntentsIntentConfirmRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_confirm(intent: intent, post_payment_intents_intent_confirm_request: post_payment_intents_intent_confirm_request).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_confirm(
      *,
      intent : String? = nil,
      post_payment_intents_intent_confirm_request : Stripe::PostPaymentIntentsIntentConfirmRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_confirm ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_payment_intents_intent_confirm_request = post_payment_intents_intent_confirm_request).nil?
          _post_payment_intents_intent_confirm_request.validate if _post_payment_intents_intent_confirm_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/confirm".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_intent_confirm_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_intent_confirm_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_confirm",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Perform an incremental authorization on an eligible <a href=\"/docs/api/payment_intents/object\">PaymentIntent</a>. To be eligible, the PaymentIntent’s status must be <code>requires_capture</code> and <a href=\"/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\">incremental_authorization_supported</a> must be <code>true</code>.</p>  <p>Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher <code>amount</code> provided. As with the initial authorization, incremental authorizations may be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.</p>  <p>If the incremental authorization succeeds, the PaymentIntent object is returned with the updated <a href=\"/docs/api/payment_intents/object#payment_intent_object-amount\">amount</a>. If the incremental authorization fails, a <a href=\"/docs/error-codes#card-declined\">card_declined</a> error is returned, and no fields on the PaymentIntent or Charge are updated. The PaymentIntent object remains capturable for the previously authorized amount.</p>  <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. Once captured, a PaymentIntent can no longer be incremented.</p>  <p>Learn more about <a href=\"/docs/terminal/features/incremental-authorizations\">incremental authorizations</a>.</p>
    # @required @param intent [String?]
    # @required @param post_payment_intents_intent_increment_authorization_request [Stripe::PostPaymentIntentsIntentIncrementAuthorizationRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_increment_authorization(
      *,
      intent : String? = nil,
      post_payment_intents_intent_increment_authorization_request : Stripe::PostPaymentIntentsIntentIncrementAuthorizationRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_increment_authorization_with_http_info(intent: intent, post_payment_intents_intent_increment_authorization_request: post_payment_intents_intent_increment_authorization_request)
      data
    end

    # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. As with the initial authorization, incremental authorizations may be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object is returned with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error is returned, and no fields on the PaymentIntent or Charge are updated. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. Once captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @required @param post_payment_intents_intent_increment_authorization_request [Stripe::PostPaymentIntentsIntentIncrementAuthorizationRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_increment_authorization_with_http_info(
      *,
      intent : String? = nil,
      post_payment_intents_intent_increment_authorization_request : Stripe::PostPaymentIntentsIntentIncrementAuthorizationRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_increment_authorization(intent: intent, post_payment_intents_intent_increment_authorization_request: post_payment_intents_intent_increment_authorization_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_increment_authorization\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. As with the initial authorization, incremental authorizations may be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object is returned with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error is returned, and no fields on the PaymentIntent or Charge are updated. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. Once captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @required @param post_payment_intents_intent_increment_authorization_request [Stripe::PostPaymentIntentsIntentIncrementAuthorizationRequest?]
    # @return nil
    def post_payment_intents_intent_increment_authorization(
      *,
      intent : String? = nil,
      post_payment_intents_intent_increment_authorization_request : Stripe::PostPaymentIntentsIntentIncrementAuthorizationRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_increment_authorization(intent: intent, post_payment_intents_intent_increment_authorization_request: post_payment_intents_intent_increment_authorization_request).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_increment_authorization(
      *,
      intent : String? = nil,
      post_payment_intents_intent_increment_authorization_request : Stripe::PostPaymentIntentsIntentIncrementAuthorizationRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_increment_authorization ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_INTENT)
        end
        raise ArgumentError.new("\"post_payment_intents_intent_increment_authorization_request\" is required and cannot be null") if post_payment_intents_intent_increment_authorization_request.nil?
        unless (_post_payment_intents_intent_increment_authorization_request = post_payment_intents_intent_increment_authorization_request).nil?
          _post_payment_intents_intent_increment_authorization_request.validate if _post_payment_intents_intent_increment_authorization_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/increment_authorization".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_intent_increment_authorization_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_intent_increment_authorization_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_increment_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verifies microdeposits on a PaymentIntent object.</p>
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_verify_microdeposits_request [Stripe::PostPaymentIntentsIntentVerifyMicrodepositsRequest?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      post_payment_intents_intent_verify_microdeposits_request : Stripe::PostPaymentIntentsIntentVerifyMicrodepositsRequest? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_verify_microdeposits_with_http_info(intent: intent, post_payment_intents_intent_verify_microdeposits_request: post_payment_intents_intent_verify_microdeposits_request)
      data
    end

    # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_verify_microdeposits_request [Stripe::PostPaymentIntentsIntentVerifyMicrodepositsRequest?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_verify_microdeposits_with_http_info(
      *,
      intent : String? = nil,
      post_payment_intents_intent_verify_microdeposits_request : Stripe::PostPaymentIntentsIntentVerifyMicrodepositsRequest? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_verify_microdeposits(intent: intent, post_payment_intents_intent_verify_microdeposits_request: post_payment_intents_intent_verify_microdeposits_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_verify_microdeposits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_payment_intents_intent_verify_microdeposits_request [Stripe::PostPaymentIntentsIntentVerifyMicrodepositsRequest?]
    # @return nil
    def post_payment_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      post_payment_intents_intent_verify_microdeposits_request : Stripe::PostPaymentIntentsIntentVerifyMicrodepositsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_verify_microdeposits(intent: intent, post_payment_intents_intent_verify_microdeposits_request: post_payment_intents_intent_verify_microdeposits_request).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      post_payment_intents_intent_verify_microdeposits_request : Stripe::PostPaymentIntentsIntentVerifyMicrodepositsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_verify_microdeposits ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_payment_intents_intent_verify_microdeposits_request = post_payment_intents_intent_verify_microdeposits_request).nil?
          _post_payment_intents_intent_verify_microdeposits_request.validate if _post_payment_intents_intent_verify_microdeposits_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/verify_microdeposits".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_intents_intent_verify_microdeposits_request, content_type: header_params["Content-Type"]?) if !post_payment_intents_intent_verify_microdeposits_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_verify_microdeposits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
