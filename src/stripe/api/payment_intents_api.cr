#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/automatic_payment_methods_param"
require "../models/error"
require "../models/get_accounts_created_parameter"

require "../models/optional_fields_shipping"
require "../models/payment_flows_payment_intent_list"
require "../models/payment_intent"
require "../models/payment_method_data_params"
require "../models/payment_method_options_param"
require "../models/post_accounts_request_metadata"
require "../models/post_payment_intents_intent_confirm_request_mandate_data"
require "../models/post_payment_intents_intent_confirm_request_off_session"
require "../models/post_payment_intents_intent_request_application_fee_amount"
require "../models/post_payment_intents_intent_request_shipping"
require "../models/post_payment_intents_request_mandate_data"
require "../models/post_payment_intents_request_off_session"
require "../models/radar_options_with_hidden_options"
require "../models/search_result"
require "../models/transfer_data_creation_params"
require "../models/transfer_data_update_params"

module Stripe
  class PaymentIntentsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of PaymentIntents.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return PaymentIntents for the customer that this customer ID specifies.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentFlowsPaymentIntentList]
    def get_payment_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentFlowsPaymentIntentList
      data, _status_code, _headers = get_payment_intents_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return PaymentIntents for the customer that this customer ID specifies.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentFlowsPaymentIntentList, Integer, Hash)] Stripe::PaymentFlowsPaymentIntentList, response status code and response headers
    def get_payment_intents_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentFlowsPaymentIntentList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#get_payment_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentFlowsPaymentIntentList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return PaymentIntents for the customer that this customer ID specifies.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, customer: customer, expand: expand).execute(&block)
    end

    GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.get_payment_intents ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_PAYMENT_INTENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentIntentsApi.get_payment_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a PaymentIntent that has previously been created. </p>  <p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>  <p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href=\"#payment_intent_object\">payment intent</a> object reference for more details.</p>
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.
    # @return [Stripe::PaymentIntent]
    def get_payment_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = get_payment_intents_intent_with_http_info(intent: intent, expand: expand, client_secret: client_secret)
      data
    end

    # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;You can retrieve a PaymentIntent client-side using a publishable key when the &lt;code&gt;client_secret&lt;/code&gt; is in the query string. &lt;/p&gt;  &lt;p&gt;If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def get_payment_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_intents_intent(intent: intent, expand: expand, client_secret: client_secret)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#get_payment_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;You can retrieve a PaymentIntent client-side using a publishable key when the &lt;code&gt;client_secret&lt;/code&gt; is in the query string. &lt;/p&gt;  &lt;p&gt;If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.
    # @return nil
    def get_payment_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_intents_intent(intent: intent, expand: expand, client_secret: client_secret).execute(&block)
    end

    GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT        = 5000
    GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.get_payment_intents_intent ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end

        unless (_client_secret = client_secret).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_secret", client_secret.to_s.size, GET_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentIntentsApi.get_payment_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_payment_intents_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_payment_intents_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_payment_intents_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_intents_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#get_payment_intents_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_intents_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_intents_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_intents_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.get_payment_intents_search ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_PAYMENT_INTENTS_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentIntentsApi.get_payment_intents_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a PaymentIntent object.</p>  <p>After the PaymentIntent is created, attach a payment method and <a href=\"/docs/api/payment_intents/confirm\">confirm</a> to continue the payment. Learn more about <a href=\"/docs/payments/payment-intents\">the available payment flows with the Payment Intents API</a>.</p>  <p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> when you supply <code>confirm=true</code>.</p>
    # @required @param amount [Int32?] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param automatic_payment_methods [Stripe::AutomaticPaymentMethodsParam?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param confirm [Bool?] Set to `true` to attempt to [confirm this PaymentIntent](https://stripe.com/docs/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://stripe.com/docs/api/payment_intents/confirm).
    # @optional @param confirmation_method [String?] Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
    # @optional @param confirmation_token [String?] ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
    # @optional @param customer [String?] ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param error_on_requires_action [Bool?] Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. Use this parameter for simpler integrations that don't handle customer actions, such as [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate [String?] ID of the mandate that's used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param mandate_data [Stripe::PostPaymentIntentsRequestMandateData?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param off_session [Stripe::PostPaymentIntentsRequestOffSession?]
    # @optional @param on_behalf_of [String?] The Stripe account ID that these funds are intended for. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.  If you don't provide the `payment_method` parameter or the `source` parameter with `confirm=true`, `source` automatically populates with `customer.default_source` to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward.
    # @optional @param payment_method_configuration [String?] The ID of the payment method configuration to use with this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, a card) that this PaymentIntent can use. If you don't provide this, it defaults to [\\\"card\\\"]. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?] Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataCreationParams?]
    # @optional @param transfer_group [String?] A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
    # @optional @param use_stripe_sdk [Bool?] Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
    # @return [Stripe::PaymentIntent]
    def post_payment_intents(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      application_fee_amount : Int64? = nil,
      automatic_payment_methods : Stripe::AutomaticPaymentMethodsParam? = nil,
      capture_method : String? = nil,
      confirm : Bool? = nil,
      confirmation_method : String? = nil,
      confirmation_token : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsRequestMandateData? = nil,
      metadata : Hash(String, String)? = nil,
      off_session : Stripe::PostPaymentIntentsRequestOffSession? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataCreationParams? = nil,
      transfer_group : String? = nil,
      use_stripe_sdk : Bool? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_with_http_info(amount: amount, currency: currency, application_fee_amount: application_fee_amount, automatic_payment_methods: automatic_payment_methods, capture_method: capture_method, confirm: confirm, confirmation_method: confirmation_method, confirmation_token: confirmation_token, customer: customer, description: description, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_configuration: payment_method_configuration, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group, use_stripe_sdk: use_stripe_sdk)
      data
    end

    # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. Learn more about &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;the available payment flows with the Payment Intents API&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When you use &lt;code&gt;confirm&#x3D;true&lt;/code&gt; during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when you supply &lt;code&gt;confirm&#x3D;true&lt;/code&gt;.&lt;/p&gt;
    # @required @param amount [Int32?] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param automatic_payment_methods [Stripe::AutomaticPaymentMethodsParam?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param confirm [Bool?] Set to `true` to attempt to [confirm this PaymentIntent](https://stripe.com/docs/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://stripe.com/docs/api/payment_intents/confirm).
    # @optional @param confirmation_method [String?] Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
    # @optional @param confirmation_token [String?] ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
    # @optional @param customer [String?] ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param error_on_requires_action [Bool?] Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. Use this parameter for simpler integrations that don't handle customer actions, such as [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate [String?] ID of the mandate that's used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param mandate_data [Stripe::PostPaymentIntentsRequestMandateData?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param off_session [Stripe::PostPaymentIntentsRequestOffSession?]
    # @optional @param on_behalf_of [String?] The Stripe account ID that these funds are intended for. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.  If you don't provide the `payment_method` parameter or the `source` parameter with `confirm=true`, `source` automatically populates with `customer.default_source` to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward.
    # @optional @param payment_method_configuration [String?] The ID of the payment method configuration to use with this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, a card) that this PaymentIntent can use. If you don't provide this, it defaults to [\\\"card\\\"]. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?] Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataCreationParams?]
    # @optional @param transfer_group [String?] A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
    # @optional @param use_stripe_sdk [Bool?] Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_with_http_info(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      application_fee_amount : Int64? = nil,
      automatic_payment_methods : Stripe::AutomaticPaymentMethodsParam? = nil,
      capture_method : String? = nil,
      confirm : Bool? = nil,
      confirmation_method : String? = nil,
      confirmation_token : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsRequestMandateData? = nil,
      metadata : Hash(String, String)? = nil,
      off_session : Stripe::PostPaymentIntentsRequestOffSession? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataCreationParams? = nil,
      transfer_group : String? = nil,
      use_stripe_sdk : Bool? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents(amount: amount, currency: currency, application_fee_amount: application_fee_amount, automatic_payment_methods: automatic_payment_methods, capture_method: capture_method, confirm: confirm, confirmation_method: confirmation_method, confirmation_token: confirmation_token, customer: customer, description: description, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_configuration: payment_method_configuration, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group, use_stripe_sdk: use_stripe_sdk)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. Learn more about &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;the available payment flows with the Payment Intents API&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When you use &lt;code&gt;confirm&#x3D;true&lt;/code&gt; during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when you supply &lt;code&gt;confirm&#x3D;true&lt;/code&gt;.&lt;/p&gt;
    # @required @param amount [Int32?] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param automatic_payment_methods [Stripe::AutomaticPaymentMethodsParam?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param confirm [Bool?] Set to `true` to attempt to [confirm this PaymentIntent](https://stripe.com/docs/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://stripe.com/docs/api/payment_intents/confirm).
    # @optional @param confirmation_method [String?] Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
    # @optional @param confirmation_token [String?] ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
    # @optional @param customer [String?] ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param error_on_requires_action [Bool?] Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. Use this parameter for simpler integrations that don't handle customer actions, such as [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate [String?] ID of the mandate that's used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param mandate_data [Stripe::PostPaymentIntentsRequestMandateData?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param off_session [Stripe::PostPaymentIntentsRequestOffSession?]
    # @optional @param on_behalf_of [String?] The Stripe account ID that these funds are intended for. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.  If you don't provide the `payment_method` parameter or the `source` parameter with `confirm=true`, `source` automatically populates with `customer.default_source` to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward.
    # @optional @param payment_method_configuration [String?] The ID of the payment method configuration to use with this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, a card) that this PaymentIntent can use. If you don't provide this, it defaults to [\\\"card\\\"]. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?] Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataCreationParams?]
    # @optional @param transfer_group [String?] A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
    # @optional @param use_stripe_sdk [Bool?] Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
    # @return nil
    def post_payment_intents(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      application_fee_amount : Int64? = nil,
      automatic_payment_methods : Stripe::AutomaticPaymentMethodsParam? = nil,
      capture_method : String? = nil,
      confirm : Bool? = nil,
      confirmation_method : String? = nil,
      confirmation_token : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsRequestMandateData? = nil,
      metadata : Hash(String, String)? = nil,
      off_session : Stripe::PostPaymentIntentsRequestOffSession? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataCreationParams? = nil,
      transfer_group : String? = nil,
      use_stripe_sdk : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents(amount: amount, currency: currency, application_fee_amount: application_fee_amount, automatic_payment_methods: automatic_payment_methods, capture_method: capture_method, confirm: confirm, confirmation_method: confirmation_method, confirmation_token: confirmation_token, customer: customer, description: description, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_configuration: payment_method_configuration, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group, use_stripe_sdk: use_stripe_sdk).execute(&block)
    end

    POST_PAYMENT_INTENTS_VALID_VALUES_FOR_CAPTURE_METHOD             = String.static_array("automatic", "automatic_async", "manual")
    POST_PAYMENT_INTENTS_VALID_VALUES_FOR_CONFIRMATION_METHOD        = String.static_array("automatic", "manual")
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_CONFIRMATION_TOKEN           = 5000
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_CUSTOMER                     = 5000
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_DESCRIPTION                  = 1000
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_MANDATE                      = 5000
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD               = 5000
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION =  100
    POST_PAYMENT_INTENTS_VALID_VALUES_FOR_SETUP_FUTURE_USAGE         = String.static_array("off_session", "on_session")
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR         = 22
    POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX  = 22

    # @return Crest::Request
    def build_api_request_for_post_payment_intents(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      application_fee_amount : Int64? = nil,
      automatic_payment_methods : Stripe::AutomaticPaymentMethodsParam? = nil,
      capture_method : String? = nil,
      confirm : Bool? = nil,
      confirmation_method : String? = nil,
      confirmation_token : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsRequestMandateData? = nil,
      metadata : Hash(String, String)? = nil,
      off_session : Stripe::PostPaymentIntentsRequestOffSession? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataCreationParams? = nil,
      transfer_group : String? = nil,
      use_stripe_sdk : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        unless (_automatic_payment_methods = automatic_payment_methods).nil?
          _automatic_payment_methods.validate if _automatic_payment_methods.is_a?(OpenApi::Validatable)
        end
        unless (_capture_method = capture_method).nil?
          OpenApi::EnumValidator.validate("capture_method", _capture_method, POST_PAYMENT_INTENTS_VALID_VALUES_FOR_CAPTURE_METHOD)
        end

        unless (_confirmation_method = confirmation_method).nil?
          OpenApi::EnumValidator.validate("confirmation_method", _confirmation_method, POST_PAYMENT_INTENTS_VALID_VALUES_FOR_CONFIRMATION_METHOD)
        end
        unless (_confirmation_token = confirmation_token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("confirmation_token", confirmation_token.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_CONFIRMATION_TOKEN)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_mandate = mandate).nil?
          OpenApi::PrimitiveValidator.validate_max_length("mandate", mandate.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_MANDATE)
        end
        unless (_mandate_data = mandate_data).nil?
          _mandate_data.validate if _mandate_data.is_a?(OpenApi::Validatable)
        end

        unless (_off_session = off_session).nil?
          _off_session.validate if _off_session.is_a?(OpenApi::Validatable)
        end

        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_payment_method_configuration = payment_method_configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method_configuration", payment_method_configuration.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION)
        end
        unless (_payment_method_data = payment_method_data).nil?
          _payment_method_data.validate if _payment_method_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_options = payment_method_options).nil?
          _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
        end

        unless (_radar_options = radar_options).nil?
          _radar_options.validate if _radar_options.is_a?(OpenApi::Validatable)
        end

        unless (_setup_future_usage = setup_future_usage).nil?
          OpenApi::EnumValidator.validate("setup_future_usage", _setup_future_usage, POST_PAYMENT_INTENTS_VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
        end
        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_statement_descriptor_suffix = statement_descriptor_suffix).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix", statement_descriptor_suffix.to_s.size, POST_PAYMENT_INTENTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_payment_methods.to_json), "automatic_payment_methods")) if !automatic_payment_methods.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("capture_method", capture_method.to_s) if !capture_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("confirm", confirm.to_s) if !confirm.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("confirmation_method", confirmation_method.to_s) if !confirmation_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("confirmation_token", confirmation_token.to_s) if !confirmation_token.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("error_on_requires_action", error_on_requires_action.to_s) if !error_on_requires_action.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("mandate", mandate.to_s) if !mandate.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(mandate_data.to_json), "mandate_data")) if !mandate_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(off_session.to_json), "off_session")) if !off_session.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method", payment_method.to_s) if !payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method_configuration", payment_method_configuration.to_s) if !payment_method_configuration.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_data.to_json), "payment_method_data")) if !payment_method_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_options.to_json), "payment_method_options")) if !payment_method_options.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_types.to_json), "payment_method_types")) if !payment_method_types.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(radar_options.to_json), "radar_options")) if !radar_options.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("receipt_email", receipt_email.to_s) if !receipt_email.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("return_url", return_url.to_s) if !return_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("setup_future_usage", setup_future_usage.to_s) if !setup_future_usage.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor_suffix", statement_descriptor_suffix.to_s) if !statement_descriptor_suffix.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_group", transfer_group.to_s) if !transfer_group.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("use_stripe_sdk", use_stripe_sdk.to_s) if !use_stripe_sdk.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates properties on a PaymentIntent object without confirming.</p>  <p>Depending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the <code>payment_method</code> always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> instead.</p>
    # @required @param intent [String?]
    # @optional @param amount [Int32?] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @optional @param application_fee_amount [Stripe::PostPaymentIntentsIntentRequestApplicationFeeAmount?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. To unset this field to null, pass in an empty string.
    # @optional @param payment_method_configuration [String?] The ID of the payment method configuration to use with this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param receipt_email [String?]
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
    # @optional @param shipping [Stripe::PostPaymentIntentsIntentRequestShipping?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @optional @param transfer_group [String?] A string that identifies the resulting payment as part of a group. You can only provide `transfer_group` if it hasn't been set. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Stripe::PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil,
      capture_method : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      receipt_email : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil,
      transfer_group : String? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_with_http_info(intent: intent, amount: amount, application_fee_amount: application_fee_amount, capture_method: capture_method, currency: currency, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_configuration: payment_method_configuration, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, receipt_email: receipt_email, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amount [Int32?] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @optional @param application_fee_amount [Stripe::PostPaymentIntentsIntentRequestApplicationFeeAmount?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. To unset this field to null, pass in an empty string.
    # @optional @param payment_method_configuration [String?] The ID of the payment method configuration to use with this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param receipt_email [String?]
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
    # @optional @param shipping [Stripe::PostPaymentIntentsIntentRequestShipping?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @optional @param transfer_group [String?] A string that identifies the resulting payment as part of a group. You can only provide `transfer_group` if it hasn't been set. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Stripe::PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil,
      capture_method : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      receipt_email : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil,
      transfer_group : String? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent(intent: intent, amount: amount, application_fee_amount: application_fee_amount, capture_method: capture_method, currency: currency, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_configuration: payment_method_configuration, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, receipt_email: receipt_email, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amount [Int32?] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @optional @param application_fee_amount [Stripe::PostPaymentIntentsIntentRequestApplicationFeeAmount?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. To unset this field to null, pass in an empty string.
    # @optional @param payment_method_configuration [String?] The ID of the payment method configuration to use with this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param receipt_email [String?]
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
    # @optional @param shipping [Stripe::PostPaymentIntentsIntentRequestShipping?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @optional @param transfer_group [String?] A string that identifies the resulting payment as part of a group. You can only provide `transfer_group` if it hasn't been set. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @return nil
    def post_payment_intents_intent(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Stripe::PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil,
      capture_method : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      receipt_email : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil,
      transfer_group : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent(intent: intent, amount: amount, application_fee_amount: application_fee_amount, capture_method: capture_method, currency: currency, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_configuration: payment_method_configuration, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, receipt_email: receipt_email, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT                       = 5000
    POST_PAYMENT_INTENTS_INTENT_VALID_VALUES_FOR_CAPTURE_METHOD             = String.static_array("automatic", "automatic_async", "manual")
    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_CUSTOMER                     = 5000
    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_DESCRIPTION                  = 1000
    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_PAYMENT_METHOD               = 5000
    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION =  100
    POST_PAYMENT_INTENTS_INTENT_VALID_VALUES_FOR_RECEIPT_EMAIL              = String.static_array("")
    POST_PAYMENT_INTENTS_INTENT_VALID_VALUES_FOR_SETUP_FUTURE_USAGE         = String.static_array("", "off_session", "on_session")
    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR         = 22
    POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX  = 22

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Stripe::PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil,
      capture_method : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_configuration : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      receipt_email : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil,
      transfer_group : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end

        unless (_application_fee_amount = application_fee_amount).nil?
          _application_fee_amount.validate if _application_fee_amount.is_a?(OpenApi::Validatable)
        end
        unless (_capture_method = capture_method).nil?
          OpenApi::EnumValidator.validate("capture_method", _capture_method, POST_PAYMENT_INTENTS_INTENT_VALID_VALUES_FOR_CAPTURE_METHOD)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_payment_method_configuration = payment_method_configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method_configuration", payment_method_configuration.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION)
        end
        unless (_payment_method_data = payment_method_data).nil?
          _payment_method_data.validate if _payment_method_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_options = payment_method_options).nil?
          _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
        end

        unless (_receipt_email = receipt_email).nil?
          OpenApi::EnumValidator.validate("receipt_email", _receipt_email, POST_PAYMENT_INTENTS_INTENT_VALID_VALUES_FOR_RECEIPT_EMAIL)
        end
        unless (_setup_future_usage = setup_future_usage).nil?
          OpenApi::EnumValidator.validate("setup_future_usage", _setup_future_usage, POST_PAYMENT_INTENTS_INTENT_VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
        end
        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_statement_descriptor_suffix = statement_descriptor_suffix).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix", statement_descriptor_suffix.to_s.size, POST_PAYMENT_INTENTS_INTENT_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(application_fee_amount.to_json), "application_fee_amount")) if !application_fee_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("capture_method", capture_method.to_s) if !capture_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method", payment_method.to_s) if !payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method_configuration", payment_method_configuration.to_s) if !payment_method_configuration.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_data.to_json), "payment_method_data")) if !payment_method_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_options.to_json), "payment_method_options")) if !payment_method_options.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_types.to_json), "payment_method_types")) if !payment_method_types.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("receipt_email", receipt_email.to_s) if !receipt_email.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("setup_future_usage", setup_future_usage.to_s) if !setup_future_usage.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor_suffix", statement_descriptor_suffix.to_s) if !statement_descriptor_suffix.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_group", transfer_group.to_s) if !transfer_group.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
    # @required @param intent [String?]
    # @optional @param amount [Int32?] Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.  A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).  The maximum amount is the amount of the PaymentIntent.  When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_apply_customer_balance(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_apply_customer_balance_with_http_info(intent: intent, amount: amount, currency: currency, expand: expand)
      data
    end

    # &lt;p&gt;Manually reconcile the remaining amount for a &lt;code&gt;customer_balance&lt;/code&gt; PaymentIntent.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amount [Int32?] Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.  A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).  The maximum amount is the amount of the PaymentIntent.  When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_apply_customer_balance_with_http_info(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_apply_customer_balance(intent: intent, amount: amount, currency: currency, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_apply_customer_balance\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Manually reconcile the remaining amount for a &lt;code&gt;customer_balance&lt;/code&gt; PaymentIntent.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amount [Int32?] Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.  A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).  The maximum amount is the amount of the PaymentIntent.  When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_intents_intent_apply_customer_balance(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_apply_customer_balance(intent: intent, amount: amount, currency: currency, expand: expand).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_APPLY_CUSTOMER_BALANCE_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_apply_customer_balance(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_apply_customer_balance ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_APPLY_CUSTOMER_BALANCE_MAX_LENGTH_FOR_INTENT)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/apply_customer_balance".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_apply_customer_balance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href=\"/docs/payments/intents\">in rare cases</a>, <code>processing</code>. </p>  <p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>  <p>You can’t cancel the PaymentIntent for a Checkout Session. <a href=\"/docs/api/checkout/sessions/expire\">Expire the Checkout Session</a> instead.</p>
    # @required @param intent [String?]
    # @optional @param cancellation_reason [String?] Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_cancel(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_cancel_with_http_info(intent: intent, cancellation_reason: cancellation_reason, expand: expand)
      data
    end

    # &lt;p&gt;You can cancel a PaymentIntent object when it’s in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt; or, &lt;a href&#x3D;\&quot;/docs/payments/intents\&quot;&gt;in rare cases&lt;/a&gt;, &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;requires_capture&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; is automatically refunded. &lt;/p&gt;  &lt;p&gt;You can’t cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param cancellation_reason [String?] Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_cancel_with_http_info(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can cancel a PaymentIntent object when it’s in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt; or, &lt;a href&#x3D;\&quot;/docs/payments/intents\&quot;&gt;in rare cases&lt;/a&gt;, &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;requires_capture&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; is automatically refunded. &lt;/p&gt;  &lt;p&gt;You can’t cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param cancellation_reason [String?] Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_intents_intent_cancel(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT                = 5000
    POST_PAYMENT_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_CANCELLATION_REASON   = 5000
    POST_PAYMENT_INTENTS_INTENT_CANCEL_VALID_VALUES_FOR_CANCELLATION_REASON = String.static_array("abandoned", "duplicate", "fraudulent", "requested_by_customer")

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_cancel(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT)
        end
        unless (_cancellation_reason = cancellation_reason).nil?
          OpenApi::EnumValidator.validate("cancellation_reason", _cancellation_reason, POST_PAYMENT_INTENTS_INTENT_CANCEL_VALID_VALUES_FOR_CANCELLATION_REASON)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/cancel".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("cancellation_reason", cancellation_reason.to_s) if !cancellation_reason.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>  <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>  <p>Learn more about <a href=\"/docs/payments/capture-later\">separate authorization and capture</a>.</p>
    # @required @param intent [String?]
    # @optional @param amount_to_capture [Int32?] The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it's not provided.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param final_capture [Bool?] Defaults to `true`. When capturing a PaymentIntent, setting `final_capture` to `false` notifies Stripe to not release the remaining uncaptured funds to make sure that they're captured in future requests. You can only use this setting when [multicapture](https://stripe.com/docs/payments/multicapture) is available for PaymentIntents.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_capture(
      *,
      intent : String? = nil,
      amount_to_capture : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      final_capture : Bool? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_capture_with_http_info(intent: intent, amount_to_capture: amount_to_capture, application_fee_amount: application_fee_amount, expand: expand, final_capture: final_capture, metadata: metadata, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amount_to_capture [Int32?] The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it's not provided.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param final_capture [Bool?] Defaults to `true`. When capturing a PaymentIntent, setting `final_capture` to `false` notifies Stripe to not release the remaining uncaptured funds to make sure that they're captured in future requests. You can only use this setting when [multicapture](https://stripe.com/docs/payments/multicapture) is available for PaymentIntents.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_capture_with_http_info(
      *,
      intent : String? = nil,
      amount_to_capture : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      final_capture : Bool? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_capture(intent: intent, amount_to_capture: amount_to_capture, application_fee_amount: application_fee_amount, expand: expand, final_capture: final_capture, metadata: metadata, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_capture\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amount_to_capture [Int32?] The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it's not provided.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param final_capture [Bool?] Defaults to `true`. When capturing a PaymentIntent, setting `final_capture` to `false` notifies Stripe to not release the remaining uncaptured funds to make sure that they're captured in future requests. You can only use this setting when [multicapture](https://stripe.com/docs/payments/multicapture) is available for PaymentIntents.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @return nil
    def post_payment_intents_intent_capture(
      *,
      intent : String? = nil,
      amount_to_capture : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      final_capture : Bool? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_capture(intent: intent, amount_to_capture: amount_to_capture, application_fee_amount: application_fee_amount, expand: expand, final_capture: final_capture, metadata: metadata, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_INTENT                      = 5000
    POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR        =   22
    POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX =   22

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_capture(
      *,
      intent : String? = nil,
      amount_to_capture : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      final_capture : Bool? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_capture ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_INTENT)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_statement_descriptor_suffix = statement_descriptor_suffix).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix", statement_descriptor_suffix.to_s.size, POST_PAYMENT_INTENTS_INTENT_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/capture".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount_to_capture", amount_to_capture.to_s) if !amount_to_capture.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("final_capture", final_capture.to_s) if !final_capture.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor_suffix", statement_descriptor_suffix.to_s) if !statement_descriptor_suffix.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If payment fails, the PaymentIntent transitions to the <code>requires_payment_method</code> status or the <code>canceled</code> status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the <code>succeeded</code> status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>). If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted using our <a href=\"/docs/stripe-js/reference#stripe-handle-card-payment\">client SDKs</a> and the PaymentIntent’s <a href=\"#payment_intent_object-client_secret\">client_secret</a>. After <code>next_action</code>s are handled by the client, no additional confirmation is required to complete the payment. If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the <code>requires_confirmation</code> state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.</p>
    # @required @param intent [String?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param confirmation_token [String?] ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
    # @optional @param error_on_requires_action [Bool?] Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate [String?] ID of the mandate that's used for this payment.
    # @optional @param mandate_data [Stripe::PostPaymentIntentsIntentConfirmRequestMandateData?]
    # @optional @param off_session [Stripe::PostPaymentIntentsIntentConfirmRequestOffSession?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, a card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?]
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
    # @optional @param shipping [Stripe::PostPaymentIntentsIntentRequestShipping?]
    # @optional @param use_stripe_sdk [Bool?] Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_confirm(
      *,
      intent : String? = nil,
      capture_method : String? = nil,
      confirmation_token : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      off_session : Stripe::PostPaymentIntentsIntentConfirmRequestOffSession? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      use_stripe_sdk : Bool? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_confirm_with_http_info(intent: intent, capture_method: capture_method, confirmation_token: confirmation_token, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, use_stripe_sdk: use_stripe_sdk)
      data
    end

    # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent transitions to the &lt;code&gt;requires_payment_method&lt;/code&gt; status or the &lt;code&gt;canceled&lt;/code&gt; status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;). If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment. If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param confirmation_token [String?] ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
    # @optional @param error_on_requires_action [Bool?] Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate [String?] ID of the mandate that's used for this payment.
    # @optional @param mandate_data [Stripe::PostPaymentIntentsIntentConfirmRequestMandateData?]
    # @optional @param off_session [Stripe::PostPaymentIntentsIntentConfirmRequestOffSession?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, a card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?]
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
    # @optional @param shipping [Stripe::PostPaymentIntentsIntentRequestShipping?]
    # @optional @param use_stripe_sdk [Bool?] Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_confirm_with_http_info(
      *,
      intent : String? = nil,
      capture_method : String? = nil,
      confirmation_token : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      off_session : Stripe::PostPaymentIntentsIntentConfirmRequestOffSession? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      use_stripe_sdk : Bool? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_confirm(intent: intent, capture_method: capture_method, confirmation_token: confirmation_token, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, use_stripe_sdk: use_stripe_sdk)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_confirm\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent transitions to the &lt;code&gt;requires_payment_method&lt;/code&gt; status or the &lt;code&gt;canceled&lt;/code&gt; status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;). If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment. If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param capture_method [String?] Controls when the funds will be captured from the customer's account.
    # @optional @param confirmation_token [String?] ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
    # @optional @param error_on_requires_action [Bool?] Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate [String?] ID of the mandate that's used for this payment.
    # @optional @param mandate_data [Stripe::PostPaymentIntentsIntentConfirmRequestMandateData?]
    # @optional @param off_session [Stripe::PostPaymentIntentsIntentConfirmRequestOffSession?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (for example, a card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?]
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
    # @optional @param shipping [Stripe::PostPaymentIntentsIntentRequestShipping?]
    # @optional @param use_stripe_sdk [Bool?] Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
    # @return nil
    def post_payment_intents_intent_confirm(
      *,
      intent : String? = nil,
      capture_method : String? = nil,
      confirmation_token : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      off_session : Stripe::PostPaymentIntentsIntentConfirmRequestOffSession? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      use_stripe_sdk : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_confirm(intent: intent, capture_method: capture_method, confirmation_token: confirmation_token, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, use_stripe_sdk: use_stripe_sdk).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT               = 5000
    POST_PAYMENT_INTENTS_INTENT_CONFIRM_VALID_VALUES_FOR_CAPTURE_METHOD     = String.static_array("automatic", "automatic_async", "manual")
    POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_CONFIRMATION_TOKEN   = 5000
    POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_MANDATE              = 5000
    POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_PAYMENT_METHOD       = 5000
    POST_PAYMENT_INTENTS_INTENT_CONFIRM_VALID_VALUES_FOR_RECEIPT_EMAIL      = String.static_array("")
    POST_PAYMENT_INTENTS_INTENT_CONFIRM_VALID_VALUES_FOR_SETUP_FUTURE_USAGE = String.static_array("", "off_session", "on_session")

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_confirm(
      *,
      intent : String? = nil,
      capture_method : String? = nil,
      confirmation_token : String? = nil,
      error_on_requires_action : Bool? = nil,
      expand : Array(String)? = nil,
      mandate : String? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      off_session : Stripe::PostPaymentIntentsIntentConfirmRequestOffSession? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::PostPaymentIntentsIntentRequestShipping? = nil,
      use_stripe_sdk : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_confirm ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT)
        end
        unless (_capture_method = capture_method).nil?
          OpenApi::EnumValidator.validate("capture_method", _capture_method, POST_PAYMENT_INTENTS_INTENT_CONFIRM_VALID_VALUES_FOR_CAPTURE_METHOD)
        end
        unless (_confirmation_token = confirmation_token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("confirmation_token", confirmation_token.to_s.size, POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_CONFIRMATION_TOKEN)
        end

        unless (_mandate = mandate).nil?
          OpenApi::PrimitiveValidator.validate_max_length("mandate", mandate.to_s.size, POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_MANDATE)
        end
        unless (_mandate_data = mandate_data).nil?
          _mandate_data.validate if _mandate_data.is_a?(OpenApi::Validatable)
        end
        unless (_off_session = off_session).nil?
          _off_session.validate if _off_session.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_payment_method_data = payment_method_data).nil?
          _payment_method_data.validate if _payment_method_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_options = payment_method_options).nil?
          _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
        end

        unless (_radar_options = radar_options).nil?
          _radar_options.validate if _radar_options.is_a?(OpenApi::Validatable)
        end
        unless (_receipt_email = receipt_email).nil?
          OpenApi::EnumValidator.validate("receipt_email", _receipt_email, POST_PAYMENT_INTENTS_INTENT_CONFIRM_VALID_VALUES_FOR_RECEIPT_EMAIL)
        end

        unless (_setup_future_usage = setup_future_usage).nil?
          OpenApi::EnumValidator.validate("setup_future_usage", _setup_future_usage, POST_PAYMENT_INTENTS_INTENT_CONFIRM_VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
        end
        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/confirm".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("capture_method", capture_method.to_s) if !capture_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("confirmation_token", confirmation_token.to_s) if !confirmation_token.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("error_on_requires_action", error_on_requires_action.to_s) if !error_on_requires_action.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("mandate", mandate.to_s) if !mandate.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(mandate_data.to_json), "mandate_data")) if !mandate_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(off_session.to_json), "off_session")) if !off_session.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method", payment_method.to_s) if !payment_method.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_data.to_json), "payment_method_data")) if !payment_method_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_options.to_json), "payment_method_options")) if !payment_method_options.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_types.to_json), "payment_method_types")) if !payment_method_types.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(radar_options.to_json), "radar_options")) if !radar_options.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("receipt_email", receipt_email.to_s) if !receipt_email.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("return_url", return_url.to_s) if !return_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("setup_future_usage", setup_future_usage.to_s) if !setup_future_usage.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("use_stripe_sdk", use_stripe_sdk.to_s) if !use_stripe_sdk.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_confirm",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Perform an incremental authorization on an eligible <a href=\"/docs/api/payment_intents/object\">PaymentIntent</a>. To be eligible, the PaymentIntent’s status must be <code>requires_capture</code> and <a href=\"/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\">incremental_authorization_supported</a> must be <code>true</code>.</p>  <p>Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher <code>amount</code> provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.</p>  <p>If the incremental authorization succeeds, the PaymentIntent object returns with the updated <a href=\"/docs/api/payment_intents/object#payment_intent_object-amount\">amount</a>. If the incremental authorization fails, a <a href=\"/docs/error-codes#card-declined\">card_declined</a> error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.</p>  <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.</p>  <p>Learn more about <a href=\"/docs/terminal/features/incremental-authorizations\">incremental authorizations</a>.</p>
    # @required @param intent [String?]
    # @required @param amount [Int32?] The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card or card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_increment_authorization(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Int64? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_increment_authorization_with_http_info(intent: intent, amount: amount, application_fee_amount: application_fee_amount, description: description, expand: expand, metadata: metadata, statement_descriptor: statement_descriptor, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object returns with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @required @param amount [Int32?] The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card or card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_increment_authorization_with_http_info(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Int64? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_increment_authorization(intent: intent, amount: amount, application_fee_amount: application_fee_amount, description: description, expand: expand, metadata: metadata, statement_descriptor: statement_descriptor, transfer_data: transfer_data)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_increment_authorization\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object returns with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
    # @required @param intent [String?]
    # @required @param amount [Int32?] The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param statement_descriptor [String?] Text that appears on the customer's statement as the statement descriptor for a non-card or card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
    # @optional @param transfer_data [Stripe::TransferDataUpdateParams?]
    # @return nil
    def post_payment_intents_intent_increment_authorization(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Int64? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_increment_authorization(intent: intent, amount: amount, application_fee_amount: application_fee_amount, description: description, expand: expand, metadata: metadata, statement_descriptor: statement_descriptor, transfer_data: transfer_data).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_INTENT               = 5000
    POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_DESCRIPTION          = 1000
    POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR =   22

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_increment_authorization(
      *,
      intent : String? = nil,
      amount : Int64? = nil,
      application_fee_amount : Int64? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::TransferDataUpdateParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_increment_authorization ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_INTENT)
        end
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_PAYMENT_INTENTS_INTENT_INCREMENT_AUTHORIZATION_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/increment_authorization".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_increment_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verifies microdeposits on a PaymentIntent object.</p>
    # @required @param intent [String?]
    # @optional @param amounts [Array(Int32)?] Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    # @optional @param descriptor_code [String?] A six-character code starting with SM present in the microdeposit sent to the bank account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentIntent]
    def post_payment_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentIntent
      data, _status_code, _headers = post_payment_intents_intent_verify_microdeposits_with_http_info(intent: intent, amounts: amounts, descriptor_code: descriptor_code, expand: expand)
      data
    end

    # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amounts [Array(Int32)?] Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    # @optional @param descriptor_code [String?] A six-character code starting with SM present in the microdeposit sent to the bank account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentIntent, Integer, Hash)] Stripe::PaymentIntent, response status code and response headers
    def post_payment_intents_intent_verify_microdeposits_with_http_info(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, descriptor_code: descriptor_code, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentIntentsApi#post_payment_intents_intent_verify_microdeposits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amounts [Array(Int32)?] Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    # @optional @param descriptor_code [String?] A six-character code starting with SM present in the microdeposit sent to the bank account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, descriptor_code: descriptor_code, expand: expand).execute(&block)
    end

    POST_PAYMENT_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT          = 5000
    POST_PAYMENT_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_DESCRIPTOR_CODE = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentIntentsApi.post_payment_intents_intent_verify_microdeposits ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_PAYMENT_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT)
        end

        unless (_descriptor_code = descriptor_code).nil?
          OpenApi::PrimitiveValidator.validate_max_length("descriptor_code", descriptor_code.to_s.size, POST_PAYMENT_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_DESCRIPTOR_CODE)
        end
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/verify_microdeposits".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(amounts.to_json), "amounts")) if !amounts.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("descriptor_code", descriptor_code.to_s) if !descriptor_code.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentIntentsApi.post_payment_intents_intent_verify_microdeposits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
