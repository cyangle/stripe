#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/amount_details_specs"
require "../models/billing_clocks_resource_billing_clock_list"
require "../models/card_present"
require "../models/confirmation_token"
require "../models/deleted_test_helpers_test_clock"
require "../models/error"
require "../models/failure_details_params"
require "../models/fleet_testmode_authorization_specs"
require "../models/fuel_specs"

require "../models/interac_present"
require "../models/issuing_authorization"
require "../models/issuing_card"
require "../models/issuing_personalization_design"
require "../models/issuing_transaction"
require "../models/merchant_data_specs"
require "../models/network_data_specs"
require "../models/payment_method_data_params"
require "../models/purchase_details_specs"
require "../models/recipient_shipping_with_optional_fields_address"
require "../models/rejection_reasons_param"
require "../models/returned_details_params"
require "../models/source_params"
require "../models/terminal_reader"
require "../models/test_helpers_test_clock"
require "../models/treasury_inbound_transfer"
require "../models/treasury_outbound_payment"
require "../models/treasury_outbound_transfer"
require "../models/treasury_received_credit"
require "../models/treasury_received_debit"
require "../models/verification_data_specs"

module Stripe
  class TestHelpersApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Deletes a test clock.</p>
    # @required @param test_clock [String?]
    # @return [Stripe::DeletedTestHelpersTestClock]
    def delete_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil
    ) : Stripe::DeletedTestHelpersTestClock
      data, _status_code, _headers = delete_test_helpers_test_clocks_test_clock_with_http_info(test_clock: test_clock)
      data
    end

    # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @return [Tuple(Stripe::DeletedTestHelpersTestClock, Integer, Hash)] Stripe::DeletedTestHelpersTestClock, response status code and response headers
    def delete_test_helpers_test_clocks_test_clock_with_http_info(
      *,
      test_clock : String? = nil
    ) : Tuple(Stripe::DeletedTestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_test_helpers_test_clocks_test_clock(test_clock: test_clock)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#delete_test_helpers_test_clocks_test_clock\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @return nil
    def delete_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_test_helpers_test_clocks_test_clock(test_clock: test_clock).execute(&block)
    end

    DELETE_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK = 5000

    # @return Crest::Request
    def build_api_request_for_delete_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.delete_test_helpers_test_clocks_test_clock ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"test_clock\" is required and cannot be null") if test_clock.nil?
        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, DELETE_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TestHelpersApi.delete_test_helpers_test_clocks_test_clock",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your test clocks.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingClocksResourceBillingClockList]
    def get_test_helpers_test_clocks(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::BillingClocksResourceBillingClockList
      data, _status_code, _headers = get_test_helpers_test_clocks_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingClocksResourceBillingClockList, Integer, Hash)] Stripe::BillingClocksResourceBillingClockList, response status code and response headers
    def get_test_helpers_test_clocks_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::BillingClocksResourceBillingClockList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_test_helpers_test_clocks(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#get_test_helpers_test_clocks\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingClocksResourceBillingClockList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_test_helpers_test_clocks(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_test_helpers_test_clocks(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_test_helpers_test_clocks(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.get_test_helpers_test_clocks ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TestHelpersApi.get_test_helpers_test_clocks",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a test clock.</p>
    # @required @param test_clock [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TestHelpersTestClock]
    def get_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TestHelpersTestClock
      data, _status_code, _headers = get_test_helpers_test_clocks_test_clock_with_http_info(test_clock: test_clock, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TestHelpersTestClock, Integer, Hash)] Stripe::TestHelpersTestClock, response status code and response headers
    def get_test_helpers_test_clocks_test_clock_with_http_info(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_test_helpers_test_clocks_test_clock(test_clock: test_clock, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#get_test_helpers_test_clocks_test_clock\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_test_helpers_test_clocks_test_clock(test_clock: test_clock, expand: expand).execute(&block)
    end

    GET_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK = 5000

    # @return Crest::Request
    def build_api_request_for_get_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.get_test_helpers_test_clocks_test_clock ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"test_clock\" is required and cannot be null") if test_clock.nil?
        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, GET_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TestHelpersApi.get_test_helpers_test_clocks_test_clock",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param payment_method [String?] ID of an existing PaymentMethod.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param return_url [String?] Return URL used to confirm the Intent.
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this ConfirmationToken's payment method.  The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
    # @optional @param shipping [Stripe::RecipientShippingWithOptionalFieldsAddress?]
    # @return [Stripe::ConfirmationToken]
    def post_test_helpers_confirmation_tokens(
      *,
      expand : Array(String)? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil
    ) : Stripe::ConfirmationToken
      data, _status_code, _headers = post_test_helpers_confirmation_tokens_with_http_info(expand: expand, payment_method: payment_method, payment_method_data: payment_method_data, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping)
      data
    end

    # &lt;p&gt;Creates a test mode Confirmation Token server side for your integration tests.&lt;/p&gt;
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param payment_method [String?] ID of an existing PaymentMethod.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param return_url [String?] Return URL used to confirm the Intent.
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this ConfirmationToken's payment method.  The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
    # @optional @param shipping [Stripe::RecipientShippingWithOptionalFieldsAddress?]
    # @return [Tuple(Stripe::ConfirmationToken, Integer, Hash)] Stripe::ConfirmationToken, response status code and response headers
    def post_test_helpers_confirmation_tokens_with_http_info(
      *,
      expand : Array(String)? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil
    ) : Tuple(Stripe::ConfirmationToken, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_confirmation_tokens(expand: expand, payment_method: payment_method, payment_method_data: payment_method_data, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_confirmation_tokens\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ConfirmationToken.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a test mode Confirmation Token server side for your integration tests.&lt;/p&gt;
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param payment_method [String?] ID of an existing PaymentMethod.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param return_url [String?] Return URL used to confirm the Intent.
    # @optional @param setup_future_usage [String?] Indicates that you intend to make future payments with this ConfirmationToken's payment method.  The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
    # @optional @param shipping [Stripe::RecipientShippingWithOptionalFieldsAddress?]
    # @return nil
    def post_test_helpers_confirmation_tokens(
      *,
      expand : Array(String)? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_confirmation_tokens(expand: expand, payment_method: payment_method, payment_method_data: payment_method_data, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping).execute(&block)
    end

    POST_TEST_HELPERS_CONFIRMATION_TOKENS_MAX_LENGTH_FOR_PAYMENT_METHOD       = 5000
    POST_TEST_HELPERS_CONFIRMATION_TOKENS_VALID_VALUES_FOR_SETUP_FUTURE_USAGE = String.static_array("off_session", "on_session")

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_confirmation_tokens(
      *,
      expand : Array(String)? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      return_url : String? = nil,
      setup_future_usage : String? = nil,
      shipping : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_confirmation_tokens ..." }
      end

      if client_side_validation?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_TEST_HELPERS_CONFIRMATION_TOKENS_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_payment_method_data = payment_method_data).nil?
          _payment_method_data.validate if _payment_method_data.is_a?(OpenApi::Validatable)
        end

        unless (_setup_future_usage = setup_future_usage).nil?
          OpenApi::EnumValidator.validate("setup_future_usage", _setup_future_usage, POST_TEST_HELPERS_CONFIRMATION_TOKENS_VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
        end
        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/confirmation_tokens"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method", payment_method.to_s) if !payment_method.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_data.to_json), "payment_method_data")) if !payment_method_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("return_url", return_url.to_s) if !return_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("setup_future_usage", setup_future_usage.to_s) if !setup_future_usage.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_confirmation_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create a test-mode authorization.</p>
    # @required @param amount [Int32?] The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card's currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this authorization.
    # @optional @param amount_details [Stripe::AmountDetailsSpecs?]
    # @optional @param authorization_method [String?] How the card details were provided. Defaults to online.
    # @optional @param currency [String?] The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fleet [Stripe::FleetTestmodeAuthorizationSpecs?]
    # @optional @param fuel [Stripe::FuelSpecs?]
    # @optional @param is_amount_controllable [Bool?] If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param network_data [Stripe::NetworkDataSpecs?]
    # @optional @param verification_data [Stripe::VerificationDataSpecs?]
    # @optional @param wallet [String?] The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
    # @return [Stripe::IssuingAuthorization]
    def post_test_helpers_issuing_authorizations(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      amount_details : Stripe::AmountDetailsSpecs? = nil,
      authorization_method : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      fleet : Stripe::FleetTestmodeAuthorizationSpecs? = nil,
      fuel : Stripe::FuelSpecs? = nil,
      is_amount_controllable : Bool? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      network_data : Stripe::NetworkDataSpecs? = nil,
      verification_data : Stripe::VerificationDataSpecs? = nil,
      wallet : String? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_test_helpers_issuing_authorizations_with_http_info(amount: amount, card: card, amount_details: amount_details, authorization_method: authorization_method, currency: currency, expand: expand, fleet: fleet, fuel: fuel, is_amount_controllable: is_amount_controllable, merchant_data: merchant_data, network_data: network_data, verification_data: verification_data, wallet: wallet)
      data
    end

    # &lt;p&gt;Create a test-mode authorization.&lt;/p&gt;
    # @required @param amount [Int32?] The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card's currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this authorization.
    # @optional @param amount_details [Stripe::AmountDetailsSpecs?]
    # @optional @param authorization_method [String?] How the card details were provided. Defaults to online.
    # @optional @param currency [String?] The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fleet [Stripe::FleetTestmodeAuthorizationSpecs?]
    # @optional @param fuel [Stripe::FuelSpecs?]
    # @optional @param is_amount_controllable [Bool?] If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param network_data [Stripe::NetworkDataSpecs?]
    # @optional @param verification_data [Stripe::VerificationDataSpecs?]
    # @optional @param wallet [String?] The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_test_helpers_issuing_authorizations_with_http_info(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      amount_details : Stripe::AmountDetailsSpecs? = nil,
      authorization_method : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      fleet : Stripe::FleetTestmodeAuthorizationSpecs? = nil,
      fuel : Stripe::FuelSpecs? = nil,
      is_amount_controllable : Bool? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      network_data : Stripe::NetworkDataSpecs? = nil,
      verification_data : Stripe::VerificationDataSpecs? = nil,
      wallet : String? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_authorizations(amount: amount, card: card, amount_details: amount_details, authorization_method: authorization_method, currency: currency, expand: expand, fleet: fleet, fuel: fuel, is_amount_controllable: is_amount_controllable, merchant_data: merchant_data, network_data: network_data, verification_data: verification_data, wallet: wallet)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_authorizations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Create a test-mode authorization.&lt;/p&gt;
    # @required @param amount [Int32?] The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card's currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this authorization.
    # @optional @param amount_details [Stripe::AmountDetailsSpecs?]
    # @optional @param authorization_method [String?] How the card details were provided. Defaults to online.
    # @optional @param currency [String?] The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fleet [Stripe::FleetTestmodeAuthorizationSpecs?]
    # @optional @param fuel [Stripe::FuelSpecs?]
    # @optional @param is_amount_controllable [Bool?] If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param network_data [Stripe::NetworkDataSpecs?]
    # @optional @param verification_data [Stripe::VerificationDataSpecs?]
    # @optional @param wallet [String?] The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
    # @return nil
    def post_test_helpers_issuing_authorizations(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      amount_details : Stripe::AmountDetailsSpecs? = nil,
      authorization_method : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      fleet : Stripe::FleetTestmodeAuthorizationSpecs? = nil,
      fuel : Stripe::FuelSpecs? = nil,
      is_amount_controllable : Bool? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      network_data : Stripe::NetworkDataSpecs? = nil,
      verification_data : Stripe::VerificationDataSpecs? = nil,
      wallet : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_authorizations(amount: amount, card: card, amount_details: amount_details, authorization_method: authorization_method, currency: currency, expand: expand, fleet: fleet, fuel: fuel, is_amount_controllable: is_amount_controllable, merchant_data: merchant_data, network_data: network_data, verification_data: verification_data, wallet: wallet).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARD                   = 5000
    POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_AUTHORIZATION_METHOD = String.static_array("chip", "contactless", "keyed_in", "online", "swipe")
    POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_WALLET               = String.static_array("apple_pay", "google_pay", "samsung_pay")

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_authorizations(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      amount_details : Stripe::AmountDetailsSpecs? = nil,
      authorization_method : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      fleet : Stripe::FleetTestmodeAuthorizationSpecs? = nil,
      fuel : Stripe::FuelSpecs? = nil,
      is_amount_controllable : Bool? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      network_data : Stripe::NetworkDataSpecs? = nil,
      verification_data : Stripe::VerificationDataSpecs? = nil,
      wallet : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_authorizations ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARD)
        end
        unless (_amount_details = amount_details).nil?
          _amount_details.validate if _amount_details.is_a?(OpenApi::Validatable)
        end
        unless (_authorization_method = authorization_method).nil?
          OpenApi::EnumValidator.validate("authorization_method", _authorization_method, POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_AUTHORIZATION_METHOD)
        end

        unless (_fleet = fleet).nil?
          _fleet.validate if _fleet.is_a?(OpenApi::Validatable)
        end
        unless (_fuel = fuel).nil?
          _fuel.validate if _fuel.is_a?(OpenApi::Validatable)
        end

        unless (_merchant_data = merchant_data).nil?
          _merchant_data.validate if _merchant_data.is_a?(OpenApi::Validatable)
        end
        unless (_network_data = network_data).nil?
          _network_data.validate if _network_data.is_a?(OpenApi::Validatable)
        end
        unless (_verification_data = verification_data).nil?
          _verification_data.validate if _verification_data.is_a?(OpenApi::Validatable)
        end
        unless (_wallet = wallet).nil?
          OpenApi::EnumValidator.validate("wallet", _wallet, POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_WALLET)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/authorizations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(amount_details.to_json), "amount_details")) if !amount_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("authorization_method", authorization_method.to_s) if !authorization_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("card", card.to_s) if !card.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(fleet.to_json), "fleet")) if !fleet.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(fuel.to_json), "fuel")) if !fuel.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("is_amount_controllable", is_amount_controllable.to_s) if !is_amount_controllable.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(merchant_data.to_json), "merchant_data")) if !merchant_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(network_data.to_json), "network_data")) if !network_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(verification_data.to_json), "verification_data")) if !verification_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("wallet", wallet.to_s) if !wallet.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_authorizations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Capture a test-mode authorization.</p>
    # @required @param authorization [String?]
    # @optional @param capture_amount [Int32?] The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param close_authorization [Bool?] Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return [Stripe::IssuingAuthorization]
    def post_test_helpers_issuing_authorizations_authorization_capture(
      *,
      authorization : String? = nil,
      capture_amount : Int64? = nil,
      close_authorization : Bool? = nil,
      expand : Array(String)? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_test_helpers_issuing_authorizations_authorization_capture_with_http_info(authorization: authorization, capture_amount: capture_amount, close_authorization: close_authorization, expand: expand, purchase_details: purchase_details)
      data
    end

    # &lt;p&gt;Capture a test-mode authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param capture_amount [Int32?] The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param close_authorization [Bool?] Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_test_helpers_issuing_authorizations_authorization_capture_with_http_info(
      *,
      authorization : String? = nil,
      capture_amount : Int64? = nil,
      close_authorization : Bool? = nil,
      expand : Array(String)? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_authorizations_authorization_capture(authorization: authorization, capture_amount: capture_amount, close_authorization: close_authorization, expand: expand, purchase_details: purchase_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_authorizations_authorization_capture\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Capture a test-mode authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param capture_amount [Int32?] The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param close_authorization [Bool?] Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return nil
    def post_test_helpers_issuing_authorizations_authorization_capture(
      *,
      authorization : String? = nil,
      capture_amount : Int64? = nil,
      close_authorization : Bool? = nil,
      expand : Array(String)? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_authorizations_authorization_capture(authorization: authorization, capture_amount: capture_amount, close_authorization: close_authorization, expand: expand, purchase_details: purchase_details).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_CAPTURE_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_authorizations_authorization_capture(
      *,
      authorization : String? = nil,
      capture_amount : Int64? = nil,
      close_authorization : Bool? = nil,
      expand : Array(String)? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_capture ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_CAPTURE_MAX_LENGTH_FOR_AUTHORIZATION)
        end

        unless (_purchase_details = purchase_details).nil?
          _purchase_details.validate if _purchase_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/authorizations/{authorization}/capture".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("capture_amount", capture_amount.to_s) if !capture_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("close_authorization", close_authorization.to_s) if !close_authorization.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(purchase_details.to_json), "purchase_details")) if !purchase_details.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Expire a test-mode Authorization.</p>
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingAuthorization]
    def post_test_helpers_issuing_authorizations_authorization_expire(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_test_helpers_issuing_authorizations_authorization_expire_with_http_info(authorization: authorization, expand: expand)
      data
    end

    # &lt;p&gt;Expire a test-mode Authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_test_helpers_issuing_authorizations_authorization_expire_with_http_info(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_authorizations_authorization_expire(authorization: authorization, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_authorizations_authorization_expire\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Expire a test-mode Authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_authorizations_authorization_expire(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_authorizations_authorization_expire(authorization: authorization, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_EXPIRE_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_authorizations_authorization_expire(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_expire ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_EXPIRE_MAX_LENGTH_FOR_AUTHORIZATION)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/authorizations/{authorization}/expire".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_expire",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Increment a test-mode Authorization.</p>
    # @required @param authorization [String?]
    # @required @param increment_amount [Int32?] The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param is_amount_controllable [Bool?] If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    # @return [Stripe::IssuingAuthorization]
    def post_test_helpers_issuing_authorizations_authorization_increment(
      *,
      authorization : String? = nil,
      increment_amount : Int64? = nil,
      expand : Array(String)? = nil,
      is_amount_controllable : Bool? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_test_helpers_issuing_authorizations_authorization_increment_with_http_info(authorization: authorization, increment_amount: increment_amount, expand: expand, is_amount_controllable: is_amount_controllable)
      data
    end

    # &lt;p&gt;Increment a test-mode Authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @required @param increment_amount [Int32?] The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param is_amount_controllable [Bool?] If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_test_helpers_issuing_authorizations_authorization_increment_with_http_info(
      *,
      authorization : String? = nil,
      increment_amount : Int64? = nil,
      expand : Array(String)? = nil,
      is_amount_controllable : Bool? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_authorizations_authorization_increment(authorization: authorization, increment_amount: increment_amount, expand: expand, is_amount_controllable: is_amount_controllable)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_authorizations_authorization_increment\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Increment a test-mode Authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @required @param increment_amount [Int32?] The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param is_amount_controllable [Bool?] If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    # @return nil
    def post_test_helpers_issuing_authorizations_authorization_increment(
      *,
      authorization : String? = nil,
      increment_amount : Int64? = nil,
      expand : Array(String)? = nil,
      is_amount_controllable : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_authorizations_authorization_increment(authorization: authorization, increment_amount: increment_amount, expand: expand, is_amount_controllable: is_amount_controllable).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_INCREMENT_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_authorizations_authorization_increment(
      *,
      authorization : String? = nil,
      increment_amount : Int64? = nil,
      expand : Array(String)? = nil,
      is_amount_controllable : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_increment ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_INCREMENT_MAX_LENGTH_FOR_AUTHORIZATION)
        end
        raise ArgumentError.new("\"increment_amount\" is required and cannot be null") if increment_amount.nil?
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/authorizations/{authorization}/increment".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("increment_amount", increment_amount.to_s) if !increment_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("is_amount_controllable", is_amount_controllable.to_s) if !is_amount_controllable.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_increment",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverse a test-mode Authorization.</p>
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param reverse_amount [Int32?] The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @return [Stripe::IssuingAuthorization]
    def post_test_helpers_issuing_authorizations_authorization_reverse(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      reverse_amount : Int64? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_test_helpers_issuing_authorizations_authorization_reverse_with_http_info(authorization: authorization, expand: expand, reverse_amount: reverse_amount)
      data
    end

    # &lt;p&gt;Reverse a test-mode Authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param reverse_amount [Int32?] The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_test_helpers_issuing_authorizations_authorization_reverse_with_http_info(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      reverse_amount : Int64? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_authorizations_authorization_reverse(authorization: authorization, expand: expand, reverse_amount: reverse_amount)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_authorizations_authorization_reverse\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Reverse a test-mode Authorization.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param reverse_amount [Int32?] The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @return nil
    def post_test_helpers_issuing_authorizations_authorization_reverse(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      reverse_amount : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_authorizations_authorization_reverse(authorization: authorization, expand: expand, reverse_amount: reverse_amount).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_REVERSE_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_authorizations_authorization_reverse(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      reverse_amount : Int64? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_reverse ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_TEST_HELPERS_ISSUING_AUTHORIZATIONS_AUTHORIZATION_REVERSE_MAX_LENGTH_FOR_AUTHORIZATION)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/authorizations/{authorization}/reverse".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("reverse_amount", reverse_amount.to_s) if !reverse_amount.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_authorizations_authorization_reverse",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def post_test_helpers_issuing_cards_card_shipping_fail(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_test_helpers_issuing_cards_card_shipping_fail_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;failure&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_test_helpers_issuing_cards_card_shipping_fail_with_http_info(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_cards_card_shipping_fail(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_cards_card_shipping_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;failure&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_cards_card_shipping_fail(
      *,
      card : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_cards_card_shipping_fail(card: card, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_FAIL_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_cards_card_shipping_fail(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_fail ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_FAIL_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/cards/{card}/shipping/fail".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def post_test_helpers_issuing_cards_card_shipping_return(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_test_helpers_issuing_cards_card_shipping_return_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;returned&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_test_helpers_issuing_cards_card_shipping_return_with_http_info(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_cards_card_shipping_return(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_cards_card_shipping_return\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;returned&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_cards_card_shipping_return(
      *,
      card : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_cards_card_shipping_return(card: card, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_RETURN_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_cards_card_shipping_return(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_return ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_RETURN_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/cards/{card}/shipping/return".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def post_test_helpers_issuing_cards_card_shipping_ship(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_test_helpers_issuing_cards_card_shipping_ship_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;shipped&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_test_helpers_issuing_cards_card_shipping_ship_with_http_info(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_cards_card_shipping_ship(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_cards_card_shipping_ship\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;shipped&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_cards_card_shipping_ship(
      *,
      card : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_cards_card_shipping_ship(card: card, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_SHIP_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_cards_card_shipping_ship(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_ship ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_SHIP_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/cards/{card}/shipping/ship".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_ship",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingPersonalizationDesign]
    def post_test_helpers_issuing_personalization_designs_personalization_design_activate(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingPersonalizationDesign
      data, _status_code, _headers = post_test_helpers_issuing_personalization_designs_personalization_design_activate_with_http_info(personalization_design: personalization_design, expand: expand)
      data
    end

    # &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingPersonalizationDesign, Integer, Hash)] Stripe::IssuingPersonalizationDesign, response status code and response headers
    def post_test_helpers_issuing_personalization_designs_personalization_design_activate_with_http_info(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingPersonalizationDesign, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_activate(personalization_design: personalization_design, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_personalization_designs_personalization_design_activate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPersonalizationDesign.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_personalization_designs_personalization_design_activate(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_activate(personalization_design: personalization_design, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_ACTIVATE_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_activate(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_personalization_designs_personalization_design_activate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"personalization_design\" is required and cannot be null") if personalization_design.nil?
        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, POST_TEST_HELPERS_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_ACTIVATE_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate".sub("{" + "personalization_design" + "}", URI.encode_path(personalization_design.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_personalization_designs_personalization_design_activate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingPersonalizationDesign]
    def post_test_helpers_issuing_personalization_designs_personalization_design_deactivate(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingPersonalizationDesign
      data, _status_code, _headers = post_test_helpers_issuing_personalization_designs_personalization_design_deactivate_with_http_info(personalization_design: personalization_design, expand: expand)
      data
    end

    # &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;inactive&lt;/code&gt;.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingPersonalizationDesign, Integer, Hash)] Stripe::IssuingPersonalizationDesign, response status code and response headers
    def post_test_helpers_issuing_personalization_designs_personalization_design_deactivate_with_http_info(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingPersonalizationDesign, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_deactivate(personalization_design: personalization_design, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_personalization_designs_personalization_design_deactivate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPersonalizationDesign.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;inactive&lt;/code&gt;.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_personalization_designs_personalization_design_deactivate(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_deactivate(personalization_design: personalization_design, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_DEACTIVATE_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_deactivate(
      *,
      personalization_design : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_personalization_designs_personalization_design_deactivate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"personalization_design\" is required and cannot be null") if personalization_design.nil?
        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, POST_TEST_HELPERS_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_DEACTIVATE_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate".sub("{" + "personalization_design" + "}", URI.encode_path(personalization_design.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_personalization_designs_personalization_design_deactivate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
    # @required @param personalization_design [String?]
    # @required @param rejection_reasons [Stripe::RejectionReasonsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingPersonalizationDesign]
    def post_test_helpers_issuing_personalization_designs_personalization_design_reject(
      *,
      personalization_design : String? = nil,
      rejection_reasons : Stripe::RejectionReasonsParam? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingPersonalizationDesign
      data, _status_code, _headers = post_test_helpers_issuing_personalization_designs_personalization_design_reject_with_http_info(personalization_design: personalization_design, rejection_reasons: rejection_reasons, expand: expand)
      data
    end

    # &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;rejected&lt;/code&gt;.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @required @param rejection_reasons [Stripe::RejectionReasonsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingPersonalizationDesign, Integer, Hash)] Stripe::IssuingPersonalizationDesign, response status code and response headers
    def post_test_helpers_issuing_personalization_designs_personalization_design_reject_with_http_info(
      *,
      personalization_design : String? = nil,
      rejection_reasons : Stripe::RejectionReasonsParam? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingPersonalizationDesign, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_reject(personalization_design: personalization_design, rejection_reasons: rejection_reasons, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_personalization_designs_personalization_design_reject\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPersonalizationDesign.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;rejected&lt;/code&gt;.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @required @param rejection_reasons [Stripe::RejectionReasonsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_personalization_designs_personalization_design_reject(
      *,
      personalization_design : String? = nil,
      rejection_reasons : Stripe::RejectionReasonsParam? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_reject(personalization_design: personalization_design, rejection_reasons: rejection_reasons, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_REJECT_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_personalization_designs_personalization_design_reject(
      *,
      personalization_design : String? = nil,
      rejection_reasons : Stripe::RejectionReasonsParam? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_personalization_designs_personalization_design_reject ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"personalization_design\" is required and cannot be null") if personalization_design.nil?
        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, POST_TEST_HELPERS_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_REJECT_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
        raise ArgumentError.new("\"rejection_reasons\" is required and cannot be null") if rejection_reasons.nil?
        unless (_rejection_reasons = rejection_reasons).nil?
          _rejection_reasons.validate if _rejection_reasons.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject".sub("{" + "personalization_design" + "}", URI.encode_path(personalization_design.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(rejection_reasons.to_json), "rejection_reasons")) if !rejection_reasons.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_personalization_designs_personalization_design_reject",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
    # @required @param amount [Int32?] The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this transaction.
    # @optional @param currency [String?] The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return [Stripe::IssuingTransaction]
    def post_test_helpers_issuing_transactions_create_force_capture(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Stripe::IssuingTransaction
      data, _status_code, _headers = post_test_helpers_issuing_transactions_create_force_capture_with_http_info(amount: amount, card: card, currency: currency, expand: expand, merchant_data: merchant_data, purchase_details: purchase_details)
      data
    end

    # &lt;p&gt;Allows the user to capture an arbitrary amount, also known as a forced capture.&lt;/p&gt;
    # @required @param amount [Int32?] The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this transaction.
    # @optional @param currency [String?] The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return [Tuple(Stripe::IssuingTransaction, Integer, Hash)] Stripe::IssuingTransaction, response status code and response headers
    def post_test_helpers_issuing_transactions_create_force_capture_with_http_info(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Tuple(Stripe::IssuingTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_transactions_create_force_capture(amount: amount, card: card, currency: currency, expand: expand, merchant_data: merchant_data, purchase_details: purchase_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_transactions_create_force_capture\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Allows the user to capture an arbitrary amount, also known as a forced capture.&lt;/p&gt;
    # @required @param amount [Int32?] The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this transaction.
    # @optional @param currency [String?] The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return nil
    def post_test_helpers_issuing_transactions_create_force_capture(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_transactions_create_force_capture(amount: amount, card: card, currency: currency, expand: expand, merchant_data: merchant_data, purchase_details: purchase_details).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_TRANSACTIONS_CREATE_FORCE_CAPTURE_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_transactions_create_force_capture(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_transactions_create_force_capture ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_TRANSACTIONS_CREATE_FORCE_CAPTURE_MAX_LENGTH_FOR_CARD)
        end

        unless (_merchant_data = merchant_data).nil?
          _merchant_data.validate if _merchant_data.is_a?(OpenApi::Validatable)
        end
        unless (_purchase_details = purchase_details).nil?
          _purchase_details.validate if _purchase_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/transactions/create_force_capture"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("card", card.to_s) if !card.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(merchant_data.to_json), "merchant_data")) if !merchant_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(purchase_details.to_json), "purchase_details")) if !purchase_details.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_transactions_create_force_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
    # @required @param amount [Int32?] The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this unlinked refund transaction.
    # @optional @param currency [String?] The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return [Stripe::IssuingTransaction]
    def post_test_helpers_issuing_transactions_create_unlinked_refund(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Stripe::IssuingTransaction
      data, _status_code, _headers = post_test_helpers_issuing_transactions_create_unlinked_refund_with_http_info(amount: amount, card: card, currency: currency, expand: expand, merchant_data: merchant_data, purchase_details: purchase_details)
      data
    end

    # &lt;p&gt;Allows the user to refund an arbitrary amount, also known as a unlinked refund.&lt;/p&gt;
    # @required @param amount [Int32?] The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this unlinked refund transaction.
    # @optional @param currency [String?] The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return [Tuple(Stripe::IssuingTransaction, Integer, Hash)] Stripe::IssuingTransaction, response status code and response headers
    def post_test_helpers_issuing_transactions_create_unlinked_refund_with_http_info(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Tuple(Stripe::IssuingTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_transactions_create_unlinked_refund(amount: amount, card: card, currency: currency, expand: expand, merchant_data: merchant_data, purchase_details: purchase_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_transactions_create_unlinked_refund\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Allows the user to refund an arbitrary amount, also known as a unlinked refund.&lt;/p&gt;
    # @required @param amount [Int32?] The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @required @param card [String?] Card associated with this unlinked refund transaction.
    # @optional @param currency [String?] The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param merchant_data [Stripe::MerchantDataSpecs?]
    # @optional @param purchase_details [Stripe::PurchaseDetailsSpecs?]
    # @return nil
    def post_test_helpers_issuing_transactions_create_unlinked_refund(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_transactions_create_unlinked_refund(amount: amount, card: card, currency: currency, expand: expand, merchant_data: merchant_data, purchase_details: purchase_details).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_TRANSACTIONS_CREATE_UNLINKED_REFUND_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_transactions_create_unlinked_refund(
      *,
      amount : Int64? = nil,
      card : String? = nil,
      currency : String? = nil,
      expand : Array(String)? = nil,
      merchant_data : Stripe::MerchantDataSpecs? = nil,
      purchase_details : Stripe::PurchaseDetailsSpecs? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_transactions_create_unlinked_refund ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_TRANSACTIONS_CREATE_UNLINKED_REFUND_MAX_LENGTH_FOR_CARD)
        end

        unless (_merchant_data = merchant_data).nil?
          _merchant_data.validate if _merchant_data.is_a?(OpenApi::Validatable)
        end
        unless (_purchase_details = purchase_details).nil?
          _purchase_details.validate if _purchase_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/transactions/create_unlinked_refund"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("card", card.to_s) if !card.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(merchant_data.to_json), "merchant_data")) if !merchant_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(purchase_details.to_json), "purchase_details")) if !purchase_details.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_transactions_create_unlinked_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Refund a test-mode Transaction.</p>
    # @required @param transaction [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param refund_amount [Int32?] The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @return [Stripe::IssuingTransaction]
    def post_test_helpers_issuing_transactions_transaction_refund(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      refund_amount : Int64? = nil
    ) : Stripe::IssuingTransaction
      data, _status_code, _headers = post_test_helpers_issuing_transactions_transaction_refund_with_http_info(transaction: transaction, expand: expand, refund_amount: refund_amount)
      data
    end

    # &lt;p&gt;Refund a test-mode Transaction.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param refund_amount [Int32?] The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @return [Tuple(Stripe::IssuingTransaction, Integer, Hash)] Stripe::IssuingTransaction, response status code and response headers
    def post_test_helpers_issuing_transactions_transaction_refund_with_http_info(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      refund_amount : Int64? = nil
    ) : Tuple(Stripe::IssuingTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_transactions_transaction_refund(transaction: transaction, expand: expand, refund_amount: refund_amount)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_transactions_transaction_refund\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Refund a test-mode Transaction.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param refund_amount [Int32?] The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @return nil
    def post_test_helpers_issuing_transactions_transaction_refund(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      refund_amount : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_transactions_transaction_refund(transaction: transaction, expand: expand, refund_amount: refund_amount).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_TRANSACTIONS_TRANSACTION_REFUND_MAX_LENGTH_FOR_TRANSACTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_transactions_transaction_refund(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      refund_amount : Int64? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_transactions_transaction_refund ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transaction\" is required and cannot be null") if transaction.nil?
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, POST_TEST_HELPERS_ISSUING_TRANSACTIONS_TRANSACTION_REFUND_MAX_LENGTH_FOR_TRANSACTION)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/transactions/{transaction}/refund".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("refund_amount", refund_amount.to_s) if !refund_amount.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_transactions_transaction_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
    # @required @param reader [String?]
    # @optional @param amount_tip [Int32?] Simulated on-reader tip amount.
    # @optional @param card_present [Stripe::CardPresent?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param interac_present [Stripe::InteracPresent?]
    # @optional @param _type [String?] Simulated payment type.
    # @return [Stripe::TerminalReader]
    def post_test_helpers_terminal_readers_reader_present_payment_method(
      *,
      reader : String? = nil,
      amount_tip : Int64? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      interac_present : Stripe::InteracPresent? = nil,
      _type : String? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_test_helpers_terminal_readers_reader_present_payment_method_with_http_info(reader: reader, amount_tip: amount_tip, card_present: card_present, expand: expand, interac_present: interac_present, _type: _type)
      data
    end

    # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param amount_tip [Int32?] Simulated on-reader tip amount.
    # @optional @param card_present [Stripe::CardPresent?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param interac_present [Stripe::InteracPresent?]
    # @optional @param _type [String?] Simulated payment type.
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_test_helpers_terminal_readers_reader_present_payment_method_with_http_info(
      *,
      reader : String? = nil,
      amount_tip : Int64? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      interac_present : Stripe::InteracPresent? = nil,
      _type : String? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(reader: reader, amount_tip: amount_tip, card_present: card_present, expand: expand, interac_present: interac_present, _type: _type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_terminal_readers_reader_present_payment_method\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param amount_tip [Int32?] Simulated on-reader tip amount.
    # @optional @param card_present [Stripe::CardPresent?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param interac_present [Stripe::InteracPresent?]
    # @optional @param _type [String?] Simulated payment type.
    # @return nil
    def post_test_helpers_terminal_readers_reader_present_payment_method(
      *,
      reader : String? = nil,
      amount_tip : Int64? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      interac_present : Stripe::InteracPresent? = nil,
      _type : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(reader: reader, amount_tip: amount_tip, card_present: card_present, expand: expand, interac_present: interac_present, _type: _type).execute(&block)
    end

    POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_MAX_LENGTH_FOR_READER  = 5000
    POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_VALID_VALUES_FOR__TYPE = String.static_array("card_present", "interac_present")

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(
      *,
      reader : String? = nil,
      amount_tip : Int64? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      interac_present : Stripe::InteracPresent? = nil,
      _type : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_terminal_readers_reader_present_payment_method ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_MAX_LENGTH_FOR_READER)
        end

        unless (_card_present = card_present).nil?
          _card_present.validate if _card_present.is_a?(OpenApi::Validatable)
        end

        unless (_interac_present = interac_present).nil?
          _interac_present.validate if _interac_present.is_a?(OpenApi::Validatable)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_VALID_VALUES_FOR__TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/terminal/readers/{reader}/present_payment_method".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount_tip", amount_tip.to_s) if !amount_tip.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(card_present.to_json), "card_present")) if !card_present.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(interac_present.to_json), "interac_present")) if !interac_present.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_terminal_readers_reader_present_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new test clock that can be attached to new customers and quotes.</p>
    # @required @param frozen_time [Int32?] The initial frozen time for this test clock.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The name for this test clock.
    # @return [Stripe::TestHelpersTestClock]
    def post_test_helpers_test_clocks(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Stripe::TestHelpersTestClock
      data, _status_code, _headers = post_test_helpers_test_clocks_with_http_info(frozen_time: frozen_time, expand: expand, name: name)
      data
    end

    # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
    # @required @param frozen_time [Int32?] The initial frozen time for this test clock.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The name for this test clock.
    # @return [Tuple(Stripe::TestHelpersTestClock, Integer, Hash)] Stripe::TestHelpersTestClock, response status code and response headers
    def post_test_helpers_test_clocks_with_http_info(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Tuple(Stripe::TestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_test_clocks(frozen_time: frozen_time, expand: expand, name: name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_test_clocks\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
    # @required @param frozen_time [Int32?] The initial frozen time for this test clock.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The name for this test clock.
    # @return nil
    def post_test_helpers_test_clocks(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_test_clocks(frozen_time: frozen_time, expand: expand, name: name).execute(&block)
    end

    POST_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_NAME = 300

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_test_clocks(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_test_clocks ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"frozen_time\" is required and cannot be null") if frozen_time.nil?

        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("frozen_time", frozen_time.to_s) if !frozen_time.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_test_clocks",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
    # @required @param test_clock [String?]
    # @required @param frozen_time [Int32?] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TestHelpersTestClock]
    def post_test_helpers_test_clocks_test_clock_advance(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TestHelpersTestClock
      data, _status_code, _headers = post_test_helpers_test_clocks_test_clock_advance_with_http_info(test_clock: test_clock, frozen_time: frozen_time, expand: expand)
      data
    end

    # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @required @param frozen_time [Int32?] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TestHelpersTestClock, Integer, Hash)] Stripe::TestHelpersTestClock, response status code and response headers
    def post_test_helpers_test_clocks_test_clock_advance_with_http_info(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(test_clock: test_clock, frozen_time: frozen_time, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_test_clocks_test_clock_advance\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @required @param frozen_time [Int32?] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_test_clocks_test_clock_advance(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(test_clock: test_clock, frozen_time: frozen_time, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_ADVANCE_MAX_LENGTH_FOR_TEST_CLOCK = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_test_clocks_test_clock_advance ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"test_clock\" is required and cannot be null") if test_clock.nil?
        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, POST_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_ADVANCE_MAX_LENGTH_FOR_TEST_CLOCK)
        end
        raise ArgumentError.new("\"frozen_time\" is required and cannot be null") if frozen_time.nil?
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}/advance".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("frozen_time", frozen_time.to_s) if !frozen_time.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_test_clocks_test_clock_advance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param failure_details [Stripe::FailureDetailsParams?]
    # @return [Stripe::TreasuryInboundTransfer]
    def post_test_helpers_treasury_inbound_transfers_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil
    ) : Stripe::TreasuryInboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_inbound_transfers_id_fail_with_http_info(id: id, expand: expand, failure_details: failure_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param failure_details [Stripe::FailureDetailsParams?]
    # @return [Tuple(Stripe::TreasuryInboundTransfer, Integer, Hash)] Stripe::TreasuryInboundTransfer, response status code and response headers
    def post_test_helpers_treasury_inbound_transfers_id_fail_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil
    ) : Tuple(Stripe::TreasuryInboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(id: id, expand: expand, failure_details: failure_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_inbound_transfers_id_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param failure_details [Stripe::FailureDetailsParams?]
    # @return nil
    def post_test_helpers_treasury_inbound_transfers_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(id: id, expand: expand, failure_details: failure_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_FAIL_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_fail ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_FAIL_MAX_LENGTH_FOR_ID)
        end

        unless (_failure_details = failure_details).nil?
          _failure_details.validate if _failure_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/inbound_transfers/{id}/fail".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(failure_details.to_json), "failure_details")) if !failure_details.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryInboundTransfer]
    def post_test_helpers_treasury_inbound_transfers_id_succeed(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryInboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_inbound_transfers_id_succeed_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryInboundTransfer, Integer, Hash)] Stripe::TreasuryInboundTransfer, response status code and response headers
    def post_test_helpers_treasury_inbound_transfers_id_succeed_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryInboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_inbound_transfers_id_succeed\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_inbound_transfers_id_succeed(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(id: id, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_SUCCEED_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_succeed ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_SUCCEED_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_succeed",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_fail_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_fail_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_payments_id_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(id: id, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_FAIL_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_fail ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_FAIL_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/fail".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_post(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_post_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_post_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_payments_id_post\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_post(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(id: id, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_POST_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_post ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_POST_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/post".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_post",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Stripe::TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_return(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_return_with_http_info(id: id, expand: expand, returned_details: returned_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_return_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(id: id, expand: expand, returned_details: returned_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_payments_id_return\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_return(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(id: id, expand: expand, returned_details: returned_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_RETURN_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_return ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_RETURN_MAX_LENGTH_FOR_ID)
        end

        unless (_returned_details = returned_details).nil?
          _returned_details.validate if _returned_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/return".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(returned_details.to_json), "returned_details")) if !returned_details.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail_with_http_info(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(outbound_transfer: outbound_transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_FAIL_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_FAIL_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_post_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post_with_http_info(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(outbound_transfer: outbound_transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_post\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_POST_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_post ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_POST_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_post",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_return_with_http_info(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return_with_http_info(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_return\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_RETURN_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_return ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_RETURN_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end

        unless (_returned_details = returned_details).nil?
          _returned_details.validate if _returned_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(returned_details.to_json), "returned_details")) if !returned_details.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param network [String?] Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Stripe::TreasuryReceivedCredit]
    def post_test_helpers_treasury_received_credits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Stripe::TreasuryReceivedCredit
      data, _status_code, _headers = post_test_helpers_treasury_received_credits_with_http_info(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)
      data
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param network [String?] Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Tuple(Stripe::TreasuryReceivedCredit, Integer, Hash)] Stripe::TreasuryReceivedCredit, response status code and response headers
    def post_test_helpers_treasury_received_credits_with_http_info(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Tuple(Stripe::TreasuryReceivedCredit, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_received_credits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_received_credits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedCredit.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param network [String?] Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return nil
    def post_test_helpers_treasury_received_credits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_received_credits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_VALID_VALUES_FOR_NETWORK   = String.static_array("ach", "us_domestic_wire")
    POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_DESCRIPTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_received_credits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_received_credits ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        raise ArgumentError.new("\"network\" is required and cannot be null") if network.nil?
        unless (_network = network).nil?
          OpenApi::EnumValidator.validate("network", _network, POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_VALID_VALUES_FOR_NETWORK)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_initiating_payment_method_details = initiating_payment_method_details).nil?
          _initiating_payment_method_details.validate if _initiating_payment_method_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/received_credits"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("financial_account", financial_account.to_s) if !financial_account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(initiating_payment_method_details.to_json), "initiating_payment_method_details")) if !initiating_payment_method_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("network", network.to_s) if !network.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_received_credits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @required @param network [String?] Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Stripe::TreasuryReceivedDebit]
    def post_test_helpers_treasury_received_debits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Stripe::TreasuryReceivedDebit
      data, _status_code, _headers = post_test_helpers_treasury_received_debits_with_http_info(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)
      data
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @required @param network [String?] Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Tuple(Stripe::TreasuryReceivedDebit, Integer, Hash)] Stripe::TreasuryReceivedDebit, response status code and response headers
    def post_test_helpers_treasury_received_debits_with_http_info(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Tuple(Stripe::TreasuryReceivedDebit, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_received_debits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_received_debits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedDebit.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @required @param network [String?] Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return nil
    def post_test_helpers_treasury_received_debits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_received_debits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_VALID_VALUES_FOR_NETWORK   = String.static_array("ach")
    POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_DESCRIPTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_received_debits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_received_debits ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        raise ArgumentError.new("\"network\" is required and cannot be null") if network.nil?
        unless (_network = network).nil?
          OpenApi::EnumValidator.validate("network", _network, POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_VALID_VALUES_FOR_NETWORK)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_initiating_payment_method_details = initiating_payment_method_details).nil?
          _initiating_payment_method_details.validate if _initiating_payment_method_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/received_debits"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("financial_account", financial_account.to_s) if !financial_account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(initiating_payment_method_details.to_json), "initiating_payment_method_details")) if !initiating_payment_method_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("network", network.to_s) if !network.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_received_debits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
