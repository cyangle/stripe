#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class TestHelpersApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Deletes a test clock.</p>
    # @required @param test_clock [String?]
    # @return [Stripe::DeletedTestHelpersTestClock]
    def delete_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil
    ) : Stripe::DeletedTestHelpersTestClock
      data, _status_code, _headers = delete_test_helpers_test_clocks_test_clock_with_http_info(test_clock: test_clock)
      data
    end

    # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @return [Tuple(Stripe::DeletedTestHelpersTestClock, Integer, Hash)] Stripe::DeletedTestHelpersTestClock, response status code and response headers
    def delete_test_helpers_test_clocks_test_clock_with_http_info(
      *,
      test_clock : String? = nil
    ) : Tuple(Stripe::DeletedTestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_test_helpers_test_clocks_test_clock(test_clock: test_clock)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#delete_test_helpers_test_clocks_test_clock\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @return nil
    def delete_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_test_helpers_test_clocks_test_clock(test_clock: test_clock).execute(&block)
    end

    DELETE_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK = 5000

    # @return Crest::Request
    def build_api_request_for_delete_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.delete_test_helpers_test_clocks_test_clock ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"test_clock\" is required and cannot be null") if test_clock.nil?
        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, DELETE_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TestHelpersApi.delete_test_helpers_test_clocks_test_clock",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your test clocks.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingClocksResourceBillingClockList]
    def get_test_helpers_test_clocks(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::BillingClocksResourceBillingClockList
      data, _status_code, _headers = get_test_helpers_test_clocks_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingClocksResourceBillingClockList, Integer, Hash)] Stripe::BillingClocksResourceBillingClockList, response status code and response headers
    def get_test_helpers_test_clocks_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::BillingClocksResourceBillingClockList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_test_helpers_test_clocks(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#get_test_helpers_test_clocks\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingClocksResourceBillingClockList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_test_helpers_test_clocks(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_test_helpers_test_clocks(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_test_helpers_test_clocks(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.get_test_helpers_test_clocks ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TestHelpersApi.get_test_helpers_test_clocks",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a test clock.</p>
    # @required @param test_clock [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TestHelpersTestClock]
    def get_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TestHelpersTestClock
      data, _status_code, _headers = get_test_helpers_test_clocks_test_clock_with_http_info(test_clock: test_clock, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TestHelpersTestClock, Integer, Hash)] Stripe::TestHelpersTestClock, response status code and response headers
    def get_test_helpers_test_clocks_test_clock_with_http_info(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_test_helpers_test_clocks_test_clock(test_clock: test_clock, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#get_test_helpers_test_clocks_test_clock\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_test_helpers_test_clocks_test_clock(test_clock: test_clock, expand: expand).execute(&block)
    end

    GET_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK = 5000

    # @return Crest::Request
    def build_api_request_for_get_test_helpers_test_clocks_test_clock(
      *,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.get_test_helpers_test_clocks_test_clock ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"test_clock\" is required and cannot be null") if test_clock.nil?
        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, GET_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_MAX_LENGTH_FOR_TEST_CLOCK)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TestHelpersApi.get_test_helpers_test_clocks_test_clock",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def post_test_helpers_issuing_cards_card_shipping_deliver(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_test_helpers_issuing_cards_card_shipping_deliver_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;delivered&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_test_helpers_issuing_cards_card_shipping_deliver_with_http_info(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_cards_card_shipping_deliver(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_cards_card_shipping_deliver\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;delivered&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_cards_card_shipping_deliver(
      *,
      card : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_cards_card_shipping_deliver(card: card, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_DELIVER_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_cards_card_shipping_deliver(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_deliver ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_DELIVER_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/cards/{card}/shipping/deliver".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_deliver",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def post_test_helpers_issuing_cards_card_shipping_fail(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_test_helpers_issuing_cards_card_shipping_fail_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;failure&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_test_helpers_issuing_cards_card_shipping_fail_with_http_info(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_cards_card_shipping_fail(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_cards_card_shipping_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;failure&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_cards_card_shipping_fail(
      *,
      card : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_cards_card_shipping_fail(card: card, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_FAIL_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_cards_card_shipping_fail(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_fail ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_FAIL_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/cards/{card}/shipping/fail".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def post_test_helpers_issuing_cards_card_shipping_return(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_test_helpers_issuing_cards_card_shipping_return_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;returned&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_test_helpers_issuing_cards_card_shipping_return_with_http_info(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_cards_card_shipping_return(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_cards_card_shipping_return\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;returned&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_cards_card_shipping_return(
      *,
      card : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_cards_card_shipping_return(card: card, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_RETURN_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_cards_card_shipping_return(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_return ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_RETURN_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/cards/{card}/shipping/return".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def post_test_helpers_issuing_cards_card_shipping_ship(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_test_helpers_issuing_cards_card_shipping_ship_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;shipped&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_test_helpers_issuing_cards_card_shipping_ship_with_http_info(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_issuing_cards_card_shipping_ship(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_issuing_cards_card_shipping_ship\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;shipped&lt;/code&gt;.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_issuing_cards_card_shipping_ship(
      *,
      card : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_issuing_cards_card_shipping_ship(card: card, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_SHIP_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_issuing_cards_card_shipping_ship(
      *,
      card : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_ship ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_TEST_HELPERS_ISSUING_CARDS_CARD_SHIPPING_SHIP_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/issuing/cards/{card}/shipping/ship".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_issuing_cards_card_shipping_ship",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
    # @required @param reader [String?]
    # @optional @param card_present [Stripe::CardPresent?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param _type [String?] Simulated payment type
    # @return [Stripe::TerminalReader]
    def post_test_helpers_terminal_readers_reader_present_payment_method(
      *,
      reader : String? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      _type : String? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_test_helpers_terminal_readers_reader_present_payment_method_with_http_info(reader: reader, card_present: card_present, expand: expand, _type: _type)
      data
    end

    # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param card_present [Stripe::CardPresent?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param _type [String?] Simulated payment type
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_test_helpers_terminal_readers_reader_present_payment_method_with_http_info(
      *,
      reader : String? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      _type : String? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(reader: reader, card_present: card_present, expand: expand, _type: _type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_terminal_readers_reader_present_payment_method\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param card_present [Stripe::CardPresent?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param _type [String?] Simulated payment type
    # @return nil
    def post_test_helpers_terminal_readers_reader_present_payment_method(
      *,
      reader : String? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      _type : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(reader: reader, card_present: card_present, expand: expand, _type: _type).execute(&block)
    end

    POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_MAX_LENGTH_FOR_READER  = 5000
    POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_VALID_VALUES_FOR__TYPE = String.static_array("card_present")

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(
      *,
      reader : String? = nil,
      card_present : Stripe::CardPresent? = nil,
      expand : Array(String)? = nil,
      _type : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_terminal_readers_reader_present_payment_method ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_MAX_LENGTH_FOR_READER)
        end
        unless (_card_present = card_present).nil?
          _card_present.validate if _card_present.is_a?(OpenApi::Validatable)
        end

        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_TEST_HELPERS_TERMINAL_READERS_READER_PRESENT_PAYMENT_METHOD_VALID_VALUES_FOR__TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/terminal/readers/{reader}/present_payment_method".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["card_present"] = card_present.to_s if !card_present.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_terminal_readers_reader_present_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new test clock that can be attached to new customers and quotes.</p>
    # @required @param frozen_time [Int32?] The initial frozen time for this test clock.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The name for this test clock.
    # @return [Stripe::TestHelpersTestClock]
    def post_test_helpers_test_clocks(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Stripe::TestHelpersTestClock
      data, _status_code, _headers = post_test_helpers_test_clocks_with_http_info(frozen_time: frozen_time, expand: expand, name: name)
      data
    end

    # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
    # @required @param frozen_time [Int32?] The initial frozen time for this test clock.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The name for this test clock.
    # @return [Tuple(Stripe::TestHelpersTestClock, Integer, Hash)] Stripe::TestHelpersTestClock, response status code and response headers
    def post_test_helpers_test_clocks_with_http_info(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Tuple(Stripe::TestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_test_clocks(frozen_time: frozen_time, expand: expand, name: name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_test_clocks\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
    # @required @param frozen_time [Int32?] The initial frozen time for this test clock.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The name for this test clock.
    # @return nil
    def post_test_helpers_test_clocks(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_test_clocks(frozen_time: frozen_time, expand: expand, name: name).execute(&block)
    end

    POST_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_NAME = 300

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_test_clocks(
      *,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_test_clocks ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"frozen_time\" is required and cannot be null") if frozen_time.nil?

        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_TEST_HELPERS_TEST_CLOCKS_MAX_LENGTH_FOR_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["frozen_time"] = frozen_time.to_s if !frozen_time.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_test_clocks",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
    # @required @param test_clock [String?]
    # @required @param frozen_time [Int32?] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TestHelpersTestClock]
    def post_test_helpers_test_clocks_test_clock_advance(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TestHelpersTestClock
      data, _status_code, _headers = post_test_helpers_test_clocks_test_clock_advance_with_http_info(test_clock: test_clock, frozen_time: frozen_time, expand: expand)
      data
    end

    # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @required @param frozen_time [Int32?] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TestHelpersTestClock, Integer, Hash)] Stripe::TestHelpersTestClock, response status code and response headers
    def post_test_helpers_test_clocks_test_clock_advance_with_http_info(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TestHelpersTestClock, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(test_clock: test_clock, frozen_time: frozen_time, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_test_clocks_test_clock_advance\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TestHelpersTestClock.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
    # @required @param test_clock [String?]
    # @required @param frozen_time [Int32?] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_test_clocks_test_clock_advance(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(test_clock: test_clock, frozen_time: frozen_time, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_ADVANCE_MAX_LENGTH_FOR_TEST_CLOCK = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(
      *,
      test_clock : String? = nil,
      frozen_time : Int64? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_test_clocks_test_clock_advance ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"test_clock\" is required and cannot be null") if test_clock.nil?
        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, POST_TEST_HELPERS_TEST_CLOCKS_TEST_CLOCK_ADVANCE_MAX_LENGTH_FOR_TEST_CLOCK)
        end
        raise ArgumentError.new("\"frozen_time\" is required and cannot be null") if frozen_time.nil?
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}/advance".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["frozen_time"] = frozen_time.to_s if !frozen_time.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_test_clocks_test_clock_advance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param failure_details [Stripe::FailureDetailsParams?]
    # @return [Stripe::TreasuryInboundTransfer]
    def post_test_helpers_treasury_inbound_transfers_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil
    ) : Stripe::TreasuryInboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_inbound_transfers_id_fail_with_http_info(id: id, expand: expand, failure_details: failure_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param failure_details [Stripe::FailureDetailsParams?]
    # @return [Tuple(Stripe::TreasuryInboundTransfer, Integer, Hash)] Stripe::TreasuryInboundTransfer, response status code and response headers
    def post_test_helpers_treasury_inbound_transfers_id_fail_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil
    ) : Tuple(Stripe::TreasuryInboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(id: id, expand: expand, failure_details: failure_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_inbound_transfers_id_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param failure_details [Stripe::FailureDetailsParams?]
    # @return nil
    def post_test_helpers_treasury_inbound_transfers_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(id: id, expand: expand, failure_details: failure_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_FAIL_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      failure_details : Stripe::FailureDetailsParams? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_fail ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_FAIL_MAX_LENGTH_FOR_ID)
        end

        unless (_failure_details = failure_details).nil?
          _failure_details.validate if _failure_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/inbound_transfers/{id}/fail".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["failure_details"] = failure_details.to_s if !failure_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryInboundTransfer]
    def post_test_helpers_treasury_inbound_transfers_id_succeed(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryInboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_inbound_transfers_id_succeed_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryInboundTransfer, Integer, Hash)] Stripe::TreasuryInboundTransfer, response status code and response headers
    def post_test_helpers_treasury_inbound_transfers_id_succeed_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryInboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_inbound_transfers_id_succeed\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryInboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_inbound_transfers_id_succeed(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(id: id, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_SUCCEED_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_succeed ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_INBOUND_TRANSFERS_ID_SUCCEED_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_inbound_transfers_id_succeed",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_fail_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_fail_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_payments_id_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(id: id, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_FAIL_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_fail ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_FAIL_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/fail".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_post(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_post_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_post_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_payments_id_post\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_post(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(id: id, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_POST_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_post ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_POST_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/post".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_post",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Stripe::TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_return(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Stripe::TreasuryOutboundPayment
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_return_with_http_info(id: id, expand: expand, returned_details: returned_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Tuple(Stripe::TreasuryOutboundPayment, Integer, Hash)] Stripe::TreasuryOutboundPayment, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_return_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Tuple(Stripe::TreasuryOutboundPayment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(id: id, expand: expand, returned_details: returned_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_payments_id_return\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundPayment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_return(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(id: id, expand: expand, returned_details: returned_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_RETURN_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_return ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_PAYMENTS_ID_RETURN_MAX_LENGTH_FOR_ID)
        end

        unless (_returned_details = returned_details).nil?
          _returned_details.validate if _returned_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/return".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["returned_details"] = returned_details.to_s if !returned_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_payments_id_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail_with_http_info(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(outbound_transfer: outbound_transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_FAIL_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_FAIL_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_post_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post_with_http_info(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(outbound_transfer: outbound_transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_post\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_POST_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_post ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_POST_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_post",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Stripe::TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Stripe::TreasuryOutboundTransfer
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_return_with_http_info(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return [Tuple(Stripe::TreasuryOutboundTransfer, Integer, Hash)] Stripe::TreasuryOutboundTransfer, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return_with_http_info(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Tuple(Stripe::TreasuryOutboundTransfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_return\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryOutboundTransfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @required @param outbound_transfer [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param returned_details [Stripe::ReturnedDetailsParams?]
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_RETURN_MAX_LENGTH_FOR_OUTBOUND_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(
      *,
      outbound_transfer : String? = nil,
      expand : Array(String)? = nil,
      returned_details : Stripe::ReturnedDetailsParams? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_return ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"outbound_transfer\" is required and cannot be null") if outbound_transfer.nil?
        unless (_outbound_transfer = outbound_transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("outbound_transfer", outbound_transfer.to_s.size, POST_TEST_HELPERS_TREASURY_OUTBOUND_TRANSFERS_OUTBOUND_TRANSFER_RETURN_MAX_LENGTH_FOR_OUTBOUND_TRANSFER)
        end

        unless (_returned_details = returned_details).nil?
          _returned_details.validate if _returned_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["returned_details"] = returned_details.to_s if !returned_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param network [String?] The rails used for the object.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Stripe::TreasuryReceivedCredit]
    def post_test_helpers_treasury_received_credits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Stripe::TreasuryReceivedCredit
      data, _status_code, _headers = post_test_helpers_treasury_received_credits_with_http_info(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)
      data
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param network [String?] The rails used for the object.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Tuple(Stripe::TreasuryReceivedCredit, Integer, Hash)] Stripe::TreasuryReceivedCredit, response status code and response headers
    def post_test_helpers_treasury_received_credits_with_http_info(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Tuple(Stripe::TreasuryReceivedCredit, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_received_credits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_received_credits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedCredit.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to send funds to.
    # @required @param network [String?] The rails used for the object.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return nil
    def post_test_helpers_treasury_received_credits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_received_credits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_VALID_VALUES_FOR_NETWORK   = String.static_array("ach", "us_domestic_wire")
    POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_DESCRIPTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_received_credits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_received_credits ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        raise ArgumentError.new("\"network\" is required and cannot be null") if network.nil?
        unless (_network = network).nil?
          OpenApi::EnumValidator.validate("network", _network, POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_VALID_VALUES_FOR_NETWORK)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TEST_HELPERS_TREASURY_RECEIVED_CREDITS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_initiating_payment_method_details = initiating_payment_method_details).nil?
          _initiating_payment_method_details.validate if _initiating_payment_method_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/received_credits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["initiating_payment_method_details"] = initiating_payment_method_details.to_s if !initiating_payment_method_details.nil?
      form_params["network"] = network.to_s if !network.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_received_credits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @required @param network [String?] The rails used for the object.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Stripe::TreasuryReceivedDebit]
    def post_test_helpers_treasury_received_debits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Stripe::TreasuryReceivedDebit
      data, _status_code, _headers = post_test_helpers_treasury_received_debits_with_http_info(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)
      data
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @required @param network [String?] The rails used for the object.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return [Tuple(Stripe::TreasuryReceivedDebit, Integer, Hash)] Stripe::TreasuryReceivedDebit, response status code and response headers
    def post_test_helpers_treasury_received_debits_with_http_info(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Tuple(Stripe::TreasuryReceivedDebit, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_test_helpers_treasury_received_debits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TestHelpersApi#post_test_helpers_treasury_received_debits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TreasuryReceivedDebit.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
    # @required @param amount [Int32?] Amount (in cents) to be transferred.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param financial_account [String?] The FinancialAccount to pull funds from.
    # @required @param network [String?] The rails used for the object.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param initiating_payment_method_details [Stripe::SourceParams?]
    # @return nil
    def post_test_helpers_treasury_received_debits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_test_helpers_treasury_received_debits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details).execute(&block)
    end

    POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_VALID_VALUES_FOR_NETWORK   = String.static_array("ach")
    POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_DESCRIPTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_received_debits(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      financial_account : String? = nil,
      network : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      initiating_payment_method_details : Stripe::SourceParams? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TestHelpersApi.post_test_helpers_treasury_received_debits ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"financial_account\" is required and cannot be null") if financial_account.nil?

        raise ArgumentError.new("\"network\" is required and cannot be null") if network.nil?
        unless (_network = network).nil?
          OpenApi::EnumValidator.validate("network", _network, POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_VALID_VALUES_FOR_NETWORK)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TEST_HELPERS_TREASURY_RECEIVED_DEBITS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_initiating_payment_method_details = initiating_payment_method_details).nil?
          _initiating_payment_method_details.validate if _initiating_payment_method_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/received_debits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["initiating_payment_method_details"] = initiating_payment_method_details.to_s if !initiating_payment_method_details.nil?
      form_params["network"] = network.to_s if !network.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TestHelpersApi.post_test_helpers_treasury_received_debits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
