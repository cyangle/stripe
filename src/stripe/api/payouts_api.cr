#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/error"
require "../models/get_accounts_created_parameter"

require "../models/payout"
require "../models/payout_list"
require "../models/post_accounts_request_metadata"

module Stripe
  class PayoutsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param arrival_date [Stripe::GetAccountsCreatedParameter?] Only return payouts that are expected to arrive during the given date interval.
    # @optional @param status [String?] Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return payouts that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param destination [String?] The ID of an external account - only return payouts sent to this external account.
    # @return [Stripe::PayoutList]
    def get_payouts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil
    ) : Stripe::PayoutList
      data, _status_code, _headers = get_payouts_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, arrival_date: arrival_date, status: status, created: created, expand: expand, destination: destination)
      data
    end

    # &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param arrival_date [Stripe::GetAccountsCreatedParameter?] Only return payouts that are expected to arrive during the given date interval.
    # @optional @param status [String?] Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return payouts that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param destination [String?] The ID of an external account - only return payouts sent to this external account.
    # @return [Tuple(Stripe::PayoutList, Integer, Hash)] Stripe::PayoutList, response status code and response headers
    def get_payouts_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil
    ) : Tuple(Stripe::PayoutList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payouts(ending_before: ending_before, starting_after: starting_after, limit: limit, arrival_date: arrival_date, status: status, created: created, expand: expand, destination: destination)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PayoutsApi#get_payouts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PayoutList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param arrival_date [Stripe::GetAccountsCreatedParameter?] Only return payouts that are expected to arrive during the given date interval.
    # @optional @param status [String?] Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return payouts that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param destination [String?] The ID of an external account - only return payouts sent to this external account.
    # @return nil
    def get_payouts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payouts(ending_before: ending_before, starting_after: starting_after, limit: limit, arrival_date: arrival_date, status: status, created: created, expand: expand, destination: destination).execute(&block)
    end

    GET_PAYOUTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYOUTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_PAYOUTS_MAX_LENGTH_FOR_STATUS         = 5000

    # @return Crest::Request
    def build_api_request_for_get_payouts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PayoutsApi.get_payouts ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYOUTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYOUTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_arrival_date = arrival_date).nil?
          _arrival_date.validate if _arrival_date.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::PrimitiveValidator.validate_max_length("status", status.to_s.size, GET_PAYOUTS_MAX_LENGTH_FOR_STATUS)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payouts"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["arrival_date"] = arrival_date.to_s if !arrival_date.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["destination"] = destination.to_s if !destination.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PayoutsApi.get_payouts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
    # @required @param payout [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Payout]
    def get_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = get_payouts_payout_with_http_info(payout: payout, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def get_payouts_payout_with_http_info(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payouts_payout(payout: payout, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PayoutsApi#get_payouts_payout\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payouts_payout(payout: payout, expand: expand).execute(&block)
    end

    GET_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_get_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PayoutsApi.get_payouts_payout ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, GET_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PayoutsApi.get_payouts_payout",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To send funds to your own bank account, create a new payout object. Your <a href=\"#balance\">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>  <p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>  <p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href=\"#balance_object\">balance object</a> details available and pending amounts by source type.</p>
    # @required @param amount [Int32?] A positive integer in cents representing how much to payout.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination [String?] The ID of a bank account or a card to send the payout to. If you don't provide a destination, we use the default external account for the specified currency.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param method [String?] The method used to send this payout, which is `standard` or `instant`. We support `instant` for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
    # @optional @param source_type [String?] The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the Balances API. One of `bank_account`, `card`, or `fpx`.
    # @optional @param statement_descriptor [String?] A string that displays on the recipient's bank or card statement (up to 22 characters). A `statement_descriptor` that's longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.
    # @return [Stripe::Payout]
    def post_payouts(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      destination : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      method : String? = nil,
      source_type : String? = nil,
      statement_descriptor : String? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_with_http_info(amount: amount, currency: currency, description: description, destination: destination, expand: expand, metadata: metadata, method: method, source_type: source_type, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;To send funds to your own bank account, create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.&lt;/p&gt;  &lt;p&gt;If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
    # @required @param amount [Int32?] A positive integer in cents representing how much to payout.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination [String?] The ID of a bank account or a card to send the payout to. If you don't provide a destination, we use the default external account for the specified currency.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param method [String?] The method used to send this payout, which is `standard` or `instant`. We support `instant` for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
    # @optional @param source_type [String?] The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the Balances API. One of `bank_account`, `card`, or `fpx`.
    # @optional @param statement_descriptor [String?] A string that displays on the recipient's bank or card statement (up to 22 characters). A `statement_descriptor` that's longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_with_http_info(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      destination : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      method : String? = nil,
      source_type : String? = nil,
      statement_descriptor : String? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts(amount: amount, currency: currency, description: description, destination: destination, expand: expand, metadata: metadata, method: method, source_type: source_type, statement_descriptor: statement_descriptor)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PayoutsApi#post_payouts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;To send funds to your own bank account, create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.&lt;/p&gt;  &lt;p&gt;If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
    # @required @param amount [Int32?] A positive integer in cents representing how much to payout.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param destination [String?] The ID of a bank account or a card to send the payout to. If you don't provide a destination, we use the default external account for the specified currency.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param method [String?] The method used to send this payout, which is `standard` or `instant`. We support `instant` for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
    # @optional @param source_type [String?] The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the Balances API. One of `bank_account`, `card`, or `fpx`.
    # @optional @param statement_descriptor [String?] A string that displays on the recipient's bank or card statement (up to 22 characters). A `statement_descriptor` that's longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.
    # @return nil
    def post_payouts(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      destination : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      method : String? = nil,
      source_type : String? = nil,
      statement_descriptor : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts(amount: amount, currency: currency, description: description, destination: destination, expand: expand, metadata: metadata, method: method, source_type: source_type, statement_descriptor: statement_descriptor).execute(&block)
    end

    POST_PAYOUTS_MAX_LENGTH_FOR_DESCRIPTION          = 5000
    POST_PAYOUTS_MAX_LENGTH_FOR_METHOD               = 5000
    POST_PAYOUTS_VALID_VALUES_FOR_METHOD             = String.static_array("instant", "standard")
    POST_PAYOUTS_MAX_LENGTH_FOR_SOURCE_TYPE          = 5000
    POST_PAYOUTS_VALID_VALUES_FOR_SOURCE_TYPE        = String.static_array("bank_account", "card", "fpx")
    POST_PAYOUTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 22

    # @return Crest::Request
    def build_api_request_for_post_payouts(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      destination : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      method : String? = nil,
      source_type : String? = nil,
      statement_descriptor : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PayoutsApi.post_payouts ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_PAYOUTS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_method = method).nil?
          OpenApi::EnumValidator.validate("method", _method, POST_PAYOUTS_VALID_VALUES_FOR_METHOD)
        end
        unless (_source_type = source_type).nil?
          OpenApi::EnumValidator.validate("source_type", _source_type, POST_PAYOUTS_VALID_VALUES_FOR_SOURCE_TYPE)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_PAYOUTS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
      end

      # resource path
      local_var_path = "/v1/payouts"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("destination", destination.to_s) if !destination.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("method", method.to_s) if !method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("source_type", source_type.to_s) if !source_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::Payout]
    def post_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_payout_with_http_info(payout: payout, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_payout_with_http_info(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts_payout(payout: payout, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PayoutsApi#post_payouts_payout\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts_payout(payout: payout, expand: expand, metadata: metadata).execute(&block)
    end

    POST_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PayoutsApi.post_payouts_payout ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, POST_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts_payout",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Payout]
    def post_payouts_payout_cancel(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_payout_cancel_with_http_info(payout: payout, expand: expand)
      data
    end

    # &lt;p&gt;You can cancel a previously created payout if its status is &lt;code&gt;pending&lt;/code&gt;. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_payout_cancel_with_http_info(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts_payout_cancel(payout: payout, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PayoutsApi#post_payouts_payout_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can cancel a previously created payout if its status is &lt;code&gt;pending&lt;/code&gt;. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payouts_payout_cancel(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts_payout_cancel(payout: payout, expand: expand).execute(&block)
    end

    POST_PAYOUTS_PAYOUT_CANCEL_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout_cancel(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PayoutsApi.post_payouts_payout_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, POST_PAYOUTS_PAYOUT_CANCEL_MAX_LENGTH_FOR_PAYOUT)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}/cancel".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts_payout_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>  <p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return [Stripe::Payout]
    def post_payouts_payout_reverse(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_payout_reverse_with_http_info(payout: payout, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the &lt;code&gt;pending&lt;/code&gt; status, use &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal through &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_payout_reverse_with_http_info(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts_payout_reverse(payout: payout, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PayoutsApi#post_payouts_payout_reverse\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the &lt;code&gt;pending&lt;/code&gt; status, use &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal through &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @return nil
    def post_payouts_payout_reverse(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts_payout_reverse(payout: payout, expand: expand, metadata: metadata).execute(&block)
    end

    POST_PAYOUTS_PAYOUT_REVERSE_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout_reverse(
      *,
      payout : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PayoutsApi.post_payouts_payout_reverse ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, POST_PAYOUTS_PAYOUT_REVERSE_MAX_LENGTH_FOR_PAYOUT)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}/reverse".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts_payout_reverse",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
