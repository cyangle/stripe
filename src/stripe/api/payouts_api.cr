#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class PayoutsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param destination [String?] The ID of an external account - only return payouts sent to this external account.
    # @optional @param arrival_date [Stripe::GetAccountsCreatedParameter?]
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::PayoutList]
    def get_payouts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::PayoutList
      data, _status_code, _headers = get_payouts_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand, destination: destination, arrival_date: arrival_date, created: created)
      data
    end

    # &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param destination [String?] The ID of an external account - only return payouts sent to this external account.
    # @optional @param arrival_date [Stripe::GetAccountsCreatedParameter?]
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::PayoutList, Integer, Hash)] Stripe::PayoutList, response status code and response headers
    def get_payouts_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::PayoutList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payouts(ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand, destination: destination, arrival_date: arrival_date, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PayoutsApi#get_payouts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PayoutList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param destination [String?] The ID of an external account - only return payouts sent to this external account.
    # @optional @param arrival_date [Stripe::GetAccountsCreatedParameter?]
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_payouts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payouts(ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand, destination: destination, arrival_date: arrival_date, created: created).execute(&block)
    end

    GET_PAYOUTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYOUTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_PAYOUTS_MAX_LENGTH_FOR_STATUS         = 5000

    # @return Crest::Request
    def build_api_request_for_get_payouts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      destination : String? = nil,
      arrival_date : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PayoutsApi.get_payouts ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYOUTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYOUTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::PrimitiveValidator.validate_max_length("status", status.to_s.size, GET_PAYOUTS_MAX_LENGTH_FOR_STATUS)
        end

        unless (_arrival_date = arrival_date).nil?
          _arrival_date.validate if _arrival_date.is_a?(OpenApi::Validatable)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payouts"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["destination"] = destination.to_s if !destination.nil?
      query_params["arrival_date"] = arrival_date.to_s if !arrival_date.nil?
      query_params["created"] = created.to_s if !created.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PayoutsApi.get_payouts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>
    # @required @param payout [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Payout]
    def get_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = get_payouts_payout_with_http_info(payout: payout, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def get_payouts_payout_with_http_info(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payouts_payout(payout: payout, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PayoutsApi#get_payouts_payout\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payouts_payout(payout: payout, expand: expand).execute(&block)
    end

    GET_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_get_payouts_payout(
      *,
      payout : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PayoutsApi.get_payouts_payout ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, GET_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PayoutsApi.get_payouts_payout",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To send funds to your own bank account, you create a new payout object. Your <a href=\"#balance\">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>  <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>  <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href=\"#balance_object\">balance object</a> details available and pending amounts by source type.</p>
    # @required @param post_payouts_request [Stripe::PostPayoutsRequest?]
    # @return [Stripe::Payout]
    def post_payouts(
      *,
      post_payouts_request : Stripe::PostPayoutsRequest? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_with_http_info(post_payouts_request: post_payouts_request)
      data
    end

    # &lt;p&gt;To send funds to your own bank account, you create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
    # @required @param post_payouts_request [Stripe::PostPayoutsRequest?]
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_with_http_info(
      *,
      post_payouts_request : Stripe::PostPayoutsRequest? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts(post_payouts_request: post_payouts_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PayoutsApi#post_payouts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;To send funds to your own bank account, you create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
    # @required @param post_payouts_request [Stripe::PostPayoutsRequest?]
    # @return nil
    def post_payouts(
      *,
      post_payouts_request : Stripe::PostPayoutsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts(post_payouts_request: post_payouts_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payouts(
      *,
      post_payouts_request : Stripe::PostPayoutsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PayoutsApi.post_payouts ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_payouts_request\" is required and cannot be null") if post_payouts_request.nil?
        unless (_post_payouts_request = post_payouts_request).nil?
          _post_payouts_request.validate if _post_payouts_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payouts"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payouts_request, content_type: header_params["Content-Type"]?) if !post_payouts_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>
    # @required @param payout [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Stripe::Payout]
    def post_payouts_payout(
      *,
      payout : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_payout_with_http_info(payout: payout, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)
      data
    end

    # &lt;p&gt;Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_payout_with_http_info(
      *,
      payout : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts_payout(payout: payout, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PayoutsApi#post_payouts_payout\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return nil
    def post_payouts_payout(
      *,
      payout : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts_payout(payout: payout, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request).execute(&block)
    end

    POST_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout(
      *,
      payout : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PayoutsApi.post_payouts_payout ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, POST_PAYOUTS_PAYOUT_MAX_LENGTH_FOR_PAYOUT)
        end
        unless (_post_application_fees_fee_refunds_id_request = post_application_fees_fee_refunds_id_request).nil?
          _post_application_fees_fee_refunds_id_request.validate if _post_application_fees_fee_refunds_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_application_fees_fee_refunds_id_request, content_type: header_params["Content-Type"]?) if !post_application_fees_fee_refunds_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts_payout",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>
    # @required @param payout [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::Payout]
    def post_payouts_payout_cancel(
      *,
      payout : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_payout_cancel_with_http_info(payout: payout, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_payout_cancel_with_http_info(
      *,
      payout : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts_payout_cancel(payout: payout, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PayoutsApi#post_payouts_payout_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_payouts_payout_cancel(
      *,
      payout : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts_payout_cancel(payout: payout, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_PAYOUTS_PAYOUT_CANCEL_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout_cancel(
      *,
      payout : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PayoutsApi.post_payouts_payout_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, POST_PAYOUTS_PAYOUT_CANCEL_MAX_LENGTH_FOR_PAYOUT)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}/cancel".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts_payout_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p>  <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
    # @required @param payout [String?]
    # @optional @param post_payouts_payout_reverse_request [Stripe::PostPayoutsPayoutReverseRequest?]
    # @return [Stripe::Payout]
    def post_payouts_payout_reverse(
      *,
      payout : String? = nil,
      post_payouts_payout_reverse_request : Stripe::PostPayoutsPayoutReverseRequest? = nil
    ) : Stripe::Payout
      data, _status_code, _headers = post_payouts_payout_reverse_with_http_info(payout: payout, post_payouts_payout_reverse_request: post_payouts_payout_reverse_request)
      data
    end

    # &lt;p&gt;Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the &lt;code&gt;pending&lt;/code&gt; status, &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; should be used instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal via &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param post_payouts_payout_reverse_request [Stripe::PostPayoutsPayoutReverseRequest?]
    # @return [Tuple(Stripe::Payout, Integer, Hash)] Stripe::Payout, response status code and response headers
    def post_payouts_payout_reverse_with_http_info(
      *,
      payout : String? = nil,
      post_payouts_payout_reverse_request : Stripe::PostPayoutsPayoutReverseRequest? = nil
    ) : Tuple(Stripe::Payout, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payouts_payout_reverse(payout: payout, post_payouts_payout_reverse_request: post_payouts_payout_reverse_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PayoutsApi#post_payouts_payout_reverse\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Payout.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the &lt;code&gt;pending&lt;/code&gt; status, &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; should be used instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal via &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.&lt;/p&gt;
    # @required @param payout [String?]
    # @optional @param post_payouts_payout_reverse_request [Stripe::PostPayoutsPayoutReverseRequest?]
    # @return nil
    def post_payouts_payout_reverse(
      *,
      payout : String? = nil,
      post_payouts_payout_reverse_request : Stripe::PostPayoutsPayoutReverseRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payouts_payout_reverse(payout: payout, post_payouts_payout_reverse_request: post_payouts_payout_reverse_request).execute(&block)
    end

    POST_PAYOUTS_PAYOUT_REVERSE_MAX_LENGTH_FOR_PAYOUT = 5000

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout_reverse(
      *,
      payout : String? = nil,
      post_payouts_payout_reverse_request : Stripe::PostPayoutsPayoutReverseRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PayoutsApi.post_payouts_payout_reverse ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payout\" is required and cannot be null") if payout.nil?
        unless (_payout = payout).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payout", payout.to_s.size, POST_PAYOUTS_PAYOUT_REVERSE_MAX_LENGTH_FOR_PAYOUT)
        end
        unless (_post_payouts_payout_reverse_request = post_payouts_payout_reverse_request).nil?
          _post_payouts_payout_reverse_request.validate if _post_payouts_payout_reverse_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}/reverse".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payouts_payout_reverse_request, content_type: header_params["Content-Type"]?) if !post_payouts_payout_reverse_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PayoutsApi.post_payouts_payout_reverse",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
