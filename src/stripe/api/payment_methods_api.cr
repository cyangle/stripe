#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class PaymentMethodsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href=\"/docs/api/payment_methods/customer_list\">List a Customer’s PaymentMethods</a> API instead.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param _type [String?] An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose PaymentMethods will be retrieved.
    # @return [Stripe::PaymentFlowsPaymentMethodList]
    def get_payment_methods(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil
    ) : Stripe::PaymentFlowsPaymentMethodList
      data, _status_code, _headers = get_payment_methods_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, _type: _type, expand: expand, customer: customer)
      data
    end

    # &lt;p&gt;Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt; API instead.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param _type [String?] An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose PaymentMethods will be retrieved.
    # @return [Tuple(Stripe::PaymentFlowsPaymentMethodList, Integer, Hash)] Stripe::PaymentFlowsPaymentMethodList, response status code and response headers
    def get_payment_methods_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil
    ) : Tuple(Stripe::PaymentFlowsPaymentMethodList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_methods(ending_before: ending_before, starting_after: starting_after, limit: limit, _type: _type, expand: expand, customer: customer)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentMethodsApi#get_payment_methods\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentFlowsPaymentMethodList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt; API instead.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param _type [String?] An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose PaymentMethods will be retrieved.
    # @return nil
    def get_payment_methods(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_methods(ending_before: ending_before, starting_after: starting_after, limit: limit, _type: _type, expand: expand, customer: customer).execute(&block)
    end

    GET_PAYMENT_METHODS_VALID_VALUES_FOR__TYPE  = String.static_array("acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "oxxo", "p24", "paynow", "pix", "promptpay", "sepa_debit", "sofort", "us_bank_account", "wechat_pay")
    GET_PAYMENT_METHODS_MAX_LENGTH_FOR_CUSTOMER = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_methods(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentMethodsApi.get_payment_methods ..." }
      end

      if client_side_validation
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_PAYMENT_METHODS_VALID_VALUES_FOR__TYPE)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_PAYMENT_METHODS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["customer"] = customer.to_s if !customer.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodsApi.get_payment_methods",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href=\"/docs/api/payment_methods/customer\">Retrieve a Customer’s PaymentMethods</a></p>
    # @required @param payment_method [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethod]
    def get_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = get_payment_methods_payment_method_with_http_info(payment_method: payment_method, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def get_payment_methods_payment_method_with_http_info(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_methods_payment_method(payment_method: payment_method, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentMethodsApi#get_payment_methods_payment_method\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_methods_payment_method(payment_method: payment_method, expand: expand).execute(&block)
    end

    GET_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentMethodsApi.get_payment_methods_payment_method ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, GET_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodsApi.get_payment_methods_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a PaymentMethod object. Read the <a href=\"/docs/stripe-js/reference#stripe-create-payment-method\">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>  <p>Instead of creating a PaymentMethod directly, we recommend using the <a href=\"/docs/payments/accept-a-payment\">PaymentIntents</a> API to accept a payment immediately or the <a href=\"/docs/payments/save-and-reuse\">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
    # @optional @param post_payment_methods_request [Stripe::PostPaymentMethodsRequest?]
    # @return [Stripe::PaymentMethod]
    def post_payment_methods(
      *,
      post_payment_methods_request : Stripe::PostPaymentMethodsRequest? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_with_http_info(post_payment_methods_request: post_payment_methods_request)
      data
    end

    # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
    # @optional @param post_payment_methods_request [Stripe::PostPaymentMethodsRequest?]
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_with_http_info(
      *,
      post_payment_methods_request : Stripe::PostPaymentMethodsRequest? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods(post_payment_methods_request: post_payment_methods_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
    # @optional @param post_payment_methods_request [Stripe::PostPaymentMethodsRequest?]
    # @return nil
    def post_payment_methods(
      *,
      post_payment_methods_request : Stripe::PostPaymentMethodsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods(post_payment_methods_request: post_payment_methods_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_methods(
      *,
      post_payment_methods_request : Stripe::PostPaymentMethodsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods ..." }
      end

      if client_side_validation
        unless (_post_payment_methods_request = post_payment_methods_request).nil?
          _post_payment_methods_request.validate if _post_payment_methods_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_methods_request, content_type: header_params["Content-Type"]?) if !post_payment_methods_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
    # @required @param payment_method [String?]
    # @optional @param post_payment_methods_payment_method_request [Stripe::PostPaymentMethodsPaymentMethodRequest?]
    # @return [Stripe::PaymentMethod]
    def post_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_request : Stripe::PostPaymentMethodsPaymentMethodRequest? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_payment_method_with_http_info(payment_method: payment_method, post_payment_methods_payment_method_request: post_payment_methods_payment_method_request)
      data
    end

    # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param post_payment_methods_payment_method_request [Stripe::PostPaymentMethodsPaymentMethodRequest?]
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_payment_method_with_http_info(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_request : Stripe::PostPaymentMethodsPaymentMethodRequest? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods_payment_method(payment_method: payment_method, post_payment_methods_payment_method_request: post_payment_methods_payment_method_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods_payment_method\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param post_payment_methods_payment_method_request [Stripe::PostPaymentMethodsPaymentMethodRequest?]
    # @return nil
    def post_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_request : Stripe::PostPaymentMethodsPaymentMethodRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods_payment_method(payment_method: payment_method, post_payment_methods_payment_method_request: post_payment_methods_payment_method_request).execute(&block)
    end

    POST_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_request : Stripe::PostPaymentMethodsPaymentMethodRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods_payment_method ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_post_payment_methods_payment_method_request = post_payment_methods_payment_method_request).nil?
          _post_payment_methods_payment_method_request.validate if _post_payment_methods_payment_method_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_methods_payment_method_request, content_type: header_params["Content-Type"]?) if !post_payment_methods_payment_method_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Attaches a PaymentMethod object to a Customer.</p>  <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href=\"/docs/api/setup_intents\">SetupIntent</a> or a PaymentIntent with <a href=\"/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\">setup_future_usage</a>. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code> endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See <a href=\"/docs/payments/payment-intents#future-usage\">Optimizing cards for future payments</a> for more information about setting up future payments.</p>  <p>To use this PaymentMethod as the default for invoice or subscription payments, set <a href=\"/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\"><code>invoice_settings.default_payment_method</code></a>, on the Customer to the PaymentMethod’s ID.</p>
    # @required @param payment_method [String?]
    # @required @param post_payment_methods_payment_method_attach_request [Stripe::PostPaymentMethodsPaymentMethodAttachRequest?]
    # @return [Stripe::PaymentMethod]
    def post_payment_methods_payment_method_attach(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_attach_request : Stripe::PostPaymentMethodsPaymentMethodAttachRequest? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_payment_method_attach_with_http_info(payment_method: payment_method, post_payment_methods_payment_method_attach_request: post_payment_methods_payment_method_attach_request)
      data
    end

    # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @required @param post_payment_methods_payment_method_attach_request [Stripe::PostPaymentMethodsPaymentMethodAttachRequest?]
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_payment_method_attach_with_http_info(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_attach_request : Stripe::PostPaymentMethodsPaymentMethodAttachRequest? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods_payment_method_attach(payment_method: payment_method, post_payment_methods_payment_method_attach_request: post_payment_methods_payment_method_attach_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods_payment_method_attach\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @required @param post_payment_methods_payment_method_attach_request [Stripe::PostPaymentMethodsPaymentMethodAttachRequest?]
    # @return nil
    def post_payment_methods_payment_method_attach(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_attach_request : Stripe::PostPaymentMethodsPaymentMethodAttachRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods_payment_method_attach(payment_method: payment_method, post_payment_methods_payment_method_attach_request: post_payment_methods_payment_method_attach_request).execute(&block)
    end

    POST_PAYMENT_METHODS_PAYMENT_METHOD_ATTACH_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method_attach(
      *,
      payment_method : String? = nil,
      post_payment_methods_payment_method_attach_request : Stripe::PostPaymentMethodsPaymentMethodAttachRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods_payment_method_attach ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_METHODS_PAYMENT_METHOD_ATTACH_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        raise ArgumentError.new("\"post_payment_methods_payment_method_attach_request\" is required and cannot be null") if post_payment_methods_payment_method_attach_request.nil?
        unless (_post_payment_methods_payment_method_attach_request = post_payment_methods_payment_method_attach_request).nil?
          _post_payment_methods_payment_method_attach_request.validate if _post_payment_methods_payment_method_attach_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}/attach".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_methods_payment_method_attach_request, content_type: header_params["Content-Type"]?) if !post_payment_methods_payment_method_attach_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods_payment_method_attach",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
    # @required @param payment_method [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::PaymentMethod]
    def post_payment_methods_payment_method_detach(
      *,
      payment_method : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_payment_method_detach_with_http_info(payment_method: payment_method, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_payment_method_detach_with_http_info(
      *,
      payment_method : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods_payment_method_detach(payment_method: payment_method, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods_payment_method_detach\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_payment_methods_payment_method_detach(
      *,
      payment_method : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods_payment_method_detach(payment_method: payment_method, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_PAYMENT_METHODS_PAYMENT_METHOD_DETACH_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method_detach(
      *,
      payment_method : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods_payment_method_detach ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_METHODS_PAYMENT_METHOD_DETACH_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}/detach".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods_payment_method_detach",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
