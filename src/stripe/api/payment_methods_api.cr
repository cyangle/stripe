#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/billing_details_inner_params"
require "../models/error"

require "../models/param"
require "../models/param1"
require "../models/param2"
require "../models/param3"
require "../models/param4"
require "../models/param5"
require "../models/param6"
require "../models/param7"
require "../models/param8"
require "../models/payment_flows_payment_method_list"
require "../models/payment_method"
require "../models/payment_method_fpx"
require "../models/payment_method_param"
require "../models/post_accounts_request_metadata"
require "../models/post_payment_methods_request_card"
require "../models/radar_options_with_hidden_options"
require "../models/update_api_param"
require "../models/update_param"

module Stripe
  class PaymentMethodsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href=\"/docs/api/payment_methods/customer_list\">List a Customer’s PaymentMethods</a> API instead.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param _type [String?] An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose PaymentMethods will be retrieved.
    # @return [Stripe::PaymentFlowsPaymentMethodList]
    def get_payment_methods(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil
    ) : Stripe::PaymentFlowsPaymentMethodList
      data, _status_code, _headers = get_payment_methods_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, _type: _type, expand: expand, customer: customer)
      data
    end

    # &lt;p&gt;Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt; API instead.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param _type [String?] An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose PaymentMethods will be retrieved.
    # @return [Tuple(Stripe::PaymentFlowsPaymentMethodList, Integer, Hash)] Stripe::PaymentFlowsPaymentMethodList, response status code and response headers
    def get_payment_methods_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil
    ) : Tuple(Stripe::PaymentFlowsPaymentMethodList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_methods(ending_before: ending_before, starting_after: starting_after, limit: limit, _type: _type, expand: expand, customer: customer)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodsApi#get_payment_methods\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentFlowsPaymentMethodList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt; API instead.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param _type [String?] An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose PaymentMethods will be retrieved.
    # @return nil
    def get_payment_methods(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_methods(ending_before: ending_before, starting_after: starting_after, limit: limit, _type: _type, expand: expand, customer: customer).execute(&block)
    end

    GET_PAYMENT_METHODS_VALID_VALUES_FOR__TYPE  = String.static_array("acss_debit", "affirm", "afterpay_clearpay", "alipay", "amazon_pay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "cashapp", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "mobilepay", "multibanco", "oxxo", "p24", "paynow", "paypal", "pix", "promptpay", "revolut_pay", "sepa_debit", "sofort", "swish", "twint", "us_bank_account", "wechat_pay", "zip")
    GET_PAYMENT_METHODS_MAX_LENGTH_FOR_CUSTOMER = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_methods(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      _type : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodsApi.get_payment_methods ..." }
      end

      if client_side_validation?
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_PAYMENT_METHODS_VALID_VALUES_FOR__TYPE)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_PAYMENT_METHODS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["customer"] = customer.to_s if !customer.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodsApi.get_payment_methods",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href=\"/docs/api/payment_methods/customer\">Retrieve a Customer’s PaymentMethods</a></p>
    # @required @param payment_method [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethod]
    def get_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = get_payment_methods_payment_method_with_http_info(payment_method: payment_method, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def get_payment_methods_payment_method_with_http_info(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_methods_payment_method(payment_method: payment_method, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodsApi#get_payment_methods_payment_method\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_methods_payment_method(payment_method: payment_method, expand: expand).execute(&block)
    end

    GET_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodsApi.get_payment_methods_payment_method ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, GET_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodsApi.get_payment_methods_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a PaymentMethod object. Read the <a href=\"/docs/stripe-js/reference#stripe-create-payment-method\">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>  <p>Instead of creating a PaymentMethod directly, we recommend using the <a href=\"/docs/payments/accept-a-payment\">PaymentIntents</a> API to accept a payment immediately or the <a href=\"/docs/payments/save-and-reuse\">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param affirm [JSON::Any?] If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
    # @optional @param afterpay_clearpay [JSON::Any?] If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
    # @optional @param alipay [JSON::Any?] If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
    # @optional @param allow_redisplay [String?] This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
    # @optional @param amazon_pay [JSON::Any?] If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method.
    # @optional @param au_becs_debit [Stripe::Param?]
    # @optional @param bacs_debit [Stripe::Param1?]
    # @optional @param bancontact [JSON::Any?] If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
    # @optional @param billing_details [Stripe::BillingDetailsInnerParams?]
    # @optional @param blik [JSON::Any?] If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
    # @optional @param boleto [Stripe::Param2?]
    # @optional @param card [Stripe::PostPaymentMethodsRequestCard?]
    # @optional @param cashapp [JSON::Any?] If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method.
    # @optional @param customer [String?] The `Customer` to whom the original PaymentMethod is attached.
    # @optional @param customer_balance [JSON::Any?] If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
    # @optional @param eps [Stripe::Param3?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodFpx?]
    # @optional @param giropay [JSON::Any?] If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
    # @optional @param grabpay [JSON::Any?] If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
    # @optional @param ideal [Stripe::Param4?]
    # @optional @param interac_present [JSON::Any?] If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
    # @optional @param klarna [Stripe::Param5?]
    # @optional @param konbini [JSON::Any?] If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
    # @optional @param link [JSON::Any?] If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param mobilepay [JSON::Any?] If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method.
    # @optional @param multibanco [JSON::Any?] If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method.
    # @optional @param oxxo [JSON::Any?] If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
    # @optional @param p24 [Stripe::Param6?]
    # @optional @param payment_method [String?] The PaymentMethod to share.
    # @optional @param paynow [JSON::Any?] If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
    # @optional @param paypal [JSON::Any?] If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method.
    # @optional @param pix [JSON::Any?] If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method.
    # @optional @param promptpay [JSON::Any?] If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param revolut_pay [JSON::Any?] If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method.
    # @optional @param sepa_debit [Stripe::Param7?]
    # @optional @param sofort [Stripe::Param8?]
    # @optional @param swish [JSON::Any?] If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method.
    # @optional @param twint [JSON::Any?] If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method.
    # @optional @param _type [String?] The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [JSON::Any?] If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
    # @optional @param zip [JSON::Any?] If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method.
    # @return [Stripe::PaymentMethod]
    def post_payment_methods(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : JSON::Any? = nil,
      afterpay_clearpay : JSON::Any? = nil,
      alipay : JSON::Any? = nil,
      allow_redisplay : String? = nil,
      amazon_pay : JSON::Any? = nil,
      au_becs_debit : Stripe::Param? = nil,
      bacs_debit : Stripe::Param1? = nil,
      bancontact : JSON::Any? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      blik : JSON::Any? = nil,
      boleto : Stripe::Param2? = nil,
      card : Stripe::PostPaymentMethodsRequestCard? = nil,
      cashapp : JSON::Any? = nil,
      customer : String? = nil,
      customer_balance : JSON::Any? = nil,
      eps : Stripe::Param3? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodFpx? = nil,
      giropay : JSON::Any? = nil,
      grabpay : JSON::Any? = nil,
      ideal : Stripe::Param4? = nil,
      interac_present : JSON::Any? = nil,
      klarna : Stripe::Param5? = nil,
      konbini : JSON::Any? = nil,
      link : JSON::Any? = nil,
      metadata : Hash(String, String)? = nil,
      mobilepay : JSON::Any? = nil,
      multibanco : JSON::Any? = nil,
      oxxo : JSON::Any? = nil,
      p24 : Stripe::Param6? = nil,
      payment_method : String? = nil,
      paynow : JSON::Any? = nil,
      paypal : JSON::Any? = nil,
      pix : JSON::Any? = nil,
      promptpay : JSON::Any? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      revolut_pay : JSON::Any? = nil,
      sepa_debit : Stripe::Param7? = nil,
      sofort : Stripe::Param8? = nil,
      swish : JSON::Any? = nil,
      twint : JSON::Any? = nil,
      _type : String? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : JSON::Any? = nil,
      zip : JSON::Any? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_with_http_info(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, allow_redisplay: allow_redisplay, amazon_pay: amazon_pay, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, billing_details: billing_details, blik: blik, boleto: boleto, card: card, cashapp: cashapp, customer: customer, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, grabpay: grabpay, ideal: ideal, interac_present: interac_present, klarna: klarna, konbini: konbini, link: link, metadata: metadata, mobilepay: mobilepay, multibanco: multibanco, oxxo: oxxo, p24: p24, payment_method: payment_method, paynow: paynow, paypal: paypal, pix: pix, promptpay: promptpay, radar_options: radar_options, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, _type: _type, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip)
      data
    end

    # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param affirm [JSON::Any?] If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
    # @optional @param afterpay_clearpay [JSON::Any?] If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
    # @optional @param alipay [JSON::Any?] If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
    # @optional @param allow_redisplay [String?] This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
    # @optional @param amazon_pay [JSON::Any?] If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method.
    # @optional @param au_becs_debit [Stripe::Param?]
    # @optional @param bacs_debit [Stripe::Param1?]
    # @optional @param bancontact [JSON::Any?] If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
    # @optional @param billing_details [Stripe::BillingDetailsInnerParams?]
    # @optional @param blik [JSON::Any?] If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
    # @optional @param boleto [Stripe::Param2?]
    # @optional @param card [Stripe::PostPaymentMethodsRequestCard?]
    # @optional @param cashapp [JSON::Any?] If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method.
    # @optional @param customer [String?] The `Customer` to whom the original PaymentMethod is attached.
    # @optional @param customer_balance [JSON::Any?] If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
    # @optional @param eps [Stripe::Param3?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodFpx?]
    # @optional @param giropay [JSON::Any?] If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
    # @optional @param grabpay [JSON::Any?] If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
    # @optional @param ideal [Stripe::Param4?]
    # @optional @param interac_present [JSON::Any?] If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
    # @optional @param klarna [Stripe::Param5?]
    # @optional @param konbini [JSON::Any?] If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
    # @optional @param link [JSON::Any?] If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param mobilepay [JSON::Any?] If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method.
    # @optional @param multibanco [JSON::Any?] If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method.
    # @optional @param oxxo [JSON::Any?] If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
    # @optional @param p24 [Stripe::Param6?]
    # @optional @param payment_method [String?] The PaymentMethod to share.
    # @optional @param paynow [JSON::Any?] If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
    # @optional @param paypal [JSON::Any?] If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method.
    # @optional @param pix [JSON::Any?] If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method.
    # @optional @param promptpay [JSON::Any?] If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param revolut_pay [JSON::Any?] If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method.
    # @optional @param sepa_debit [Stripe::Param7?]
    # @optional @param sofort [Stripe::Param8?]
    # @optional @param swish [JSON::Any?] If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method.
    # @optional @param twint [JSON::Any?] If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method.
    # @optional @param _type [String?] The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [JSON::Any?] If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
    # @optional @param zip [JSON::Any?] If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method.
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_with_http_info(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : JSON::Any? = nil,
      afterpay_clearpay : JSON::Any? = nil,
      alipay : JSON::Any? = nil,
      allow_redisplay : String? = nil,
      amazon_pay : JSON::Any? = nil,
      au_becs_debit : Stripe::Param? = nil,
      bacs_debit : Stripe::Param1? = nil,
      bancontact : JSON::Any? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      blik : JSON::Any? = nil,
      boleto : Stripe::Param2? = nil,
      card : Stripe::PostPaymentMethodsRequestCard? = nil,
      cashapp : JSON::Any? = nil,
      customer : String? = nil,
      customer_balance : JSON::Any? = nil,
      eps : Stripe::Param3? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodFpx? = nil,
      giropay : JSON::Any? = nil,
      grabpay : JSON::Any? = nil,
      ideal : Stripe::Param4? = nil,
      interac_present : JSON::Any? = nil,
      klarna : Stripe::Param5? = nil,
      konbini : JSON::Any? = nil,
      link : JSON::Any? = nil,
      metadata : Hash(String, String)? = nil,
      mobilepay : JSON::Any? = nil,
      multibanco : JSON::Any? = nil,
      oxxo : JSON::Any? = nil,
      p24 : Stripe::Param6? = nil,
      payment_method : String? = nil,
      paynow : JSON::Any? = nil,
      paypal : JSON::Any? = nil,
      pix : JSON::Any? = nil,
      promptpay : JSON::Any? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      revolut_pay : JSON::Any? = nil,
      sepa_debit : Stripe::Param7? = nil,
      sofort : Stripe::Param8? = nil,
      swish : JSON::Any? = nil,
      twint : JSON::Any? = nil,
      _type : String? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : JSON::Any? = nil,
      zip : JSON::Any? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, allow_redisplay: allow_redisplay, amazon_pay: amazon_pay, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, billing_details: billing_details, blik: blik, boleto: boleto, card: card, cashapp: cashapp, customer: customer, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, grabpay: grabpay, ideal: ideal, interac_present: interac_present, klarna: klarna, konbini: konbini, link: link, metadata: metadata, mobilepay: mobilepay, multibanco: multibanco, oxxo: oxxo, p24: p24, payment_method: payment_method, paynow: paynow, paypal: paypal, pix: pix, promptpay: promptpay, radar_options: radar_options, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, _type: _type, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param affirm [JSON::Any?] If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
    # @optional @param afterpay_clearpay [JSON::Any?] If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
    # @optional @param alipay [JSON::Any?] If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
    # @optional @param allow_redisplay [String?] This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
    # @optional @param amazon_pay [JSON::Any?] If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method.
    # @optional @param au_becs_debit [Stripe::Param?]
    # @optional @param bacs_debit [Stripe::Param1?]
    # @optional @param bancontact [JSON::Any?] If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
    # @optional @param billing_details [Stripe::BillingDetailsInnerParams?]
    # @optional @param blik [JSON::Any?] If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
    # @optional @param boleto [Stripe::Param2?]
    # @optional @param card [Stripe::PostPaymentMethodsRequestCard?]
    # @optional @param cashapp [JSON::Any?] If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method.
    # @optional @param customer [String?] The `Customer` to whom the original PaymentMethod is attached.
    # @optional @param customer_balance [JSON::Any?] If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
    # @optional @param eps [Stripe::Param3?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodFpx?]
    # @optional @param giropay [JSON::Any?] If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
    # @optional @param grabpay [JSON::Any?] If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
    # @optional @param ideal [Stripe::Param4?]
    # @optional @param interac_present [JSON::Any?] If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
    # @optional @param klarna [Stripe::Param5?]
    # @optional @param konbini [JSON::Any?] If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
    # @optional @param link [JSON::Any?] If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param mobilepay [JSON::Any?] If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method.
    # @optional @param multibanco [JSON::Any?] If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method.
    # @optional @param oxxo [JSON::Any?] If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
    # @optional @param p24 [Stripe::Param6?]
    # @optional @param payment_method [String?] The PaymentMethod to share.
    # @optional @param paynow [JSON::Any?] If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
    # @optional @param paypal [JSON::Any?] If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method.
    # @optional @param pix [JSON::Any?] If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method.
    # @optional @param promptpay [JSON::Any?] If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param revolut_pay [JSON::Any?] If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method.
    # @optional @param sepa_debit [Stripe::Param7?]
    # @optional @param sofort [Stripe::Param8?]
    # @optional @param swish [JSON::Any?] If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method.
    # @optional @param twint [JSON::Any?] If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method.
    # @optional @param _type [String?] The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [JSON::Any?] If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
    # @optional @param zip [JSON::Any?] If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method.
    # @return nil
    def post_payment_methods(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : JSON::Any? = nil,
      afterpay_clearpay : JSON::Any? = nil,
      alipay : JSON::Any? = nil,
      allow_redisplay : String? = nil,
      amazon_pay : JSON::Any? = nil,
      au_becs_debit : Stripe::Param? = nil,
      bacs_debit : Stripe::Param1? = nil,
      bancontact : JSON::Any? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      blik : JSON::Any? = nil,
      boleto : Stripe::Param2? = nil,
      card : Stripe::PostPaymentMethodsRequestCard? = nil,
      cashapp : JSON::Any? = nil,
      customer : String? = nil,
      customer_balance : JSON::Any? = nil,
      eps : Stripe::Param3? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodFpx? = nil,
      giropay : JSON::Any? = nil,
      grabpay : JSON::Any? = nil,
      ideal : Stripe::Param4? = nil,
      interac_present : JSON::Any? = nil,
      klarna : Stripe::Param5? = nil,
      konbini : JSON::Any? = nil,
      link : JSON::Any? = nil,
      metadata : Hash(String, String)? = nil,
      mobilepay : JSON::Any? = nil,
      multibanco : JSON::Any? = nil,
      oxxo : JSON::Any? = nil,
      p24 : Stripe::Param6? = nil,
      payment_method : String? = nil,
      paynow : JSON::Any? = nil,
      paypal : JSON::Any? = nil,
      pix : JSON::Any? = nil,
      promptpay : JSON::Any? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      revolut_pay : JSON::Any? = nil,
      sepa_debit : Stripe::Param7? = nil,
      sofort : Stripe::Param8? = nil,
      swish : JSON::Any? = nil,
      twint : JSON::Any? = nil,
      _type : String? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : JSON::Any? = nil,
      zip : JSON::Any? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, allow_redisplay: allow_redisplay, amazon_pay: amazon_pay, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, billing_details: billing_details, blik: blik, boleto: boleto, card: card, cashapp: cashapp, customer: customer, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, grabpay: grabpay, ideal: ideal, interac_present: interac_present, klarna: klarna, konbini: konbini, link: link, metadata: metadata, mobilepay: mobilepay, multibanco: multibanco, oxxo: oxxo, p24: p24, payment_method: payment_method, paynow: paynow, paypal: paypal, pix: pix, promptpay: promptpay, radar_options: radar_options, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, _type: _type, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip).execute(&block)
    end

    POST_PAYMENT_METHODS_VALID_VALUES_FOR_ALLOW_REDISPLAY = String.static_array("always", "limited", "unspecified")
    POST_PAYMENT_METHODS_MAX_LENGTH_FOR_CUSTOMER          = 5000
    POST_PAYMENT_METHODS_MAX_LENGTH_FOR_PAYMENT_METHOD    = 5000
    POST_PAYMENT_METHODS_VALID_VALUES_FOR__TYPE           = String.static_array("acss_debit", "affirm", "afterpay_clearpay", "alipay", "amazon_pay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "cashapp", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "mobilepay", "multibanco", "oxxo", "p24", "paynow", "paypal", "pix", "promptpay", "revolut_pay", "sepa_debit", "sofort", "swish", "twint", "us_bank_account", "wechat_pay", "zip")

    # @return Crest::Request
    def build_api_request_for_post_payment_methods(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : JSON::Any? = nil,
      afterpay_clearpay : JSON::Any? = nil,
      alipay : JSON::Any? = nil,
      allow_redisplay : String? = nil,
      amazon_pay : JSON::Any? = nil,
      au_becs_debit : Stripe::Param? = nil,
      bacs_debit : Stripe::Param1? = nil,
      bancontact : JSON::Any? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      blik : JSON::Any? = nil,
      boleto : Stripe::Param2? = nil,
      card : Stripe::PostPaymentMethodsRequestCard? = nil,
      cashapp : JSON::Any? = nil,
      customer : String? = nil,
      customer_balance : JSON::Any? = nil,
      eps : Stripe::Param3? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodFpx? = nil,
      giropay : JSON::Any? = nil,
      grabpay : JSON::Any? = nil,
      ideal : Stripe::Param4? = nil,
      interac_present : JSON::Any? = nil,
      klarna : Stripe::Param5? = nil,
      konbini : JSON::Any? = nil,
      link : JSON::Any? = nil,
      metadata : Hash(String, String)? = nil,
      mobilepay : JSON::Any? = nil,
      multibanco : JSON::Any? = nil,
      oxxo : JSON::Any? = nil,
      p24 : Stripe::Param6? = nil,
      payment_method : String? = nil,
      paynow : JSON::Any? = nil,
      paypal : JSON::Any? = nil,
      pix : JSON::Any? = nil,
      promptpay : JSON::Any? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      revolut_pay : JSON::Any? = nil,
      sepa_debit : Stripe::Param7? = nil,
      sofort : Stripe::Param8? = nil,
      swish : JSON::Any? = nil,
      twint : JSON::Any? = nil,
      _type : String? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : JSON::Any? = nil,
      zip : JSON::Any? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods ..." }
      end

      if client_side_validation?
        unless (_acss_debit = acss_debit).nil?
          _acss_debit.validate if _acss_debit.is_a?(OpenApi::Validatable)
        end

        unless (_allow_redisplay = allow_redisplay).nil?
          OpenApi::EnumValidator.validate("allow_redisplay", _allow_redisplay, POST_PAYMENT_METHODS_VALID_VALUES_FOR_ALLOW_REDISPLAY)
        end

        unless (_au_becs_debit = au_becs_debit).nil?
          _au_becs_debit.validate if _au_becs_debit.is_a?(OpenApi::Validatable)
        end
        unless (_bacs_debit = bacs_debit).nil?
          _bacs_debit.validate if _bacs_debit.is_a?(OpenApi::Validatable)
        end

        unless (_billing_details = billing_details).nil?
          _billing_details.validate if _billing_details.is_a?(OpenApi::Validatable)
        end

        unless (_boleto = boleto).nil?
          _boleto.validate if _boleto.is_a?(OpenApi::Validatable)
        end
        unless (_card = card).nil?
          _card.validate if _card.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_PAYMENT_METHODS_MAX_LENGTH_FOR_CUSTOMER)
        end

        unless (_eps = eps).nil?
          _eps.validate if _eps.is_a?(OpenApi::Validatable)
        end

        unless (_fpx = fpx).nil?
          _fpx.validate if _fpx.is_a?(OpenApi::Validatable)
        end

        unless (_ideal = ideal).nil?
          _ideal.validate if _ideal.is_a?(OpenApi::Validatable)
        end

        unless (_klarna = klarna).nil?
          _klarna.validate if _klarna.is_a?(OpenApi::Validatable)
        end

        unless (_p24 = p24).nil?
          _p24.validate if _p24.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_METHODS_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end

        unless (_radar_options = radar_options).nil?
          _radar_options.validate if _radar_options.is_a?(OpenApi::Validatable)
        end

        unless (_sepa_debit = sepa_debit).nil?
          _sepa_debit.validate if _sepa_debit.is_a?(OpenApi::Validatable)
        end
        unless (_sofort = sofort).nil?
          _sofort.validate if _sofort.is_a?(OpenApi::Validatable)
        end

        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_PAYMENT_METHODS_VALID_VALUES_FOR__TYPE)
        end
        unless (_us_bank_account = us_bank_account).nil?
          _us_bank_account.validate if _us_bank_account.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(acss_debit.to_json), "acss_debit")) if !acss_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(affirm, "affirm")) if !affirm.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(afterpay_clearpay, "afterpay_clearpay")) if !afterpay_clearpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(alipay, "alipay")) if !alipay.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("allow_redisplay", allow_redisplay.to_s) if !allow_redisplay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(amazon_pay, "amazon_pay")) if !amazon_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(au_becs_debit.to_json), "au_becs_debit")) if !au_becs_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bacs_debit.to_json), "bacs_debit")) if !bacs_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(bancontact, "bancontact")) if !bancontact.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(billing_details.to_json), "billing_details")) if !billing_details.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(blik, "blik")) if !blik.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(boleto.to_json), "boleto")) if !boleto.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(card.to_json), "card")) if !card.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(cashapp, "cashapp")) if !cashapp.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(customer_balance, "customer_balance")) if !customer_balance.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(eps.to_json), "eps")) if !eps.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(fpx.to_json), "fpx")) if !fpx.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(giropay, "giropay")) if !giropay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(grabpay, "grabpay")) if !grabpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(ideal.to_json), "ideal")) if !ideal.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(interac_present, "interac_present")) if !interac_present.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(klarna.to_json), "klarna")) if !klarna.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(konbini, "konbini")) if !konbini.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(link, "link")) if !link.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(mobilepay, "mobilepay")) if !mobilepay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(multibanco, "multibanco")) if !multibanco.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(oxxo, "oxxo")) if !oxxo.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(p24.to_json), "p24")) if !p24.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method", payment_method.to_s) if !payment_method.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(paynow, "paynow")) if !paynow.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(paypal, "paypal")) if !paypal.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(pix, "pix")) if !pix.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(promptpay, "promptpay")) if !promptpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(radar_options.to_json), "radar_options")) if !radar_options.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(revolut_pay, "revolut_pay")) if !revolut_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(sepa_debit.to_json), "sepa_debit")) if !sepa_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(sofort.to_json), "sofort")) if !sofort.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(swish, "swish")) if !swish.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(twint, "twint")) if !twint.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(us_bank_account.to_json), "us_bank_account")) if !us_bank_account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(wechat_pay, "wechat_pay")) if !wechat_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(zip, "zip")) if !zip.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
    # @required @param payment_method [String?]
    # @optional @param allow_redisplay [String?] This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
    # @optional @param billing_details [Stripe::BillingDetailsInnerParams?]
    # @optional @param card [Stripe::UpdateApiParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param link [JSON::Any?] If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param us_bank_account [Stripe::UpdateParam?]
    # @return [Stripe::PaymentMethod]
    def post_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      allow_redisplay : String? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      card : Stripe::UpdateApiParam? = nil,
      expand : Array(String)? = nil,
      link : JSON::Any? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      us_bank_account : Stripe::UpdateParam? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_payment_method_with_http_info(payment_method: payment_method, allow_redisplay: allow_redisplay, billing_details: billing_details, card: card, expand: expand, link: link, metadata: metadata, us_bank_account: us_bank_account)
      data
    end

    # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param allow_redisplay [String?] This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
    # @optional @param billing_details [Stripe::BillingDetailsInnerParams?]
    # @optional @param card [Stripe::UpdateApiParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param link [JSON::Any?] If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param us_bank_account [Stripe::UpdateParam?]
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_payment_method_with_http_info(
      *,
      payment_method : String? = nil,
      allow_redisplay : String? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      card : Stripe::UpdateApiParam? = nil,
      expand : Array(String)? = nil,
      link : JSON::Any? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      us_bank_account : Stripe::UpdateParam? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods_payment_method(payment_method: payment_method, allow_redisplay: allow_redisplay, billing_details: billing_details, card: card, expand: expand, link: link, metadata: metadata, us_bank_account: us_bank_account)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods_payment_method\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param allow_redisplay [String?] This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
    # @optional @param billing_details [Stripe::BillingDetailsInnerParams?]
    # @optional @param card [Stripe::UpdateApiParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param link [JSON::Any?] If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param us_bank_account [Stripe::UpdateParam?]
    # @return nil
    def post_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      allow_redisplay : String? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      card : Stripe::UpdateApiParam? = nil,
      expand : Array(String)? = nil,
      link : JSON::Any? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      us_bank_account : Stripe::UpdateParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods_payment_method(payment_method: payment_method, allow_redisplay: allow_redisplay, billing_details: billing_details, card: card, expand: expand, link: link, metadata: metadata, us_bank_account: us_bank_account).execute(&block)
    end

    POST_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD    = 5000
    POST_PAYMENT_METHODS_PAYMENT_METHOD_VALID_VALUES_FOR_ALLOW_REDISPLAY = String.static_array("always", "limited", "unspecified")

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method(
      *,
      payment_method : String? = nil,
      allow_redisplay : String? = nil,
      billing_details : Stripe::BillingDetailsInnerParams? = nil,
      card : Stripe::UpdateApiParam? = nil,
      expand : Array(String)? = nil,
      link : JSON::Any? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      us_bank_account : Stripe::UpdateParam? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods_payment_method ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_METHODS_PAYMENT_METHOD_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_allow_redisplay = allow_redisplay).nil?
          OpenApi::EnumValidator.validate("allow_redisplay", _allow_redisplay, POST_PAYMENT_METHODS_PAYMENT_METHOD_VALID_VALUES_FOR_ALLOW_REDISPLAY)
        end
        unless (_billing_details = billing_details).nil?
          _billing_details.validate if _billing_details.is_a?(OpenApi::Validatable)
        end
        unless (_card = card).nil?
          _card.validate if _card.is_a?(OpenApi::Validatable)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_us_bank_account = us_bank_account).nil?
          _us_bank_account.validate if _us_bank_account.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("allow_redisplay", allow_redisplay.to_s) if !allow_redisplay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(billing_details.to_json), "billing_details")) if !billing_details.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(card.to_json), "card")) if !card.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(link, "link")) if !link.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(us_bank_account.to_json), "us_bank_account")) if !us_bank_account.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Attaches a PaymentMethod object to a Customer.</p>  <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href=\"/docs/api/setup_intents\">SetupIntent</a> or a PaymentIntent with <a href=\"/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\">setup_future_usage</a>. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code> endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See <a href=\"/docs/payments/payment-intents#future-usage\">Optimizing cards for future payments</a> for more information about setting up future payments.</p>  <p>To use this PaymentMethod as the default for invoice or subscription payments, set <a href=\"/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\"><code>invoice_settings.default_payment_method</code></a>, on the Customer to the PaymentMethod’s ID.</p>
    # @required @param payment_method [String?]
    # @required @param customer [String?] The ID of the customer to which to attach the PaymentMethod.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethod]
    def post_payment_methods_payment_method_attach(
      *,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_payment_method_attach_with_http_info(payment_method: payment_method, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @required @param customer [String?] The ID of the customer to which to attach the PaymentMethod.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_payment_method_attach_with_http_info(
      *,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods_payment_method_attach(payment_method: payment_method, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods_payment_method_attach\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @required @param customer [String?] The ID of the customer to which to attach the PaymentMethod.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_methods_payment_method_attach(
      *,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods_payment_method_attach(payment_method: payment_method, customer: customer, expand: expand).execute(&block)
    end

    POST_PAYMENT_METHODS_PAYMENT_METHOD_ATTACH_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000
    POST_PAYMENT_METHODS_PAYMENT_METHOD_ATTACH_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method_attach(
      *,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods_payment_method_attach ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_METHODS_PAYMENT_METHOD_ATTACH_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        raise ArgumentError.new("\"customer\" is required and cannot be null") if customer.nil?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_PAYMENT_METHODS_PAYMENT_METHOD_ATTACH_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}/attach".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods_payment_method_attach",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
    # @required @param payment_method [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethod]
    def post_payment_methods_payment_method_detach(
      *,
      payment_method : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::PaymentMethod
      data, _status_code, _headers = post_payment_methods_payment_method_detach_with_http_info(payment_method: payment_method, expand: expand)
      data
    end

    # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethod, Integer, Hash)] Stripe::PaymentMethod, response status code and response headers
    def post_payment_methods_payment_method_detach_with_http_info(
      *,
      payment_method : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::PaymentMethod, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_methods_payment_method_detach(payment_method: payment_method, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodsApi#post_payment_methods_payment_method_detach\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethod.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
    # @required @param payment_method [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_payment_methods_payment_method_detach(
      *,
      payment_method : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_methods_payment_method_detach(payment_method: payment_method, expand: expand).execute(&block)
    end

    POST_PAYMENT_METHODS_PAYMENT_METHOD_DETACH_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method_detach(
      *,
      payment_method : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodsApi.post_payment_methods_payment_method_detach ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_PAYMENT_METHODS_PAYMENT_METHOD_DETACH_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}/detach".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodsApi.post_payment_methods_payment_method_detach",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
