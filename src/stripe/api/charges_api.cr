#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/charge"
require "../models/charge_list"
require "../models/destination_specs"
require "../models/error"
require "../models/fraud_details"
require "../models/get_accounts_created_parameter"

require "../models/optional_fields_shipping"
require "../models/post_accounts_request_metadata"
require "../models/radar_options_with_hidden_options"
require "../models/search_result"
require "../models/transfer_data_specs"

module Stripe
  class ChargesApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return charges for the customer specified by this customer ID.
    # @optional @param transfer_group [String?] Only return charges for this transfer group, limited to 100.
    # @optional @param payment_intent [String?] Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return charges that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ChargeList]
    def get_charges(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ChargeList
      data, _status_code, _headers = get_charges_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, transfer_group: transfer_group, payment_intent: payment_intent, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return charges for the customer specified by this customer ID.
    # @optional @param transfer_group [String?] Only return charges for this transfer group, limited to 100.
    # @optional @param payment_intent [String?] Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return charges that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ChargeList, Integer, Hash)] Stripe::ChargeList, response status code and response headers
    def get_charges_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ChargeList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_charges(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, transfer_group: transfer_group, payment_intent: payment_intent, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ChargesApi#get_charges\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ChargeList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return charges for the customer specified by this customer ID.
    # @optional @param transfer_group [String?] Only return charges for this transfer group, limited to 100.
    # @optional @param payment_intent [String?] Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return charges that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_charges(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_charges(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, transfer_group: transfer_group, payment_intent: payment_intent, created: created, expand: expand).execute(&block)
    end

    GET_CHARGES_MAX_LENGTH_FOR_CUSTOMER       = 5000
    GET_CHARGES_MAX_LENGTH_FOR_TRANSFER_GROUP = 5000
    GET_CHARGES_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_get_charges(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ChargesApi.get_charges ..." }
      end

      if client_side_validation?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_CHARGES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_transfer_group = transfer_group).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transfer_group", transfer_group.to_s.size, GET_CHARGES_MAX_LENGTH_FOR_TRANSFER_GROUP)
        end
        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_CHARGES_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChargesApi.get_charges",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
    # @required @param charge [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Charge]
    def get_charges_charge(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = get_charges_charge_with_http_info(charge: charge, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def get_charges_charge_with_http_info(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_charges_charge(charge: charge, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ChargesApi#get_charges_charge\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_charges_charge(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_charges_charge(charge: charge, expand: expand).execute(&block)
    end

    GET_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE = 5000

    # @return Crest::Request
    def build_api_request_for_get_charges_charge(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ChargesApi.get_charges_charge ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"charge\" is required and cannot be null") if charge.nil?
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, GET_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE)
        end
      end

      # resource path
      local_var_path = "/v1/charges/{charge}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChargesApi.get_charges_charge",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for charges you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_charges_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_charges_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_charges_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_charges_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ChargesApi#get_charges_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_charges_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_charges_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_CHARGES_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_CHARGES_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_charges_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ChargesApi.get_charges_search ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_CHARGES_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_CHARGES_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/charges/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChargesApi.get_charges_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>This method is no longer recommended—use the <a href=\"/docs/api/payment_intents\">Payment Intents API</a> to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code> object used to request payment.</p>
    # @optional @param amount [Int32?] Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @optional @param application_fee [Int32?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collect-fees).
    # @optional @param capture [Bool?] Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] The ID of an existing customer that will be charged in this request.
    # @optional @param description [String?] An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
    # @optional @param destination [Stripe::DestinationSpecs?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param on_behalf_of [String?] The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?] The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param source [String?] A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer.
    # @optional @param statement_descriptor [String?] For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options).
    # @return [Stripe::Charge]
    def post_charges(
      *,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      capture : Bool? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      destination : Stripe::DestinationSpecs? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      on_behalf_of : String? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = post_charges_with_http_info(amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, capture: capture, currency: currency, customer: customer, description: description, destination: destination, expand: expand, metadata: metadata, on_behalf_of: on_behalf_of, radar_options: radar_options, receipt_email: receipt_email, shipping: shipping, source: source, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;This method is no longer recommended—use the &lt;a href&#x3D;\&quot;/docs/api/payment_intents\&quot;&gt;Payment Intents API&lt;/a&gt; to initiate a new payment instead. Confirmation of the PaymentIntent creates the &lt;code&gt;Charge&lt;/code&gt; object used to request payment.&lt;/p&gt;
    # @optional @param amount [Int32?] Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @optional @param application_fee [Int32?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collect-fees).
    # @optional @param capture [Bool?] Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] The ID of an existing customer that will be charged in this request.
    # @optional @param description [String?] An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
    # @optional @param destination [Stripe::DestinationSpecs?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param on_behalf_of [String?] The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?] The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param source [String?] A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer.
    # @optional @param statement_descriptor [String?] For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options).
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def post_charges_with_http_info(
      *,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      capture : Bool? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      destination : Stripe::DestinationSpecs? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      on_behalf_of : String? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_charges(amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, capture: capture, currency: currency, customer: customer, description: description, destination: destination, expand: expand, metadata: metadata, on_behalf_of: on_behalf_of, radar_options: radar_options, receipt_email: receipt_email, shipping: shipping, source: source, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ChargesApi#post_charges\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;This method is no longer recommended—use the &lt;a href&#x3D;\&quot;/docs/api/payment_intents\&quot;&gt;Payment Intents API&lt;/a&gt; to initiate a new payment instead. Confirmation of the PaymentIntent creates the &lt;code&gt;Charge&lt;/code&gt; object used to request payment.&lt;/p&gt;
    # @optional @param amount [Int32?] Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @optional @param application_fee [Int32?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collect-fees).
    # @optional @param capture [Bool?] Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] The ID of an existing customer that will be charged in this request.
    # @optional @param description [String?] An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
    # @optional @param destination [Stripe::DestinationSpecs?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param on_behalf_of [String?] The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant).
    # @optional @param radar_options [Stripe::RadarOptionsWithHiddenOptions?]
    # @optional @param receipt_email [String?] The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param source [String?] A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer.
    # @optional @param statement_descriptor [String?] For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options).
    # @return nil
    def post_charges(
      *,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      capture : Bool? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      destination : Stripe::DestinationSpecs? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      on_behalf_of : String? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_charges(amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, capture: capture, currency: currency, customer: customer, description: description, destination: destination, expand: expand, metadata: metadata, on_behalf_of: on_behalf_of, radar_options: radar_options, receipt_email: receipt_email, shipping: shipping, source: source, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group).execute(&block)
    end

    POST_CHARGES_MAX_LENGTH_FOR_CUSTOMER                    =   500
    POST_CHARGES_MAX_LENGTH_FOR_DESCRIPTION                 = 40000
    POST_CHARGES_MAX_LENGTH_FOR_ON_BEHALF_OF                =  5000
    POST_CHARGES_MAX_LENGTH_FOR_SOURCE                      =  5000
    POST_CHARGES_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR        =    22
    POST_CHARGES_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX =    22

    # @return Crest::Request
    def build_api_request_for_post_charges(
      *,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      capture : Bool? = nil,
      currency : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      destination : Stripe::DestinationSpecs? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      on_behalf_of : String? = nil,
      radar_options : Stripe::RadarOptionsWithHiddenOptions? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ChargesApi.post_charges ..." }
      end

      if client_side_validation?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_CHARGES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_CHARGES_MAX_LENGTH_FOR_DESCRIPTION)
        end
        unless (_destination = destination).nil?
          _destination.validate if _destination.is_a?(OpenApi::Validatable)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_on_behalf_of = on_behalf_of).nil?
          OpenApi::PrimitiveValidator.validate_max_length("on_behalf_of", on_behalf_of.to_s.size, POST_CHARGES_MAX_LENGTH_FOR_ON_BEHALF_OF)
        end
        unless (_radar_options = radar_options).nil?
          _radar_options.validate if _radar_options.is_a?(OpenApi::Validatable)
        end

        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
        unless (_source = source).nil?
          OpenApi::PrimitiveValidator.validate_max_length("source", source.to_s.size, POST_CHARGES_MAX_LENGTH_FOR_SOURCE)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_CHARGES_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_statement_descriptor_suffix = statement_descriptor_suffix).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix", statement_descriptor_suffix.to_s.size, POST_CHARGES_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee", application_fee.to_s) if !application_fee.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("capture", capture.to_s) if !capture.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(destination.to_json), "destination")) if !destination.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(radar_options.to_json), "radar_options")) if !radar_options.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("receipt_email", receipt_email.to_s) if !receipt_email.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("source", source.to_s) if !source.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor_suffix", statement_descriptor_suffix.to_s) if !statement_descriptor_suffix.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_group", transfer_group.to_s) if !transfer_group.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ChargesApi.post_charges",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param charge [String?]
    # @optional @param customer [String?] The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.
    # @optional @param description [String?] An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fraud_details [Stripe::FraudDetails?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param receipt_email [String?] This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    # @return [Stripe::Charge]
    def post_charges_charge(
      *,
      charge : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      fraud_details : Stripe::FraudDetails? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      transfer_group : String? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = post_charges_charge_with_http_info(charge: charge, customer: customer, description: description, expand: expand, fraud_details: fraud_details, metadata: metadata, receipt_email: receipt_email, shipping: shipping, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param customer [String?] The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.
    # @optional @param description [String?] An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fraud_details [Stripe::FraudDetails?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param receipt_email [String?] This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def post_charges_charge_with_http_info(
      *,
      charge : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      fraud_details : Stripe::FraudDetails? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      transfer_group : String? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_charges_charge(charge: charge, customer: customer, description: description, expand: expand, fraud_details: fraud_details, metadata: metadata, receipt_email: receipt_email, shipping: shipping, transfer_group: transfer_group)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ChargesApi#post_charges_charge\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param customer [String?] The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.
    # @optional @param description [String?] An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fraud_details [Stripe::FraudDetails?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param receipt_email [String?] This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.
    # @optional @param shipping [Stripe::OptionalFieldsShipping?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    # @return nil
    def post_charges_charge(
      *,
      charge : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      fraud_details : Stripe::FraudDetails? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      transfer_group : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_charges_charge(charge: charge, customer: customer, description: description, expand: expand, fraud_details: fraud_details, metadata: metadata, receipt_email: receipt_email, shipping: shipping, transfer_group: transfer_group).execute(&block)
    end

    POST_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE        =  5000
    POST_CHARGES_CHARGE_MAX_LENGTH_FOR_CUSTOMER      =  5000
    POST_CHARGES_CHARGE_MAX_LENGTH_FOR_DESCRIPTION   = 40000
    POST_CHARGES_CHARGE_MAX_LENGTH_FOR_RECEIPT_EMAIL =  5000

    # @return Crest::Request
    def build_api_request_for_post_charges_charge(
      *,
      charge : String? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      fraud_details : Stripe::FraudDetails? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      receipt_email : String? = nil,
      shipping : Stripe::OptionalFieldsShipping? = nil,
      transfer_group : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ChargesApi.post_charges_charge ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"charge\" is required and cannot be null") if charge.nil?
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, POST_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_CHARGES_CHARGE_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_CHARGES_CHARGE_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_fraud_details = fraud_details).nil?
          _fraud_details.validate if _fraud_details.is_a?(OpenApi::Validatable)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_receipt_email = receipt_email).nil?
          OpenApi::PrimitiveValidator.validate_max_length("receipt_email", receipt_email.to_s.size, POST_CHARGES_CHARGE_MAX_LENGTH_FOR_RECEIPT_EMAIL)
        end
        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges/{charge}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(fraud_details.to_json), "fraud_details")) if !fraud_details.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("receipt_email", receipt_email.to_s) if !receipt_email.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_group", transfer_group.to_s) if !transfer_group.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ChargesApi.post_charges_charge",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>  <p>Uncaptured payments expire a set number of days after they are created (<a href=\"/docs/charges/placing-a-hold\">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>  <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href=\"/docs/api/payment_intents/capture\">Capture a PaymentIntent</a>.</p>
    # @required @param charge [String?]
    # @optional @param amount [Int32?] The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.
    # @optional @param application_fee [Int32?] An application fee to add on to this charge.
    # @optional @param application_fee_amount [Int32?] An application fee amount to add on to this charge, which must be less than or equal to the original amount.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param receipt_email [String?] The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.
    # @optional @param statement_descriptor [String?] For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    # @return [Stripe::Charge]
    def post_charges_charge_capture(
      *,
      charge : String? = nil,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      receipt_email : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = post_charges_charge_capture_with_http_info(charge: charge, amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, expand: expand, receipt_email: receipt_email, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Capture the payment of an existing, uncaptured charge that was created with the &lt;code&gt;capture&lt;/code&gt; option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;), after which they are marked as refunded and capture attempts will fail.&lt;/p&gt;  &lt;p&gt;Don’t use this method to capture a PaymentIntent-initiated charge. Use &lt;a href&#x3D;\&quot;/docs/api/payment_intents/capture\&quot;&gt;Capture a PaymentIntent&lt;/a&gt;.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param amount [Int32?] The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.
    # @optional @param application_fee [Int32?] An application fee to add on to this charge.
    # @optional @param application_fee_amount [Int32?] An application fee amount to add on to this charge, which must be less than or equal to the original amount.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param receipt_email [String?] The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.
    # @optional @param statement_descriptor [String?] For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def post_charges_charge_capture_with_http_info(
      *,
      charge : String? = nil,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      receipt_email : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_charges_charge_capture(charge: charge, amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, expand: expand, receipt_email: receipt_email, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ChargesApi#post_charges_charge_capture\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Capture the payment of an existing, uncaptured charge that was created with the &lt;code&gt;capture&lt;/code&gt; option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;), after which they are marked as refunded and capture attempts will fail.&lt;/p&gt;  &lt;p&gt;Don’t use this method to capture a PaymentIntent-initiated charge. Use &lt;a href&#x3D;\&quot;/docs/api/payment_intents/capture\&quot;&gt;Capture a PaymentIntent&lt;/a&gt;.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param amount [Int32?] The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.
    # @optional @param application_fee [Int32?] An application fee to add on to this charge.
    # @optional @param application_fee_amount [Int32?] An application fee amount to add on to this charge, which must be less than or equal to the original amount.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param receipt_email [String?] The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.
    # @optional @param statement_descriptor [String?] For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
    # @optional @param statement_descriptor_suffix [String?] Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param transfer_group [String?] A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    # @return nil
    def post_charges_charge_capture(
      *,
      charge : String? = nil,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      receipt_email : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_charges_charge_capture(charge: charge, amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, expand: expand, receipt_email: receipt_email, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group).execute(&block)
    end

    POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_CHARGE                      = 5000
    POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR        =   22
    POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX =   22

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_capture(
      *,
      charge : String? = nil,
      amount : Int64? = nil,
      application_fee : Int64? = nil,
      application_fee_amount : Int64? = nil,
      expand : Array(String)? = nil,
      receipt_email : String? = nil,
      statement_descriptor : String? = nil,
      statement_descriptor_suffix : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      transfer_group : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ChargesApi.post_charges_charge_capture ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"charge\" is required and cannot be null") if charge.nil?
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_CHARGE)
        end

        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_statement_descriptor_suffix = statement_descriptor_suffix).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix", statement_descriptor_suffix.to_s.size, POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/capture".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee", application_fee.to_s) if !application_fee.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("receipt_email", receipt_email.to_s) if !receipt_email.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor_suffix", statement_descriptor_suffix.to_s) if !statement_descriptor_suffix.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_group", transfer_group.to_s) if !transfer_group.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ChargesApi.post_charges_charge_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
