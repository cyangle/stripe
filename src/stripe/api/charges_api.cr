#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class ChargesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return charges for the customer specified by this customer ID.
    # @optional @param transfer_group [String?] Only return charges for this transfer group.
    # @optional @param payment_intent [String?] Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::ChargeList]
    def get_charges(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::ChargeList
      data, _status_code, _headers = get_charges_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, transfer_group: transfer_group, payment_intent: payment_intent, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return charges for the customer specified by this customer ID.
    # @optional @param transfer_group [String?] Only return charges for this transfer group.
    # @optional @param payment_intent [String?] Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::ChargeList, Integer, Hash)] Stripe::ChargeList, response status code and response headers
    def get_charges_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::ChargeList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_charges(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, transfer_group: transfer_group, payment_intent: payment_intent, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ChargesApi#get_charges\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ChargeList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return charges for the customer specified by this customer ID.
    # @optional @param transfer_group [String?] Only return charges for this transfer group.
    # @optional @param payment_intent [String?] Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_charges(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_charges(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, transfer_group: transfer_group, payment_intent: payment_intent, expand: expand, created: created).execute(&block)
    end

    GET_CHARGES_MAX_LENGTH_FOR_CUSTOMER       = 5000
    GET_CHARGES_MAX_LENGTH_FOR_TRANSFER_GROUP = 5000
    GET_CHARGES_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_get_charges(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      transfer_group : String? = nil,
      payment_intent : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ChargesApi.get_charges ..." }
      end

      if client_side_validation
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_CHARGES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_transfer_group = transfer_group).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transfer_group", transfer_group.to_s.size, GET_CHARGES_MAX_LENGTH_FOR_TRANSFER_GROUP)
        end
        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_CHARGES_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChargesApi.get_charges",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
    # @required @param charge [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Charge]
    def get_charges_charge(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = get_charges_charge_with_http_info(charge: charge, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def get_charges_charge_with_http_info(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_charges_charge(charge: charge, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ChargesApi#get_charges_charge\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_charges_charge(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_charges_charge(charge: charge, expand: expand).execute(&block)
    end

    GET_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE = 5000

    # @return Crest::Request
    def build_api_request_for_get_charges_charge(
      *,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ChargesApi.get_charges_charge ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"charge\" is required and cannot be null") if charge.nil?
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, GET_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE)
        end
      end

      # resource path
      local_var_path = "/v1/charges/{charge}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChargesApi.get_charges_charge",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for charges you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_charges_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_charges_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_charges_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_charges_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ChargesApi#get_charges_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_charges_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_charges_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_CHARGES_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_CHARGES_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_charges_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ChargesApi.get_charges_search ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_CHARGES_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_CHARGES_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/charges/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChargesApi.get_charges_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>
    # @optional @param post_charges_request [Stripe::PostChargesRequest?]
    # @return [Stripe::Charge]
    def post_charges(
      *,
      post_charges_request : Stripe::PostChargesRequest? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = post_charges_with_http_info(post_charges_request: post_charges_request)
      data
    end

    # &lt;p&gt;To charge a credit card or other payment source, you create a &lt;code&gt;Charge&lt;/code&gt; object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).&lt;/p&gt;
    # @optional @param post_charges_request [Stripe::PostChargesRequest?]
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def post_charges_with_http_info(
      *,
      post_charges_request : Stripe::PostChargesRequest? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_charges(post_charges_request: post_charges_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ChargesApi#post_charges\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;To charge a credit card or other payment source, you create a &lt;code&gt;Charge&lt;/code&gt; object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).&lt;/p&gt;
    # @optional @param post_charges_request [Stripe::PostChargesRequest?]
    # @return nil
    def post_charges(
      *,
      post_charges_request : Stripe::PostChargesRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_charges(post_charges_request: post_charges_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges(
      *,
      post_charges_request : Stripe::PostChargesRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ChargesApi.post_charges ..." }
      end

      if client_side_validation
        unless (_post_charges_request = post_charges_request).nil?
          _post_charges_request.validate if _post_charges_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_charges_request, content_type: header_params["Content-Type"]?) if !post_charges_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ChargesApi.post_charges",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param charge [String?]
    # @optional @param post_charges_charge_request [Stripe::PostChargesChargeRequest?]
    # @return [Stripe::Charge]
    def post_charges_charge(
      *,
      charge : String? = nil,
      post_charges_charge_request : Stripe::PostChargesChargeRequest? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = post_charges_charge_with_http_info(charge: charge, post_charges_charge_request: post_charges_charge_request)
      data
    end

    # &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param post_charges_charge_request [Stripe::PostChargesChargeRequest?]
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def post_charges_charge_with_http_info(
      *,
      charge : String? = nil,
      post_charges_charge_request : Stripe::PostChargesChargeRequest? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_charges_charge(charge: charge, post_charges_charge_request: post_charges_charge_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ChargesApi#post_charges_charge\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param post_charges_charge_request [Stripe::PostChargesChargeRequest?]
    # @return nil
    def post_charges_charge(
      *,
      charge : String? = nil,
      post_charges_charge_request : Stripe::PostChargesChargeRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_charges_charge(charge: charge, post_charges_charge_request: post_charges_charge_request).execute(&block)
    end

    POST_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE = 5000

    # @return Crest::Request
    def build_api_request_for_post_charges_charge(
      *,
      charge : String? = nil,
      post_charges_charge_request : Stripe::PostChargesChargeRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ChargesApi.post_charges_charge ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"charge\" is required and cannot be null") if charge.nil?
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, POST_CHARGES_CHARGE_MAX_LENGTH_FOR_CHARGE)
        end
        unless (_post_charges_charge_request = post_charges_charge_request).nil?
          _post_charges_charge_request.validate if _post_charges_charge_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges/{charge}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_charges_charge_request, content_type: header_params["Content-Type"]?) if !post_charges_charge_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ChargesApi.post_charges_charge",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href=\"#create_charge\">created a charge</a> with the capture option set to false.</p>  <p>Uncaptured payments expire a set number of days after they are created (<a href=\"/docs/charges/placing-a-hold\">7 by default</a>). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
    # @required @param charge [String?]
    # @optional @param post_charges_charge_capture_request [Stripe::PostChargesChargeCaptureRequest?]
    # @return [Stripe::Charge]
    def post_charges_charge_capture(
      *,
      charge : String? = nil,
      post_charges_charge_capture_request : Stripe::PostChargesChargeCaptureRequest? = nil
    ) : Stripe::Charge
      data, _status_code, _headers = post_charges_charge_capture_with_http_info(charge: charge, post_charges_charge_capture_request: post_charges_charge_capture_request)
      data
    end

    # &lt;p&gt;Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you &lt;a href&#x3D;\&quot;#create_charge\&quot;&gt;created a charge&lt;/a&gt; with the capture option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param post_charges_charge_capture_request [Stripe::PostChargesChargeCaptureRequest?]
    # @return [Tuple(Stripe::Charge, Integer, Hash)] Stripe::Charge, response status code and response headers
    def post_charges_charge_capture_with_http_info(
      *,
      charge : String? = nil,
      post_charges_charge_capture_request : Stripe::PostChargesChargeCaptureRequest? = nil
    ) : Tuple(Stripe::Charge, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_charges_charge_capture(charge: charge, post_charges_charge_capture_request: post_charges_charge_capture_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ChargesApi#post_charges_charge_capture\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Charge.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you &lt;a href&#x3D;\&quot;#create_charge\&quot;&gt;created a charge&lt;/a&gt; with the capture option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.&lt;/p&gt;
    # @required @param charge [String?]
    # @optional @param post_charges_charge_capture_request [Stripe::PostChargesChargeCaptureRequest?]
    # @return nil
    def post_charges_charge_capture(
      *,
      charge : String? = nil,
      post_charges_charge_capture_request : Stripe::PostChargesChargeCaptureRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_charges_charge_capture(charge: charge, post_charges_charge_capture_request: post_charges_charge_capture_request).execute(&block)
    end

    POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_CHARGE = 5000

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_capture(
      *,
      charge : String? = nil,
      post_charges_charge_capture_request : Stripe::PostChargesChargeCaptureRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ChargesApi.post_charges_charge_capture ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"charge\" is required and cannot be null") if charge.nil?
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, POST_CHARGES_CHARGE_CAPTURE_MAX_LENGTH_FOR_CHARGE)
        end
        unless (_post_charges_charge_capture_request = post_charges_charge_capture_request).nil?
          _post_charges_charge_capture_request.validate if _post_charges_charge_capture_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/capture".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_charges_charge_capture_request, content_type: header_params["Content-Type"]?) if !post_charges_charge_capture_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ChargesApi.post_charges_charge_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
