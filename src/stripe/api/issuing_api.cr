#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/authorization_controls_param"
require "../models/authorization_controls_param_v2"
require "../models/billing_specs"
require "../models/carrier_text_param"
require "../models/company_param"
require "../models/encrypted_pin_param"
require "../models/error"
require "../models/evidence_param"
require "../models/get_accounts_created_parameter"
require "../models/individual_param"

require "../models/issuing_authorization"
require "../models/issuing_authorization_list"
require "../models/issuing_card"
require "../models/issuing_card_list"
require "../models/issuing_cardholder"
require "../models/issuing_cardholder_list"
require "../models/issuing_dispute"
require "../models/issuing_dispute_list"
require "../models/issuing_network_token_list"
require "../models/issuing_personalization_design"
require "../models/issuing_personalization_design_list"
require "../models/issuing_physical_bundle"
require "../models/issuing_token"
require "../models/issuing_transaction"
require "../models/issuing_transaction_list"
require "../models/post_accounts_request_metadata"
require "../models/post_issuing_cards_request_second_line"
require "../models/post_issuing_personalization_designs_personalization_design_request_card_logo"
require "../models/post_issuing_personalization_designs_personalization_design_request_carrier_text"
require "../models/post_issuing_personalization_designs_personalization_design_request_lookup_key"
require "../models/post_issuing_personalization_designs_personalization_design_request_name"
require "../models/preferences_list_param"
require "../models/preferences_param"
require "../models/shipping_specs"
require "../models/treasury_param"

module Stripe
  class IssuingApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return authorizations that belong to the given card.
    # @optional @param cardholder [String?] Only return authorizations that belong to the given cardholder.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return authorizations that were created during the given date interval.
    # @optional @param status [String?] Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingAuthorizationList]
    def get_issuing_authorizations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingAuthorizationList
      data, _status_code, _headers = get_issuing_authorizations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, created: created, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return authorizations that belong to the given card.
    # @optional @param cardholder [String?] Only return authorizations that belong to the given cardholder.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return authorizations that were created during the given date interval.
    # @optional @param status [String?] Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingAuthorizationList, Integer, Hash)] Stripe::IssuingAuthorizationList, response status code and response headers
    def get_issuing_authorizations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingAuthorizationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_authorizations(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, created: created, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_authorizations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorizationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return authorizations that belong to the given card.
    # @optional @param cardholder [String?] Only return authorizations that belong to the given cardholder.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return authorizations that were created during the given date interval.
    # @optional @param status [String?] Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_authorizations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_authorizations(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, created: created, status: status, expand: expand).execute(&block)
    end

    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARD           = 5000
    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARDHOLDER     = 5000
    GET_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_STATUS       = String.static_array("closed", "pending", "reversed")

    # @return Crest::Request
    def build_api_request_for_get_issuing_authorizations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_authorizations ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARD)
        end
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARDHOLDER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["card"] = card.to_s if !card.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_authorizations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Authorization</code> object.</p>
    # @required @param authorization [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingAuthorization]
    def get_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = get_issuing_authorizations_authorization_with_http_info(authorization: authorization, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def get_issuing_authorizations_authorization_with_http_info(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_authorizations_authorization(authorization: authorization, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_authorizations_authorization\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_authorizations_authorization(authorization: authorization, expand: expand).execute(&block)
    end

    GET_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_authorizations_authorization ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, GET_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_authorizations_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param email [String?] Only return cardholders that have the given email address.
    # @optional @param phone_number [String?] Only return cardholders that have the given phone number.
    # @optional @param status [String?] Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
    # @optional @param _type [String?] Only return cardholders that have the given type. One of `individual` or `company`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cardholders that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCardholderList]
    def get_issuing_cardholders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingCardholderList
      data, _status_code, _headers = get_issuing_cardholders_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, email: email, phone_number: phone_number, status: status, _type: _type, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param email [String?] Only return cardholders that have the given email address.
    # @optional @param phone_number [String?] Only return cardholders that have the given phone number.
    # @optional @param status [String?] Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
    # @optional @param _type [String?] Only return cardholders that have the given type. One of `individual` or `company`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cardholders that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCardholderList, Integer, Hash)] Stripe::IssuingCardholderList, response status code and response headers
    def get_issuing_cardholders_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingCardholderList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cardholders(ending_before: ending_before, starting_after: starting_after, limit: limit, email: email, phone_number: phone_number, status: status, _type: _type, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_cardholders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholderList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param email [String?] Only return cardholders that have the given email address.
    # @optional @param phone_number [String?] Only return cardholders that have the given phone number.
    # @optional @param status [String?] Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
    # @optional @param _type [String?] Only return cardholders that have the given type. One of `individual` or `company`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cardholders that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_cardholders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cardholders(ending_before: ending_before, starting_after: starting_after, limit: limit, email: email, phone_number: phone_number, status: status, _type: _type, created: created, expand: expand).execute(&block)
    end

    GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_STATUS       = String.static_array("active", "blocked", "inactive")
    GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR__TYPE        = String.static_array("company", "individual")

    # @return Crest::Request
    def build_api_request_for_get_issuing_cardholders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_cardholders ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_STATUS)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR__TYPE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["email"] = email.to_s if !email.nil?
      query_params["phone_number"] = phone_number.to_s if !phone_number.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cardholders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
    # @required @param cardholder [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCardholder]
    def get_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingCardholder
      data, _status_code, _headers = get_issuing_cardholders_cardholder_with_http_info(cardholder: cardholder, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCardholder, Integer, Hash)] Stripe::IssuingCardholder, response status code and response headers
    def get_issuing_cardholders_cardholder_with_http_info(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingCardholder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cardholders_cardholder(cardholder: cardholder, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_cardholders_cardholder\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cardholders_cardholder(cardholder: cardholder, expand: expand).execute(&block)
    end

    GET_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_cardholders_cardholder ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"cardholder\" is required and cannot be null") if cardholder.nil?
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders/{cardholder}".sub("{" + "cardholder" + "}", URI.encode_path(cardholder.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cardholders_cardholder",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param cardholder [String?] Only return cards belonging to the Cardholder with the provided ID.
    # @optional @param exp_month [Int32?] Only return cards that have the given expiration month.
    # @optional @param exp_year [Int32?] Only return cards that have the given expiration year.
    # @optional @param last4 [String?] Only return cards that have the given last four digits.
    # @optional @param status [String?] Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
    # @optional @param _type [String?] Only return cards that have the given type. One of `virtual` or `physical`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cards that were issued during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param personalization_design [String?]
    # @return [Stripe::IssuingCardList]
    def get_issuing_cards(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      personalization_design : String? = nil
    ) : Stripe::IssuingCardList
      data, _status_code, _headers = get_issuing_cards_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, cardholder: cardholder, exp_month: exp_month, exp_year: exp_year, last4: last4, status: status, _type: _type, created: created, expand: expand, personalization_design: personalization_design)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param cardholder [String?] Only return cards belonging to the Cardholder with the provided ID.
    # @optional @param exp_month [Int32?] Only return cards that have the given expiration month.
    # @optional @param exp_year [Int32?] Only return cards that have the given expiration year.
    # @optional @param last4 [String?] Only return cards that have the given last four digits.
    # @optional @param status [String?] Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
    # @optional @param _type [String?] Only return cards that have the given type. One of `virtual` or `physical`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cards that were issued during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param personalization_design [String?]
    # @return [Tuple(Stripe::IssuingCardList, Integer, Hash)] Stripe::IssuingCardList, response status code and response headers
    def get_issuing_cards_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      personalization_design : String? = nil
    ) : Tuple(Stripe::IssuingCardList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cards(ending_before: ending_before, starting_after: starting_after, limit: limit, cardholder: cardholder, exp_month: exp_month, exp_year: exp_year, last4: last4, status: status, _type: _type, created: created, expand: expand, personalization_design: personalization_design)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_cards\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param cardholder [String?] Only return cards belonging to the Cardholder with the provided ID.
    # @optional @param exp_month [Int32?] Only return cards that have the given expiration month.
    # @optional @param exp_year [Int32?] Only return cards that have the given expiration year.
    # @optional @param last4 [String?] Only return cards that have the given last four digits.
    # @optional @param status [String?] Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
    # @optional @param _type [String?] Only return cards that have the given type. One of `virtual` or `physical`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cards that were issued during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param personalization_design [String?]
    # @return nil
    def get_issuing_cards(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      personalization_design : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cards(ending_before: ending_before, starting_after: starting_after, limit: limit, cardholder: cardholder, exp_month: exp_month, exp_year: exp_year, last4: last4, status: status, _type: _type, created: created, expand: expand, personalization_design: personalization_design).execute(&block)
    end

    GET_ISSUING_CARDS_MAX_LENGTH_FOR_ENDING_BEFORE          = 5000
    GET_ISSUING_CARDS_MAX_LENGTH_FOR_STARTING_AFTER         = 5000
    GET_ISSUING_CARDS_MAX_LENGTH_FOR_CARDHOLDER             = 5000
    GET_ISSUING_CARDS_MAX_LENGTH_FOR_LAST4                  = 5000
    GET_ISSUING_CARDS_VALID_VALUES_FOR_STATUS               = String.static_array("active", "canceled", "inactive")
    GET_ISSUING_CARDS_VALID_VALUES_FOR__TYPE                = String.static_array("physical", "virtual")
    GET_ISSUING_CARDS_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_cards(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      personalization_design : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_cards ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_CARDHOLDER)
        end

        unless (_last4 = last4).nil?
          OpenApi::PrimitiveValidator.validate_max_length("last4", last4.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_LAST4)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_CARDS_VALID_VALUES_FOR_STATUS)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_ISSUING_CARDS_VALID_VALUES_FOR__TYPE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      query_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      query_params["last4"] = last4.to_s if !last4.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["personalization_design"] = personalization_design.to_s if !personalization_design.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Card</code> object.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def get_issuing_cards_card(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = get_issuing_cards_card_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def get_issuing_cards_card_with_http_info(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cards_card(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_cards_card\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_cards_card(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cards_card(card: card, expand: expand).execute(&block)
    end

    GET_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_cards_card(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_cards_card ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, GET_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards/{card}".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cards_card",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return Issuing disputes that were created during the given date interval.
    # @optional @param status [String?] Select Issuing disputes with the given status.
    # @optional @param transaction [String?] Select the Issuing dispute for the given transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingDisputeList]
    def get_issuing_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingDisputeList
      data, _status_code, _headers = get_issuing_disputes_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, transaction: transaction, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return Issuing disputes that were created during the given date interval.
    # @optional @param status [String?] Select Issuing disputes with the given status.
    # @optional @param transaction [String?] Select the Issuing dispute for the given transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingDisputeList, Integer, Hash)] Stripe::IssuingDisputeList, response status code and response headers
    def get_issuing_disputes_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingDisputeList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_disputes(ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, transaction: transaction, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_disputes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDisputeList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return Issuing disputes that were created during the given date interval.
    # @optional @param status [String?] Select Issuing disputes with the given status.
    # @optional @param transaction [String?] Select the Issuing dispute for the given transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_disputes(ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, transaction: transaction, expand: expand).execute(&block)
    end

    GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_DISPUTES_VALID_VALUES_FOR_STATUS       = String.static_array("expired", "lost", "submitted", "unsubmitted", "won")
    GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_TRANSACTION    = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_disputes ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_DISPUTES_VALID_VALUES_FOR_STATUS)
        end
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_TRANSACTION)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["transaction"] = transaction.to_s if !transaction.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Dispute</code> object.</p>
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingDispute]
    def get_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = get_issuing_disputes_dispute_with_http_info(dispute: dispute, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def get_issuing_disputes_dispute_with_http_info(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_disputes_dispute(dispute: dispute, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_disputes_dispute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_disputes_dispute(dispute: dispute, expand: expand).execute(&block)
    end

    GET_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_disputes_dispute ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, GET_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param lookup_keys [Array(Array(String))?] Only return personalization designs with the given lookup keys.
    # @optional @param preferences [Stripe::PreferencesListParam?] Only return personalization designs with the given preferences.
    # @optional @param status [String?] Only return personalization designs with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingPersonalizationDesignList]
    def get_issuing_personalization_designs(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      lookup_keys : Array(Array(String))? = nil,
      preferences : Stripe::PreferencesListParam? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingPersonalizationDesignList
      data, _status_code, _headers = get_issuing_personalization_designs_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, lookup_keys: lookup_keys, preferences: preferences, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param lookup_keys [Array(Array(String))?] Only return personalization designs with the given lookup keys.
    # @optional @param preferences [Stripe::PreferencesListParam?] Only return personalization designs with the given preferences.
    # @optional @param status [String?] Only return personalization designs with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingPersonalizationDesignList, Integer, Hash)] Stripe::IssuingPersonalizationDesignList, response status code and response headers
    def get_issuing_personalization_designs_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      lookup_keys : Array(Array(String))? = nil,
      preferences : Stripe::PreferencesListParam? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingPersonalizationDesignList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_personalization_designs(ending_before: ending_before, starting_after: starting_after, limit: limit, lookup_keys: lookup_keys, preferences: preferences, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_personalization_designs\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPersonalizationDesignList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param lookup_keys [Array(Array(String))?] Only return personalization designs with the given lookup keys.
    # @optional @param preferences [Stripe::PreferencesListParam?] Only return personalization designs with the given preferences.
    # @optional @param status [String?] Only return personalization designs with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_personalization_designs(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      lookup_keys : Array(Array(String))? = nil,
      preferences : Stripe::PreferencesListParam? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_personalization_designs(ending_before: ending_before, starting_after: starting_after, limit: limit, lookup_keys: lookup_keys, preferences: preferences, status: status, expand: expand).execute(&block)
    end

    GET_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_PERSONALIZATION_DESIGNS_VALID_VALUES_FOR_STATUS       = String.static_array("active", "inactive", "rejected", "review")

    # @return Crest::Request
    def build_api_request_for_get_issuing_personalization_designs(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      lookup_keys : Array(Array(String))? = nil,
      preferences : Stripe::PreferencesListParam? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_personalization_designs ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_preferences = preferences).nil?
          _preferences.validate if _preferences.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_PERSONALIZATION_DESIGNS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/personalization_designs"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["lookup_keys"] = @api_client.build_collection_param(lookup_keys, "csv") if !lookup_keys.nil? && !lookup_keys.empty?
      query_params["preferences"] = preferences.to_s if !preferences.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_personalization_designs",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a personalization design object.</p>
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingPersonalizationDesign]
    def get_issuing_personalization_designs_personalization_design(
      *,
      personalization_design : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingPersonalizationDesign
      data, _status_code, _headers = get_issuing_personalization_designs_personalization_design_with_http_info(personalization_design: personalization_design, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a personalization design object.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingPersonalizationDesign, Integer, Hash)] Stripe::IssuingPersonalizationDesign, response status code and response headers
    def get_issuing_personalization_designs_personalization_design_with_http_info(
      *,
      personalization_design : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingPersonalizationDesign, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_personalization_designs_personalization_design(personalization_design: personalization_design, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_personalization_designs_personalization_design\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPersonalizationDesign.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a personalization design object.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_personalization_designs_personalization_design(
      *,
      personalization_design : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_personalization_designs_personalization_design(personalization_design: personalization_design, expand: expand).execute(&block)
    end

    GET_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_personalization_designs_personalization_design(
      *,
      personalization_design : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_personalization_designs_personalization_design ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"personalization_design\" is required and cannot be null") if personalization_design.nil?
        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, GET_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/personalization_designs/{personalization_design}".sub("{" + "personalization_design" + "}", URI.encode_path(personalization_design.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_personalization_designs_personalization_design",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a physical bundle object.</p>
    # @required @param physical_bundle [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingPhysicalBundle]
    def get_issuing_physical_bundles_physical_bundle(
      *,
      physical_bundle : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingPhysicalBundle
      data, _status_code, _headers = get_issuing_physical_bundles_physical_bundle_with_http_info(physical_bundle: physical_bundle, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a physical bundle object.&lt;/p&gt;
    # @required @param physical_bundle [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingPhysicalBundle, Integer, Hash)] Stripe::IssuingPhysicalBundle, response status code and response headers
    def get_issuing_physical_bundles_physical_bundle_with_http_info(
      *,
      physical_bundle : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingPhysicalBundle, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_physical_bundles_physical_bundle(physical_bundle: physical_bundle, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_physical_bundles_physical_bundle\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPhysicalBundle.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a physical bundle object.&lt;/p&gt;
    # @required @param physical_bundle [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_physical_bundles_physical_bundle(
      *,
      physical_bundle : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_physical_bundles_physical_bundle(physical_bundle: physical_bundle, expand: expand).execute(&block)
    end

    GET_ISSUING_PHYSICAL_BUNDLES_PHYSICAL_BUNDLE_MAX_LENGTH_FOR_PHYSICAL_BUNDLE = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_physical_bundles_physical_bundle(
      *,
      physical_bundle : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_physical_bundles_physical_bundle ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"physical_bundle\" is required and cannot be null") if physical_bundle.nil?
        unless (_physical_bundle = physical_bundle).nil?
          OpenApi::PrimitiveValidator.validate_max_length("physical_bundle", physical_bundle.to_s.size, GET_ISSUING_PHYSICAL_BUNDLES_PHYSICAL_BUNDLE_MAX_LENGTH_FOR_PHYSICAL_BUNDLE)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/physical_bundles/{physical_bundle}".sub("{" + "physical_bundle" + "}", URI.encode_path(physical_bundle.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_physical_bundles_physical_bundle",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
    # @required @param card [String?] The Issuing card identifier to list tokens for.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return Issuing tokens that were created during the given date interval.
    # @optional @param status [String?] Select Issuing tokens with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingNetworkTokenList]
    def get_issuing_tokens(
      *,
      card : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingNetworkTokenList
      data, _status_code, _headers = get_issuing_tokens_with_http_info(card: card, ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Lists all Issuing &lt;code&gt;Token&lt;/code&gt; objects for a given card.&lt;/p&gt;
    # @required @param card [String?] The Issuing card identifier to list tokens for.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return Issuing tokens that were created during the given date interval.
    # @optional @param status [String?] Select Issuing tokens with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingNetworkTokenList, Integer, Hash)] Stripe::IssuingNetworkTokenList, response status code and response headers
    def get_issuing_tokens_with_http_info(
      *,
      card : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingNetworkTokenList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_tokens(card: card, ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_tokens\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingNetworkTokenList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Lists all Issuing &lt;code&gt;Token&lt;/code&gt; objects for a given card.&lt;/p&gt;
    # @required @param card [String?] The Issuing card identifier to list tokens for.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return Issuing tokens that were created during the given date interval.
    # @optional @param status [String?] Select Issuing tokens with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_tokens(
      *,
      card : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_tokens(card: card, ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, expand: expand).execute(&block)
    end

    GET_ISSUING_TOKENS_MAX_LENGTH_FOR_CARD           = 5000
    GET_ISSUING_TOKENS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_TOKENS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_TOKENS_VALID_VALUES_FOR_STATUS       = String.static_array("active", "deleted", "requested", "suspended")

    # @return Crest::Request
    def build_api_request_for_get_issuing_tokens(
      *,
      card : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_tokens ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, GET_ISSUING_TOKENS_MAX_LENGTH_FOR_CARD)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_TOKENS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_TOKENS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_TOKENS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/tokens"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["card"] = card.to_s if !card.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Token</code> object.</p>
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingToken]
    def get_issuing_tokens_token(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingToken
      data, _status_code, _headers = get_issuing_tokens_token_with_http_info(token: token, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Token&lt;/code&gt; object.&lt;/p&gt;
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingToken, Integer, Hash)] Stripe::IssuingToken, response status code and response headers
    def get_issuing_tokens_token_with_http_info(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingToken, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_tokens_token(token: token, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_tokens_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingToken.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Token&lt;/code&gt; object.&lt;/p&gt;
    # @required @param token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_tokens_token(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_tokens_token(token: token, expand: expand).execute(&block)
    end

    GET_ISSUING_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_tokens_token(
      *,
      token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_tokens_token ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"token\" is required and cannot be null") if token.nil?
        unless (_token = token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("token", token.to_s.size, GET_ISSUING_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/tokens/{token}".sub("{" + "token" + "}", URI.encode_path(token.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_tokens_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return transactions that belong to the given card.
    # @optional @param cardholder [String?] Only return transactions that belong to the given cardholder.
    # @optional @param _type [String?] Only return transactions that have the given type. One of `capture` or `refund`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return transactions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingTransactionList]
    def get_issuing_transactions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingTransactionList
      data, _status_code, _headers = get_issuing_transactions_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, _type: _type, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return transactions that belong to the given card.
    # @optional @param cardholder [String?] Only return transactions that belong to the given cardholder.
    # @optional @param _type [String?] Only return transactions that have the given type. One of `capture` or `refund`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return transactions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingTransactionList, Integer, Hash)] Stripe::IssuingTransactionList, response status code and response headers
    def get_issuing_transactions_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingTransactionList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_transactions(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, _type: _type, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_transactions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransactionList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return transactions that belong to the given card.
    # @optional @param cardholder [String?] Only return transactions that belong to the given cardholder.
    # @optional @param _type [String?] Only return transactions that have the given type. One of `capture` or `refund`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return transactions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_transactions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_transactions(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, _type: _type, created: created, expand: expand).execute(&block)
    end

    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARD           = 5000
    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARDHOLDER     = 5000
    GET_ISSUING_TRANSACTIONS_VALID_VALUES_FOR__TYPE        = String.static_array("capture", "refund")

    # @return Crest::Request
    def build_api_request_for_get_issuing_transactions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_transactions ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARD)
        end
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARDHOLDER)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_ISSUING_TRANSACTIONS_VALID_VALUES_FOR__TYPE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/transactions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["card"] = card.to_s if !card.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Transaction</code> object.</p>
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingTransaction]
    def get_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingTransaction
      data, _status_code, _headers = get_issuing_transactions_transaction_with_http_info(transaction: transaction, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingTransaction, Integer, Hash)] Stripe::IssuingTransaction, response status code and response headers
    def get_issuing_transactions_transaction_with_http_info(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_transactions_transaction(transaction: transaction, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#get_issuing_transactions_transaction\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_transactions_transaction(transaction: transaction, expand: expand).execute(&block)
    end

    GET_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.get_issuing_transactions_transaction ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transaction\" is required and cannot be null") if transaction.nil?
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, GET_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/transactions/{transaction}".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::IssuingAuthorization]
    def post_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_issuing_authorizations_authorization_with_http_info(authorization: authorization, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_issuing_authorizations_authorization_with_http_info(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_authorizations_authorization(authorization: authorization, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_authorizations_authorization\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_authorizations_authorization(authorization: authorization, expand: expand, metadata: metadata).execute(&block)
    end

    POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_authorizations_authorization ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_authorizations_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href=\"/docs/issuing/controls/real-time-authorizations\">real-time authorization</a> flow.  This method is deprecated. Instead, <a href=\"/docs/issuing/controls/real-time-authorizations#authorization-handling\">respond directly to the webhook request to approve an authorization</a>.</p>
    # @required @param authorization [String?]
    # @optional @param amount [Int32?] If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::IssuingAuthorization]
    def post_issuing_authorizations_authorization_approve(
      *,
      authorization : String? = nil,
      amount : Int64? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_issuing_authorizations_authorization_approve_with_http_info(authorization: authorization, amount: amount, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;[Deprecated] Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.  This method is deprecated. Instead, &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations#authorization-handling\&quot;&gt;respond directly to the webhook request to approve an authorization&lt;/a&gt;.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param amount [Int32?] If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_issuing_authorizations_authorization_approve_with_http_info(
      *,
      authorization : String? = nil,
      amount : Int64? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_authorizations_authorization_approve(authorization: authorization, amount: amount, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_authorizations_authorization_approve\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;[Deprecated] Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.  This method is deprecated. Instead, &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations#authorization-handling\&quot;&gt;respond directly to the webhook request to approve an authorization&lt;/a&gt;.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param amount [Int32?] If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_issuing_authorizations_authorization_approve(
      *,
      authorization : String? = nil,
      amount : Int64? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_authorizations_authorization_approve(authorization: authorization, amount: amount, expand: expand, metadata: metadata).execute(&block)
    end

    POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_APPROVE_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization_approve(
      *,
      authorization : String? = nil,
      amount : Int64? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_authorizations_authorization_approve ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_APPROVE_MAX_LENGTH_FOR_AUTHORIZATION)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}/approve".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_authorizations_authorization_approve",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href=\"/docs/issuing/controls/real-time-authorizations\">real time authorization</a> flow. This method is deprecated. Instead, <a href=\"/docs/issuing/controls/real-time-authorizations#authorization-handling\">respond directly to the webhook request to decline an authorization</a>.</p>
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::IssuingAuthorization]
    def post_issuing_authorizations_authorization_decline(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_issuing_authorizations_authorization_decline_with_http_info(authorization: authorization, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;[Deprecated] Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow. This method is deprecated. Instead, &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations#authorization-handling\&quot;&gt;respond directly to the webhook request to decline an authorization&lt;/a&gt;.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_issuing_authorizations_authorization_decline_with_http_info(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_authorizations_authorization_decline(authorization: authorization, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_authorizations_authorization_decline\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;[Deprecated] Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow. This method is deprecated. Instead, &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations#authorization-handling\&quot;&gt;respond directly to the webhook request to decline an authorization&lt;/a&gt;.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_issuing_authorizations_authorization_decline(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_authorizations_authorization_decline(authorization: authorization, expand: expand, metadata: metadata).execute(&block)
    end

    POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_DECLINE_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization_decline(
      *,
      authorization : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_authorizations_authorization_decline ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_DECLINE_MAX_LENGTH_FOR_AUTHORIZATION)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}/decline".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_authorizations_authorization_decline",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
    # @required @param billing [Stripe::BillingSpecs?]
    # @required @param name [String?] The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.
    # @optional @param company [Stripe::CompanyParam?]
    # @optional @param email [String?] The cardholder's email address.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param individual [Stripe::IndividualParam?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param phone_number [String?] The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
    # @optional @param preferred_locales [Array(String)?] The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
    # @optional @param spending_controls [Stripe::AuthorizationControlsParamV2?]
    # @optional @param status [String?] Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
    # @optional @param _type [String?] One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
    # @return [Stripe::IssuingCardholder]
    def post_issuing_cardholders(
      *,
      billing : Stripe::BillingSpecs? = nil,
      name : String? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil,
      _type : String? = nil
    ) : Stripe::IssuingCardholder
      data, _status_code, _headers = post_issuing_cardholders_with_http_info(billing: billing, name: name, company: company, email: email, expand: expand, individual: individual, metadata: metadata, phone_number: phone_number, preferred_locales: preferred_locales, spending_controls: spending_controls, status: status, _type: _type)
      data
    end

    # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
    # @required @param billing [Stripe::BillingSpecs?]
    # @required @param name [String?] The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.
    # @optional @param company [Stripe::CompanyParam?]
    # @optional @param email [String?] The cardholder's email address.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param individual [Stripe::IndividualParam?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param phone_number [String?] The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
    # @optional @param preferred_locales [Array(String)?] The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
    # @optional @param spending_controls [Stripe::AuthorizationControlsParamV2?]
    # @optional @param status [String?] Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
    # @optional @param _type [String?] One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
    # @return [Tuple(Stripe::IssuingCardholder, Integer, Hash)] Stripe::IssuingCardholder, response status code and response headers
    def post_issuing_cardholders_with_http_info(
      *,
      billing : Stripe::BillingSpecs? = nil,
      name : String? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil,
      _type : String? = nil
    ) : Tuple(Stripe::IssuingCardholder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cardholders(billing: billing, name: name, company: company, email: email, expand: expand, individual: individual, metadata: metadata, phone_number: phone_number, preferred_locales: preferred_locales, spending_controls: spending_controls, status: status, _type: _type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_cardholders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
    # @required @param billing [Stripe::BillingSpecs?]
    # @required @param name [String?] The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.
    # @optional @param company [Stripe::CompanyParam?]
    # @optional @param email [String?] The cardholder's email address.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param individual [Stripe::IndividualParam?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param phone_number [String?] The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
    # @optional @param preferred_locales [Array(String)?] The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
    # @optional @param spending_controls [Stripe::AuthorizationControlsParamV2?]
    # @optional @param status [String?] Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
    # @optional @param _type [String?] One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
    # @return nil
    def post_issuing_cardholders(
      *,
      billing : Stripe::BillingSpecs? = nil,
      name : String? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil,
      _type : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cardholders(billing: billing, name: name, company: company, email: email, expand: expand, individual: individual, metadata: metadata, phone_number: phone_number, preferred_locales: preferred_locales, spending_controls: spending_controls, status: status, _type: _type).execute(&block)
    end

    POST_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_PREFERRED_LOCALES = String.static_array("de", "en", "es", "fr", "it")
    POST_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_STATUS            = String.static_array("active", "inactive")
    POST_ISSUING_CARDHOLDERS_VALID_VALUES_FOR__TYPE             = String.static_array("company", "individual")

    # @return Crest::Request
    def build_api_request_for_post_issuing_cardholders(
      *,
      billing : Stripe::BillingSpecs? = nil,
      name : String? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil,
      _type : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_cardholders ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"billing\" is required and cannot be null") if billing.nil?
        unless (_billing = billing).nil?
          _billing.validate if _billing.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"name\" is required and cannot be null") if name.nil?

        unless (_company = company).nil?
          _company.validate if _company.is_a?(OpenApi::Validatable)
        end

        unless (_individual = individual).nil?
          _individual.validate if _individual.is_a?(OpenApi::Validatable)
        end

        unless (_preferred_locales = preferred_locales).nil?
          OpenApi::EnumValidator.validate("preferred_locales", _preferred_locales, POST_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_PREFERRED_LOCALES)
        end
        unless (_spending_controls = spending_controls).nil?
          _spending_controls.validate if _spending_controls.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, POST_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_STATUS)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_ISSUING_CARDHOLDERS_VALID_VALUES_FOR__TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(billing.to_json), "billing")) if !billing.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(company.to_json), "company")) if !company.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("email", email.to_s) if !email.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(individual.to_json), "individual")) if !individual.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("phone_number", phone_number.to_s) if !phone_number.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(preferred_locales.to_json), "preferred_locales")) if !preferred_locales.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(spending_controls.to_json), "spending_controls")) if !spending_controls.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("status", status.to_s) if !status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cardholders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param cardholder [String?]
    # @optional @param billing [Stripe::BillingSpecs?]
    # @optional @param company [Stripe::CompanyParam?]
    # @optional @param email [String?] The cardholder's email address.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param individual [Stripe::IndividualParam?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param phone_number [String?] The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure) for more details.
    # @optional @param preferred_locales [Array(String)?] The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
    # @optional @param spending_controls [Stripe::AuthorizationControlsParamV2?]
    # @optional @param status [String?] Specifies whether to permit authorizations on this cardholder's cards.
    # @return [Stripe::IssuingCardholder]
    def post_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      billing : Stripe::BillingSpecs? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil
    ) : Stripe::IssuingCardholder
      data, _status_code, _headers = post_issuing_cardholders_cardholder_with_http_info(cardholder: cardholder, billing: billing, company: company, email: email, expand: expand, individual: individual, metadata: metadata, phone_number: phone_number, preferred_locales: preferred_locales, spending_controls: spending_controls, status: status)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param billing [Stripe::BillingSpecs?]
    # @optional @param company [Stripe::CompanyParam?]
    # @optional @param email [String?] The cardholder's email address.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param individual [Stripe::IndividualParam?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param phone_number [String?] The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure) for more details.
    # @optional @param preferred_locales [Array(String)?] The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
    # @optional @param spending_controls [Stripe::AuthorizationControlsParamV2?]
    # @optional @param status [String?] Specifies whether to permit authorizations on this cardholder's cards.
    # @return [Tuple(Stripe::IssuingCardholder, Integer, Hash)] Stripe::IssuingCardholder, response status code and response headers
    def post_issuing_cardholders_cardholder_with_http_info(
      *,
      cardholder : String? = nil,
      billing : Stripe::BillingSpecs? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil
    ) : Tuple(Stripe::IssuingCardholder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cardholders_cardholder(cardholder: cardholder, billing: billing, company: company, email: email, expand: expand, individual: individual, metadata: metadata, phone_number: phone_number, preferred_locales: preferred_locales, spending_controls: spending_controls, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_cardholders_cardholder\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param billing [Stripe::BillingSpecs?]
    # @optional @param company [Stripe::CompanyParam?]
    # @optional @param email [String?] The cardholder's email address.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param individual [Stripe::IndividualParam?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param phone_number [String?] The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure) for more details.
    # @optional @param preferred_locales [Array(String)?] The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
    # @optional @param spending_controls [Stripe::AuthorizationControlsParamV2?]
    # @optional @param status [String?] Specifies whether to permit authorizations on this cardholder's cards.
    # @return nil
    def post_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      billing : Stripe::BillingSpecs? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cardholders_cardholder(cardholder: cardholder, billing: billing, company: company, email: email, expand: expand, individual: individual, metadata: metadata, phone_number: phone_number, preferred_locales: preferred_locales, spending_controls: spending_controls, status: status).execute(&block)
    end

    POST_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER          = 5000
    POST_ISSUING_CARDHOLDERS_CARDHOLDER_VALID_VALUES_FOR_PREFERRED_LOCALES = String.static_array("de", "en", "es", "fr", "it")
    POST_ISSUING_CARDHOLDERS_CARDHOLDER_VALID_VALUES_FOR_STATUS            = String.static_array("active", "inactive")

    # @return Crest::Request
    def build_api_request_for_post_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      billing : Stripe::BillingSpecs? = nil,
      company : Stripe::CompanyParam? = nil,
      email : String? = nil,
      expand : Array(String)? = nil,
      individual : Stripe::IndividualParam? = nil,
      metadata : Hash(String, String)? = nil,
      phone_number : String? = nil,
      preferred_locales : Array(String)? = nil,
      spending_controls : Stripe::AuthorizationControlsParamV2? = nil,
      status : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_cardholders_cardholder ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"cardholder\" is required and cannot be null") if cardholder.nil?
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, POST_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER)
        end
        unless (_billing = billing).nil?
          _billing.validate if _billing.is_a?(OpenApi::Validatable)
        end
        unless (_company = company).nil?
          _company.validate if _company.is_a?(OpenApi::Validatable)
        end

        unless (_individual = individual).nil?
          _individual.validate if _individual.is_a?(OpenApi::Validatable)
        end

        unless (_preferred_locales = preferred_locales).nil?
          OpenApi::EnumValidator.validate("preferred_locales", _preferred_locales, POST_ISSUING_CARDHOLDERS_CARDHOLDER_VALID_VALUES_FOR_PREFERRED_LOCALES)
        end
        unless (_spending_controls = spending_controls).nil?
          _spending_controls.validate if _spending_controls.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, POST_ISSUING_CARDHOLDERS_CARDHOLDER_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders/{cardholder}".sub("{" + "cardholder" + "}", URI.encode_path(cardholder.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(billing.to_json), "billing")) if !billing.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(company.to_json), "company")) if !company.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("email", email.to_s) if !email.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(individual.to_json), "individual")) if !individual.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("phone_number", phone_number.to_s) if !phone_number.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(preferred_locales.to_json), "preferred_locales")) if !preferred_locales.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(spending_controls.to_json), "spending_controls")) if !spending_controls.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cardholders_cardholder",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an Issuing <code>Card</code> object.</p>
    # @required @param currency [String?] The currency for the card.
    # @required @param _type [String?] The type of card to issue. Possible values are `physical` or `virtual`.
    # @optional @param cardholder [String?] The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param financial_account [String?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param personalization_design [String?] The personalization design object belonging to this card.
    # @optional @param pin [Stripe::EncryptedPinParam?]
    # @optional @param replacement_for [String?] The card this is meant to be a replacement for (if any).
    # @optional @param replacement_reason [String?] If `replacement_for` is specified, this should indicate why that card is being replaced.
    # @optional @param second_line [Stripe::PostIssuingCardsRequestSecondLine?]
    # @optional @param shipping [Stripe::ShippingSpecs?]
    # @optional @param spending_controls [Stripe::AuthorizationControlsParam?]
    # @optional @param status [String?] Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
    # @return [Stripe::IssuingCard]
    def post_issuing_cards(
      *,
      currency : String? = nil,
      _type : String? = nil,
      cardholder : String? = nil,
      expand : Array(String)? = nil,
      financial_account : String? = nil,
      metadata : Hash(String, String)? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      replacement_for : String? = nil,
      replacement_reason : String? = nil,
      second_line : Stripe::PostIssuingCardsRequestSecondLine? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_issuing_cards_with_http_info(currency: currency, _type: _type, cardholder: cardholder, expand: expand, financial_account: financial_account, metadata: metadata, personalization_design: personalization_design, pin: pin, replacement_for: replacement_for, replacement_reason: replacement_reason, second_line: second_line, shipping: shipping, spending_controls: spending_controls, status: status)
      data
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param currency [String?] The currency for the card.
    # @required @param _type [String?] The type of card to issue. Possible values are `physical` or `virtual`.
    # @optional @param cardholder [String?] The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param financial_account [String?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param personalization_design [String?] The personalization design object belonging to this card.
    # @optional @param pin [Stripe::EncryptedPinParam?]
    # @optional @param replacement_for [String?] The card this is meant to be a replacement for (if any).
    # @optional @param replacement_reason [String?] If `replacement_for` is specified, this should indicate why that card is being replaced.
    # @optional @param second_line [Stripe::PostIssuingCardsRequestSecondLine?]
    # @optional @param shipping [Stripe::ShippingSpecs?]
    # @optional @param spending_controls [Stripe::AuthorizationControlsParam?]
    # @optional @param status [String?] Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_issuing_cards_with_http_info(
      *,
      currency : String? = nil,
      _type : String? = nil,
      cardholder : String? = nil,
      expand : Array(String)? = nil,
      financial_account : String? = nil,
      metadata : Hash(String, String)? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      replacement_for : String? = nil,
      replacement_reason : String? = nil,
      second_line : Stripe::PostIssuingCardsRequestSecondLine? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cards(currency: currency, _type: _type, cardholder: cardholder, expand: expand, financial_account: financial_account, metadata: metadata, personalization_design: personalization_design, pin: pin, replacement_for: replacement_for, replacement_reason: replacement_reason, second_line: second_line, shipping: shipping, spending_controls: spending_controls, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_cards\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param currency [String?] The currency for the card.
    # @required @param _type [String?] The type of card to issue. Possible values are `physical` or `virtual`.
    # @optional @param cardholder [String?] The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param financial_account [String?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param personalization_design [String?] The personalization design object belonging to this card.
    # @optional @param pin [Stripe::EncryptedPinParam?]
    # @optional @param replacement_for [String?] The card this is meant to be a replacement for (if any).
    # @optional @param replacement_reason [String?] If `replacement_for` is specified, this should indicate why that card is being replaced.
    # @optional @param second_line [Stripe::PostIssuingCardsRequestSecondLine?]
    # @optional @param shipping [Stripe::ShippingSpecs?]
    # @optional @param spending_controls [Stripe::AuthorizationControlsParam?]
    # @optional @param status [String?] Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
    # @return nil
    def post_issuing_cards(
      *,
      currency : String? = nil,
      _type : String? = nil,
      cardholder : String? = nil,
      expand : Array(String)? = nil,
      financial_account : String? = nil,
      metadata : Hash(String, String)? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      replacement_for : String? = nil,
      replacement_reason : String? = nil,
      second_line : Stripe::PostIssuingCardsRequestSecondLine? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cards(currency: currency, _type: _type, cardholder: cardholder, expand: expand, financial_account: financial_account, metadata: metadata, personalization_design: personalization_design, pin: pin, replacement_for: replacement_for, replacement_reason: replacement_reason, second_line: second_line, shipping: shipping, spending_controls: spending_controls, status: status).execute(&block)
    end

    POST_ISSUING_CARDS_VALID_VALUES_FOR__TYPE                = String.static_array("physical", "virtual")
    POST_ISSUING_CARDS_MAX_LENGTH_FOR_CARDHOLDER             = 5000
    POST_ISSUING_CARDS_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000
    POST_ISSUING_CARDS_MAX_LENGTH_FOR_REPLACEMENT_FOR        = 5000
    POST_ISSUING_CARDS_VALID_VALUES_FOR_REPLACEMENT_REASON   = String.static_array("damaged", "expired", "lost", "stolen")
    POST_ISSUING_CARDS_VALID_VALUES_FOR_STATUS               = String.static_array("active", "inactive")

    # @return Crest::Request
    def build_api_request_for_post_issuing_cards(
      *,
      currency : String? = nil,
      _type : String? = nil,
      cardholder : String? = nil,
      expand : Array(String)? = nil,
      financial_account : String? = nil,
      metadata : Hash(String, String)? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      replacement_for : String? = nil,
      replacement_reason : String? = nil,
      second_line : Stripe::PostIssuingCardsRequestSecondLine? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_cards ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"_type\" is required and cannot be null") if _type.nil?
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_ISSUING_CARDS_VALID_VALUES_FOR__TYPE)
        end
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, POST_ISSUING_CARDS_MAX_LENGTH_FOR_CARDHOLDER)
        end

        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, POST_ISSUING_CARDS_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
        unless (_pin = pin).nil?
          _pin.validate if _pin.is_a?(OpenApi::Validatable)
        end
        unless (_replacement_for = replacement_for).nil?
          OpenApi::PrimitiveValidator.validate_max_length("replacement_for", replacement_for.to_s.size, POST_ISSUING_CARDS_MAX_LENGTH_FOR_REPLACEMENT_FOR)
        end
        unless (_replacement_reason = replacement_reason).nil?
          OpenApi::EnumValidator.validate("replacement_reason", _replacement_reason, POST_ISSUING_CARDS_VALID_VALUES_FOR_REPLACEMENT_REASON)
        end
        unless (_second_line = second_line).nil?
          _second_line.validate if _second_line.is_a?(OpenApi::Validatable)
        end
        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
        unless (_spending_controls = spending_controls).nil?
          _spending_controls.validate if _spending_controls.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, POST_ISSUING_CARDS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("cardholder", cardholder.to_s) if !cardholder.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("financial_account", financial_account.to_s) if !financial_account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("personalization_design", personalization_design.to_s) if !personalization_design.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(pin.to_json), "pin")) if !pin.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("replacement_for", replacement_for.to_s) if !replacement_for.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("replacement_reason", replacement_reason.to_s) if !replacement_reason.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(second_line.to_json), "second_line")) if !second_line.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(spending_controls.to_json), "spending_controls")) if !spending_controls.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("status", status.to_s) if !status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param card [String?]
    # @optional @param cancellation_reason [String?] Reason why the `status` of this card is `canceled`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param personalization_design [String?]
    # @optional @param pin [Stripe::EncryptedPinParam?]
    # @optional @param shipping [Stripe::ShippingSpecs?]
    # @optional @param spending_controls [Stripe::AuthorizationControlsParam?]
    # @optional @param status [String?] Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.
    # @return [Stripe::IssuingCard]
    def post_issuing_cards_card(
      *,
      card : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_issuing_cards_card_with_http_info(card: card, cancellation_reason: cancellation_reason, expand: expand, metadata: metadata, personalization_design: personalization_design, pin: pin, shipping: shipping, spending_controls: spending_controls, status: status)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param cancellation_reason [String?] Reason why the `status` of this card is `canceled`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param personalization_design [String?]
    # @optional @param pin [Stripe::EncryptedPinParam?]
    # @optional @param shipping [Stripe::ShippingSpecs?]
    # @optional @param spending_controls [Stripe::AuthorizationControlsParam?]
    # @optional @param status [String?] Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_issuing_cards_card_with_http_info(
      *,
      card : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cards_card(card: card, cancellation_reason: cancellation_reason, expand: expand, metadata: metadata, personalization_design: personalization_design, pin: pin, shipping: shipping, spending_controls: spending_controls, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_cards_card\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param cancellation_reason [String?] Reason why the `status` of this card is `canceled`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param personalization_design [String?]
    # @optional @param pin [Stripe::EncryptedPinParam?]
    # @optional @param shipping [Stripe::ShippingSpecs?]
    # @optional @param spending_controls [Stripe::AuthorizationControlsParam?]
    # @optional @param status [String?] Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.
    # @return nil
    def post_issuing_cards_card(
      *,
      card : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cards_card(card: card, cancellation_reason: cancellation_reason, expand: expand, metadata: metadata, personalization_design: personalization_design, pin: pin, shipping: shipping, spending_controls: spending_controls, status: status).execute(&block)
    end

    POST_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD                   = 5000
    POST_ISSUING_CARDS_CARD_VALID_VALUES_FOR_CANCELLATION_REASON  = String.static_array("lost", "stolen")
    POST_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000
    POST_ISSUING_CARDS_CARD_VALID_VALUES_FOR_STATUS               = String.static_array("active", "canceled", "inactive")

    # @return Crest::Request
    def build_api_request_for_post_issuing_cards_card(
      *,
      card : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      personalization_design : String? = nil,
      pin : Stripe::EncryptedPinParam? = nil,
      shipping : Stripe::ShippingSpecs? = nil,
      spending_controls : Stripe::AuthorizationControlsParam? = nil,
      status : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_cards_card ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD)
        end
        unless (_cancellation_reason = cancellation_reason).nil?
          OpenApi::EnumValidator.validate("cancellation_reason", _cancellation_reason, POST_ISSUING_CARDS_CARD_VALID_VALUES_FOR_CANCELLATION_REASON)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, POST_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
        unless (_pin = pin).nil?
          _pin.validate if _pin.is_a?(OpenApi::Validatable)
        end
        unless (_shipping = shipping).nil?
          _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
        end
        unless (_spending_controls = spending_controls).nil?
          _spending_controls.validate if _spending_controls.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, POST_ISSUING_CARDS_CARD_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards/{card}".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("cancellation_reason", cancellation_reason.to_s) if !cancellation_reason.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("personalization_design", personalization_design.to_s) if !personalization_design.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(pin.to_json), "pin")) if !pin.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping.to_json), "shipping")) if !shipping.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(spending_controls.to_json), "spending_controls")) if !spending_controls.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cards_card",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href=\"/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
    # @optional @param amount [Int32?] The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If not set, defaults to the full transaction amount.
    # @optional @param evidence [Stripe::EvidenceParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param transaction [String?] The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.
    # @optional @param treasury [Stripe::TreasuryParam?]
    # @return [Stripe::IssuingDispute]
    def post_issuing_disputes(
      *,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      transaction : String? = nil,
      treasury : Stripe::TreasuryParam? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = post_issuing_disputes_with_http_info(amount: amount, evidence: evidence, expand: expand, metadata: metadata, transaction: transaction, treasury: treasury)
      data
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
    # @optional @param amount [Int32?] The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If not set, defaults to the full transaction amount.
    # @optional @param evidence [Stripe::EvidenceParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param transaction [String?] The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.
    # @optional @param treasury [Stripe::TreasuryParam?]
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def post_issuing_disputes_with_http_info(
      *,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      transaction : String? = nil,
      treasury : Stripe::TreasuryParam? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_disputes(amount: amount, evidence: evidence, expand: expand, metadata: metadata, transaction: transaction, treasury: treasury)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_disputes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
    # @optional @param amount [Int32?] The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If not set, defaults to the full transaction amount.
    # @optional @param evidence [Stripe::EvidenceParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param transaction [String?] The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.
    # @optional @param treasury [Stripe::TreasuryParam?]
    # @return nil
    def post_issuing_disputes(
      *,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      transaction : String? = nil,
      treasury : Stripe::TreasuryParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_disputes(amount: amount, evidence: evidence, expand: expand, metadata: metadata, transaction: transaction, treasury: treasury).execute(&block)
    end

    POST_ISSUING_DISPUTES_MAX_LENGTH_FOR_TRANSACTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes(
      *,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      transaction : String? = nil,
      treasury : Stripe::TreasuryParam? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_disputes ..." }
      end

      if client_side_validation?
        unless (_evidence = evidence).nil?
          _evidence.validate if _evidence.is_a?(OpenApi::Validatable)
        end

        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, POST_ISSUING_DISPUTES_MAX_LENGTH_FOR_TRANSACTION)
        end
        unless (_treasury = treasury).nil?
          _treasury.validate if _treasury.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(evidence.to_json), "evidence")) if !evidence.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transaction", transaction.to_s) if !transaction.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(treasury.to_json), "treasury")) if !treasury.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
    # @required @param dispute [String?]
    # @optional @param amount [Int32?] The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param evidence [Stripe::EvidenceParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::IssuingDispute]
    def post_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = post_issuing_disputes_dispute_with_http_info(dispute: dispute, amount: amount, evidence: evidence, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param amount [Int32?] The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param evidence [Stripe::EvidenceParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def post_issuing_disputes_dispute_with_http_info(
      *,
      dispute : String? = nil,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_disputes_dispute(dispute: dispute, amount: amount, evidence: evidence, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_disputes_dispute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param amount [Int32?] The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    # @optional @param evidence [Stripe::EvidenceParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_disputes_dispute(dispute: dispute, amount: amount, evidence: evidence, expand: expand, metadata: metadata).execute(&block)
    end

    POST_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      amount : Int64? = nil,
      evidence : Stripe::EvidenceParam? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_disputes_dispute ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, POST_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE)
        end

        unless (_evidence = evidence).nil?
          _evidence.validate if _evidence.is_a?(OpenApi::Validatable)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(evidence.to_json), "evidence")) if !evidence.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href=\"/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\">Dispute reasons and evidence</a>.</p>
    # @required @param dispute [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::IssuingDispute]
    def post_issuing_disputes_dispute_submit(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = post_issuing_disputes_dispute_submit_with_http_info(dispute: dispute, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def post_issuing_disputes_dispute_submit_with_http_info(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_disputes_dispute_submit(dispute: dispute, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_disputes_dispute_submit\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_issuing_disputes_dispute_submit(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_disputes_dispute_submit(dispute: dispute, expand: expand, metadata: metadata).execute(&block)
    end

    POST_ISSUING_DISPUTES_DISPUTE_SUBMIT_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes_dispute_submit(
      *,
      dispute : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_disputes_dispute_submit ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, POST_ISSUING_DISPUTES_DISPUTE_SUBMIT_MAX_LENGTH_FOR_DISPUTE)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}/submit".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_disputes_dispute_submit",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a personalization design object.</p>
    # @required @param physical_bundle [String?] The physical bundle object belonging to this personalization design.
    # @optional @param card_logo [String?] The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.
    # @optional @param carrier_text [Stripe::CarrierTextParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lookup_key [String?] A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param name [String?] Friendly display name.
    # @optional @param preferences [Stripe::PreferencesParam?]
    # @optional @param transfer_lookup_key [Bool?] If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
    # @return [Stripe::IssuingPersonalizationDesign]
    def post_issuing_personalization_designs(
      *,
      physical_bundle : String? = nil,
      card_logo : String? = nil,
      carrier_text : Stripe::CarrierTextParam? = nil,
      expand : Array(String)? = nil,
      lookup_key : String? = nil,
      metadata : Hash(String, String)? = nil,
      name : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil
    ) : Stripe::IssuingPersonalizationDesign
      data, _status_code, _headers = post_issuing_personalization_designs_with_http_info(physical_bundle: physical_bundle, card_logo: card_logo, carrier_text: carrier_text, expand: expand, lookup_key: lookup_key, metadata: metadata, name: name, preferences: preferences, transfer_lookup_key: transfer_lookup_key)
      data
    end

    # &lt;p&gt;Creates a personalization design object.&lt;/p&gt;
    # @required @param physical_bundle [String?] The physical bundle object belonging to this personalization design.
    # @optional @param card_logo [String?] The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.
    # @optional @param carrier_text [Stripe::CarrierTextParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lookup_key [String?] A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param name [String?] Friendly display name.
    # @optional @param preferences [Stripe::PreferencesParam?]
    # @optional @param transfer_lookup_key [Bool?] If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
    # @return [Tuple(Stripe::IssuingPersonalizationDesign, Integer, Hash)] Stripe::IssuingPersonalizationDesign, response status code and response headers
    def post_issuing_personalization_designs_with_http_info(
      *,
      physical_bundle : String? = nil,
      card_logo : String? = nil,
      carrier_text : Stripe::CarrierTextParam? = nil,
      expand : Array(String)? = nil,
      lookup_key : String? = nil,
      metadata : Hash(String, String)? = nil,
      name : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil
    ) : Tuple(Stripe::IssuingPersonalizationDesign, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_personalization_designs(physical_bundle: physical_bundle, card_logo: card_logo, carrier_text: carrier_text, expand: expand, lookup_key: lookup_key, metadata: metadata, name: name, preferences: preferences, transfer_lookup_key: transfer_lookup_key)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_personalization_designs\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPersonalizationDesign.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a personalization design object.&lt;/p&gt;
    # @required @param physical_bundle [String?] The physical bundle object belonging to this personalization design.
    # @optional @param card_logo [String?] The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.
    # @optional @param carrier_text [Stripe::CarrierTextParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lookup_key [String?] A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param name [String?] Friendly display name.
    # @optional @param preferences [Stripe::PreferencesParam?]
    # @optional @param transfer_lookup_key [Bool?] If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
    # @return nil
    def post_issuing_personalization_designs(
      *,
      physical_bundle : String? = nil,
      card_logo : String? = nil,
      carrier_text : Stripe::CarrierTextParam? = nil,
      expand : Array(String)? = nil,
      lookup_key : String? = nil,
      metadata : Hash(String, String)? = nil,
      name : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_personalization_designs(physical_bundle: physical_bundle, card_logo: card_logo, carrier_text: carrier_text, expand: expand, lookup_key: lookup_key, metadata: metadata, name: name, preferences: preferences, transfer_lookup_key: transfer_lookup_key).execute(&block)
    end

    POST_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_PHYSICAL_BUNDLE = 5000
    POST_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_LOOKUP_KEY      =  200
    POST_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_NAME            =  200

    # @return Crest::Request
    def build_api_request_for_post_issuing_personalization_designs(
      *,
      physical_bundle : String? = nil,
      card_logo : String? = nil,
      carrier_text : Stripe::CarrierTextParam? = nil,
      expand : Array(String)? = nil,
      lookup_key : String? = nil,
      metadata : Hash(String, String)? = nil,
      name : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_personalization_designs ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"physical_bundle\" is required and cannot be null") if physical_bundle.nil?
        unless (_physical_bundle = physical_bundle).nil?
          OpenApi::PrimitiveValidator.validate_max_length("physical_bundle", physical_bundle.to_s.size, POST_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_PHYSICAL_BUNDLE)
        end

        unless (_carrier_text = carrier_text).nil?
          _carrier_text.validate if _carrier_text.is_a?(OpenApi::Validatable)
        end

        unless (_lookup_key = lookup_key).nil?
          OpenApi::PrimitiveValidator.validate_max_length("lookup_key", lookup_key.to_s.size, POST_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_LOOKUP_KEY)
        end

        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_ISSUING_PERSONALIZATION_DESIGNS_MAX_LENGTH_FOR_NAME)
        end
        unless (_preferences = preferences).nil?
          _preferences.validate if _preferences.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/personalization_designs"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("card_logo", card_logo.to_s) if !card_logo.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(carrier_text.to_json), "carrier_text")) if !carrier_text.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("lookup_key", lookup_key.to_s) if !lookup_key.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("physical_bundle", physical_bundle.to_s) if !physical_bundle.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(preferences.to_json), "preferences")) if !preferences.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_lookup_key", transfer_lookup_key.to_s) if !transfer_lookup_key.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_personalization_designs",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a card personalization object.</p>
    # @required @param personalization_design [String?]
    # @optional @param card_logo [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo?]
    # @optional @param carrier_text [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lookup_key [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param name [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestName?]
    # @optional @param physical_bundle [String?] The physical bundle object belonging to this personalization design.
    # @optional @param preferences [Stripe::PreferencesParam?]
    # @optional @param transfer_lookup_key [Bool?] If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
    # @return [Stripe::IssuingPersonalizationDesign]
    def post_issuing_personalization_designs_personalization_design(
      *,
      personalization_design : String? = nil,
      card_logo : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo? = nil,
      carrier_text : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText? = nil,
      expand : Array(String)? = nil,
      lookup_key : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey? = nil,
      metadata : Hash(String, String)? = nil,
      name : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestName? = nil,
      physical_bundle : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil
    ) : Stripe::IssuingPersonalizationDesign
      data, _status_code, _headers = post_issuing_personalization_designs_personalization_design_with_http_info(personalization_design: personalization_design, card_logo: card_logo, carrier_text: carrier_text, expand: expand, lookup_key: lookup_key, metadata: metadata, name: name, physical_bundle: physical_bundle, preferences: preferences, transfer_lookup_key: transfer_lookup_key)
      data
    end

    # &lt;p&gt;Updates a card personalization object.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param card_logo [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo?]
    # @optional @param carrier_text [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lookup_key [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param name [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestName?]
    # @optional @param physical_bundle [String?] The physical bundle object belonging to this personalization design.
    # @optional @param preferences [Stripe::PreferencesParam?]
    # @optional @param transfer_lookup_key [Bool?] If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
    # @return [Tuple(Stripe::IssuingPersonalizationDesign, Integer, Hash)] Stripe::IssuingPersonalizationDesign, response status code and response headers
    def post_issuing_personalization_designs_personalization_design_with_http_info(
      *,
      personalization_design : String? = nil,
      card_logo : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo? = nil,
      carrier_text : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText? = nil,
      expand : Array(String)? = nil,
      lookup_key : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey? = nil,
      metadata : Hash(String, String)? = nil,
      name : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestName? = nil,
      physical_bundle : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil
    ) : Tuple(Stripe::IssuingPersonalizationDesign, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_personalization_designs_personalization_design(personalization_design: personalization_design, card_logo: card_logo, carrier_text: carrier_text, expand: expand, lookup_key: lookup_key, metadata: metadata, name: name, physical_bundle: physical_bundle, preferences: preferences, transfer_lookup_key: transfer_lookup_key)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_personalization_designs_personalization_design\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingPersonalizationDesign.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a card personalization object.&lt;/p&gt;
    # @required @param personalization_design [String?]
    # @optional @param card_logo [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo?]
    # @optional @param carrier_text [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param lookup_key [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param name [Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestName?]
    # @optional @param physical_bundle [String?] The physical bundle object belonging to this personalization design.
    # @optional @param preferences [Stripe::PreferencesParam?]
    # @optional @param transfer_lookup_key [Bool?] If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
    # @return nil
    def post_issuing_personalization_designs_personalization_design(
      *,
      personalization_design : String? = nil,
      card_logo : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo? = nil,
      carrier_text : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText? = nil,
      expand : Array(String)? = nil,
      lookup_key : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey? = nil,
      metadata : Hash(String, String)? = nil,
      name : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestName? = nil,
      physical_bundle : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_personalization_designs_personalization_design(personalization_design: personalization_design, card_logo: card_logo, carrier_text: carrier_text, expand: expand, lookup_key: lookup_key, metadata: metadata, name: name, physical_bundle: physical_bundle, preferences: preferences, transfer_lookup_key: transfer_lookup_key).execute(&block)
    end

    POST_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN = 5000
    POST_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_MAX_LENGTH_FOR_PHYSICAL_BUNDLE        = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_personalization_designs_personalization_design(
      *,
      personalization_design : String? = nil,
      card_logo : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo? = nil,
      carrier_text : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText? = nil,
      expand : Array(String)? = nil,
      lookup_key : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey? = nil,
      metadata : Hash(String, String)? = nil,
      name : Stripe::PostIssuingPersonalizationDesignsPersonalizationDesignRequestName? = nil,
      physical_bundle : String? = nil,
      preferences : Stripe::PreferencesParam? = nil,
      transfer_lookup_key : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_personalization_designs_personalization_design ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"personalization_design\" is required and cannot be null") if personalization_design.nil?
        unless (_personalization_design = personalization_design).nil?
          OpenApi::PrimitiveValidator.validate_max_length("personalization_design", personalization_design.to_s.size, POST_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_MAX_LENGTH_FOR_PERSONALIZATION_DESIGN)
        end
        unless (_card_logo = card_logo).nil?
          _card_logo.validate if _card_logo.is_a?(OpenApi::Validatable)
        end
        unless (_carrier_text = carrier_text).nil?
          _carrier_text.validate if _carrier_text.is_a?(OpenApi::Validatable)
        end

        unless (_lookup_key = lookup_key).nil?
          _lookup_key.validate if _lookup_key.is_a?(OpenApi::Validatable)
        end

        unless (_name = name).nil?
          _name.validate if _name.is_a?(OpenApi::Validatable)
        end
        unless (_physical_bundle = physical_bundle).nil?
          OpenApi::PrimitiveValidator.validate_max_length("physical_bundle", physical_bundle.to_s.size, POST_ISSUING_PERSONALIZATION_DESIGNS_PERSONALIZATION_DESIGN_MAX_LENGTH_FOR_PHYSICAL_BUNDLE)
        end
        unless (_preferences = preferences).nil?
          _preferences.validate if _preferences.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/personalization_designs/{personalization_design}".sub("{" + "personalization_design" + "}", URI.encode_path(personalization_design.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(card_logo.to_json), "card_logo")) if !card_logo.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(carrier_text.to_json), "carrier_text")) if !carrier_text.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(lookup_key.to_json), "lookup_key")) if !lookup_key.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(name.to_json), "name")) if !name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("physical_bundle", physical_bundle.to_s) if !physical_bundle.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(preferences.to_json), "preferences")) if !preferences.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_lookup_key", transfer_lookup_key.to_s) if !transfer_lookup_key.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_personalization_designs_personalization_design",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
    # @required @param token [String?]
    # @required @param status [String?] Specifies which status the token should be updated to.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingToken]
    def post_issuing_tokens_token(
      *,
      token : String? = nil,
      status : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::IssuingToken
      data, _status_code, _headers = post_issuing_tokens_token_with_http_info(token: token, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Attempts to update the specified Issuing &lt;code&gt;Token&lt;/code&gt; object to the status specified.&lt;/p&gt;
    # @required @param token [String?]
    # @required @param status [String?] Specifies which status the token should be updated to.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingToken, Integer, Hash)] Stripe::IssuingToken, response status code and response headers
    def post_issuing_tokens_token_with_http_info(
      *,
      token : String? = nil,
      status : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::IssuingToken, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_tokens_token(token: token, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_tokens_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingToken.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Attempts to update the specified Issuing &lt;code&gt;Token&lt;/code&gt; object to the status specified.&lt;/p&gt;
    # @required @param token [String?]
    # @required @param status [String?] Specifies which status the token should be updated to.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_issuing_tokens_token(
      *,
      token : String? = nil,
      status : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_tokens_token(token: token, status: status, expand: expand).execute(&block)
    end

    POST_ISSUING_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN    = 5000
    POST_ISSUING_TOKENS_TOKEN_VALID_VALUES_FOR_STATUS = String.static_array("active", "deleted", "suspended")

    # @return Crest::Request
    def build_api_request_for_post_issuing_tokens_token(
      *,
      token : String? = nil,
      status : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_tokens_token ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"token\" is required and cannot be null") if token.nil?
        unless (_token = token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("token", token.to_s.size, POST_ISSUING_TOKENS_TOKEN_MAX_LENGTH_FOR_TOKEN)
        end
        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, POST_ISSUING_TOKENS_TOKEN_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/tokens/{token}".sub("{" + "token" + "}", URI.encode_path(token.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_tokens_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param transaction [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::IssuingTransaction]
    def post_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::IssuingTransaction
      data, _status_code, _headers = post_issuing_transactions_transaction_with_http_info(transaction: transaction, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::IssuingTransaction, Integer, Hash)] Stripe::IssuingTransaction, response status code and response headers
    def post_issuing_transactions_transaction_with_http_info(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::IssuingTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_transactions_transaction(transaction: transaction, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: IssuingApi#post_issuing_transactions_transaction\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_transactions_transaction(transaction: transaction, expand: expand, metadata: metadata).execute(&block)
    end

    POST_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: IssuingApi.post_issuing_transactions_transaction ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transaction\" is required and cannot be null") if transaction.nil?
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, POST_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/transactions/{transaction}".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
