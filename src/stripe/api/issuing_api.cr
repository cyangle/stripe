#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class IssuingApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return authorizations that belong to the given card.
    # @optional @param cardholder [String?] Only return authorizations that belong to the given cardholder.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return authorizations that were created during the given date interval.
    # @optional @param status [String?] Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingAuthorizationList]
    def get_issuing_authorizations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingAuthorizationList
      data, _status_code, _headers = get_issuing_authorizations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, created: created, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return authorizations that belong to the given card.
    # @optional @param cardholder [String?] Only return authorizations that belong to the given cardholder.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return authorizations that were created during the given date interval.
    # @optional @param status [String?] Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingAuthorizationList, Integer, Hash)] Stripe::IssuingAuthorizationList, response status code and response headers
    def get_issuing_authorizations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingAuthorizationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_authorizations(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, created: created, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_authorizations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorizationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return authorizations that belong to the given card.
    # @optional @param cardholder [String?] Only return authorizations that belong to the given cardholder.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return authorizations that were created during the given date interval.
    # @optional @param status [String?] Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_authorizations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_authorizations(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, created: created, status: status, expand: expand).execute(&block)
    end

    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARD           = 5000
    GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARDHOLDER     = 5000
    GET_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_STATUS       = String.static_array("closed", "pending", "reversed")

    # @return Crest::Request
    def build_api_request_for_get_issuing_authorizations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_authorizations ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARD)
        end
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_AUTHORIZATIONS_MAX_LENGTH_FOR_CARDHOLDER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_AUTHORIZATIONS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["card"] = card.to_s if !card.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_authorizations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Authorization</code> object.</p>
    # @required @param authorization [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingAuthorization]
    def get_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = get_issuing_authorizations_authorization_with_http_info(authorization: authorization, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def get_issuing_authorizations_authorization_with_http_info(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_authorizations_authorization(authorization: authorization, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_authorizations_authorization\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_authorizations_authorization(authorization: authorization, expand: expand).execute(&block)
    end

    GET_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_authorizations_authorization ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, GET_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_authorizations_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param email [String?] Only return cardholders that have the given email address.
    # @optional @param phone_number [String?] Only return cardholders that have the given phone number.
    # @optional @param status [String?] Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
    # @optional @param _type [String?] Only return cardholders that have the given type. One of `individual` or `company`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cardholders that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCardholderList]
    def get_issuing_cardholders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingCardholderList
      data, _status_code, _headers = get_issuing_cardholders_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, email: email, phone_number: phone_number, status: status, _type: _type, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param email [String?] Only return cardholders that have the given email address.
    # @optional @param phone_number [String?] Only return cardholders that have the given phone number.
    # @optional @param status [String?] Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
    # @optional @param _type [String?] Only return cardholders that have the given type. One of `individual` or `company`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cardholders that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCardholderList, Integer, Hash)] Stripe::IssuingCardholderList, response status code and response headers
    def get_issuing_cardholders_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingCardholderList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cardholders(ending_before: ending_before, starting_after: starting_after, limit: limit, email: email, phone_number: phone_number, status: status, _type: _type, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_cardholders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholderList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param email [String?] Only return cardholders that have the given email address.
    # @optional @param phone_number [String?] Only return cardholders that have the given phone number.
    # @optional @param status [String?] Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
    # @optional @param _type [String?] Only return cardholders that have the given type. One of `individual` or `company`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cardholders that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_cardholders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cardholders(ending_before: ending_before, starting_after: starting_after, limit: limit, email: email, phone_number: phone_number, status: status, _type: _type, created: created, expand: expand).execute(&block)
    end

    GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_STATUS       = String.static_array("active", "blocked", "inactive")
    GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR__TYPE        = String.static_array("company", "individual")

    # @return Crest::Request
    def build_api_request_for_get_issuing_cardholders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      email : String? = nil,
      phone_number : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_cardholders ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_CARDHOLDERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR_STATUS)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_ISSUING_CARDHOLDERS_VALID_VALUES_FOR__TYPE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["email"] = email.to_s if !email.nil?
      query_params["phone_number"] = phone_number.to_s if !phone_number.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cardholders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
    # @required @param cardholder [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCardholder]
    def get_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingCardholder
      data, _status_code, _headers = get_issuing_cardholders_cardholder_with_http_info(cardholder: cardholder, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCardholder, Integer, Hash)] Stripe::IssuingCardholder, response status code and response headers
    def get_issuing_cardholders_cardholder_with_http_info(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingCardholder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cardholders_cardholder(cardholder: cardholder, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_cardholders_cardholder\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cardholders_cardholder(cardholder: cardholder, expand: expand).execute(&block)
    end

    GET_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_cardholders_cardholder ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"cardholder\" is required and cannot be null") if cardholder.nil?
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders/{cardholder}".sub("{" + "cardholder" + "}", URI.encode_path(cardholder.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cardholders_cardholder",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param cardholder [String?] Only return cards belonging to the Cardholder with the provided ID.
    # @optional @param exp_month [Int32?] Only return cards that have the given expiration month.
    # @optional @param exp_year [Int32?] Only return cards that have the given expiration year.
    # @optional @param last4 [String?] Only return cards that have the given last four digits.
    # @optional @param status [String?] Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
    # @optional @param _type [String?] Only return cards that have the given type. One of `virtual` or `physical`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cards that were issued during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCardList]
    def get_issuing_cards(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingCardList
      data, _status_code, _headers = get_issuing_cards_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, cardholder: cardholder, exp_month: exp_month, exp_year: exp_year, last4: last4, status: status, _type: _type, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param cardholder [String?] Only return cards belonging to the Cardholder with the provided ID.
    # @optional @param exp_month [Int32?] Only return cards that have the given expiration month.
    # @optional @param exp_year [Int32?] Only return cards that have the given expiration year.
    # @optional @param last4 [String?] Only return cards that have the given last four digits.
    # @optional @param status [String?] Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
    # @optional @param _type [String?] Only return cards that have the given type. One of `virtual` or `physical`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cards that were issued during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCardList, Integer, Hash)] Stripe::IssuingCardList, response status code and response headers
    def get_issuing_cards_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingCardList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cards(ending_before: ending_before, starting_after: starting_after, limit: limit, cardholder: cardholder, exp_month: exp_month, exp_year: exp_year, last4: last4, status: status, _type: _type, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_cards\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param cardholder [String?] Only return cards belonging to the Cardholder with the provided ID.
    # @optional @param exp_month [Int32?] Only return cards that have the given expiration month.
    # @optional @param exp_year [Int32?] Only return cards that have the given expiration year.
    # @optional @param last4 [String?] Only return cards that have the given last four digits.
    # @optional @param status [String?] Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
    # @optional @param _type [String?] Only return cards that have the given type. One of `virtual` or `physical`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return cards that were issued during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_cards(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cards(ending_before: ending_before, starting_after: starting_after, limit: limit, cardholder: cardholder, exp_month: exp_month, exp_year: exp_year, last4: last4, status: status, _type: _type, created: created, expand: expand).execute(&block)
    end

    GET_ISSUING_CARDS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_CARDS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_CARDS_MAX_LENGTH_FOR_CARDHOLDER     = 5000
    GET_ISSUING_CARDS_MAX_LENGTH_FOR_LAST4          = 5000
    GET_ISSUING_CARDS_VALID_VALUES_FOR_STATUS       = String.static_array("active", "canceled", "inactive")
    GET_ISSUING_CARDS_VALID_VALUES_FOR__TYPE        = String.static_array("physical", "virtual")

    # @return Crest::Request
    def build_api_request_for_get_issuing_cards(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      cardholder : String? = nil,
      exp_month : Int64? = nil,
      exp_year : Int64? = nil,
      last4 : String? = nil,
      status : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_cards ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_CARDHOLDER)
        end

        unless (_last4 = last4).nil?
          OpenApi::PrimitiveValidator.validate_max_length("last4", last4.to_s.size, GET_ISSUING_CARDS_MAX_LENGTH_FOR_LAST4)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_CARDS_VALID_VALUES_FOR_STATUS)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_ISSUING_CARDS_VALID_VALUES_FOR__TYPE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      query_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      query_params["last4"] = last4.to_s if !last4.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Card</code> object.</p>
    # @required @param card [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingCard]
    def get_issuing_cards_card(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = get_issuing_cards_card_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def get_issuing_cards_card_with_http_info(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_cards_card(card: card, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_cards_card\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_cards_card(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_cards_card(card: card, expand: expand).execute(&block)
    end

    GET_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_cards_card(
      *,
      card : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_cards_card ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, GET_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards/{card}".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_cards_card",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Select Issuing disputes that were created during the given date interval.
    # @optional @param status [String?] Select Issuing disputes with the given status.
    # @optional @param transaction [String?] Select the Issuing dispute for the given transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingDisputeList]
    def get_issuing_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingDisputeList
      data, _status_code, _headers = get_issuing_disputes_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, transaction: transaction, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Select Issuing disputes that were created during the given date interval.
    # @optional @param status [String?] Select Issuing disputes with the given status.
    # @optional @param transaction [String?] Select the Issuing dispute for the given transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingDisputeList, Integer, Hash)] Stripe::IssuingDisputeList, response status code and response headers
    def get_issuing_disputes_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingDisputeList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_disputes(ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, transaction: transaction, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_disputes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDisputeList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Select Issuing disputes that were created during the given date interval.
    # @optional @param status [String?] Select Issuing disputes with the given status.
    # @optional @param transaction [String?] Select the Issuing dispute for the given transaction.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_disputes(ending_before: ending_before, starting_after: starting_after, limit: limit, created: created, status: status, transaction: transaction, expand: expand).execute(&block)
    end

    GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_DISPUTES_VALID_VALUES_FOR_STATUS       = String.static_array("expired", "lost", "submitted", "unsubmitted", "won")
    GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_TRANSACTION    = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_disputes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_disputes ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_ISSUING_DISPUTES_VALID_VALUES_FOR_STATUS)
        end
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, GET_ISSUING_DISPUTES_MAX_LENGTH_FOR_TRANSACTION)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["transaction"] = transaction.to_s if !transaction.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Dispute</code> object.</p>
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingDispute]
    def get_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = get_issuing_disputes_dispute_with_http_info(dispute: dispute, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def get_issuing_disputes_dispute_with_http_info(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_disputes_dispute(dispute: dispute, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_disputes_dispute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_disputes_dispute(dispute: dispute, expand: expand).execute(&block)
    end

    GET_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_disputes_dispute ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, GET_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return transactions that belong to the given card.
    # @optional @param cardholder [String?] Only return transactions that belong to the given cardholder.
    # @optional @param _type [String?] Only return transactions that have the given type. One of `capture` or `refund`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return transactions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingTransactionList]
    def get_issuing_transactions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingTransactionList
      data, _status_code, _headers = get_issuing_transactions_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, _type: _type, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return transactions that belong to the given card.
    # @optional @param cardholder [String?] Only return transactions that belong to the given cardholder.
    # @optional @param _type [String?] Only return transactions that have the given type. One of `capture` or `refund`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return transactions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingTransactionList, Integer, Hash)] Stripe::IssuingTransactionList, response status code and response headers
    def get_issuing_transactions_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingTransactionList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_transactions(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, _type: _type, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_transactions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransactionList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param card [String?] Only return transactions that belong to the given card.
    # @optional @param cardholder [String?] Only return transactions that belong to the given cardholder.
    # @optional @param _type [String?] Only return transactions that have the given type. One of `capture` or `refund`.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return transactions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_transactions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_transactions(ending_before: ending_before, starting_after: starting_after, limit: limit, card: card, cardholder: cardholder, _type: _type, created: created, expand: expand).execute(&block)
    end

    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARD           = 5000
    GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARDHOLDER     = 5000
    GET_ISSUING_TRANSACTIONS_VALID_VALUES_FOR__TYPE        = String.static_array("capture", "refund")

    # @return Crest::Request
    def build_api_request_for_get_issuing_transactions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      card : String? = nil,
      cardholder : String? = nil,
      _type : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_transactions ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARD)
        end
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, GET_ISSUING_TRANSACTIONS_MAX_LENGTH_FOR_CARDHOLDER)
        end
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, GET_ISSUING_TRANSACTIONS_VALID_VALUES_FOR__TYPE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/transactions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["card"] = card.to_s if !card.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Transaction</code> object.</p>
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::IssuingTransaction]
    def get_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::IssuingTransaction
      data, _status_code, _headers = get_issuing_transactions_transaction_with_http_info(transaction: transaction, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::IssuingTransaction, Integer, Hash)] Stripe::IssuingTransaction, response status code and response headers
    def get_issuing_transactions_transaction_with_http_info(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::IssuingTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_issuing_transactions_transaction(transaction: transaction, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#get_issuing_transactions_transaction\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_issuing_transactions_transaction(transaction: transaction, expand: expand).execute(&block)
    end

    GET_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION = 5000

    # @return Crest::Request
    def build_api_request_for_get_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.get_issuing_transactions_transaction ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"transaction\" is required and cannot be null") if transaction.nil?
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, GET_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/transactions/{transaction}".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "IssuingApi.get_issuing_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param authorization [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Stripe::IssuingAuthorization]
    def post_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_issuing_authorizations_authorization_with_http_info(authorization: authorization, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_issuing_authorizations_authorization_with_http_info(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_authorizations_authorization(authorization: authorization, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_authorizations_authorization\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return nil
    def post_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_authorizations_authorization(authorization: authorization, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request).execute(&block)
    end

    POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_authorizations_authorization ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_MAX_LENGTH_FOR_AUTHORIZATION)
        end
        unless (_post_application_fees_fee_refunds_id_request = post_application_fees_fee_refunds_id_request).nil?
          _post_application_fees_fee_refunds_id_request.validate if _post_application_fees_fee_refunds_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_application_fees_fee_refunds_id_request, content_type: header_params["Content-Type"]?) if !post_application_fees_fee_refunds_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_authorizations_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href=\"/docs/issuing/controls/real-time-authorizations\">real-time authorization</a> flow.</p>
    # @required @param authorization [String?]
    # @optional @param post_issuing_authorizations_authorization_approve_request [Stripe::PostIssuingAuthorizationsAuthorizationApproveRequest?]
    # @return [Stripe::IssuingAuthorization]
    def post_issuing_authorizations_authorization_approve(
      *,
      authorization : String? = nil,
      post_issuing_authorizations_authorization_approve_request : Stripe::PostIssuingAuthorizationsAuthorizationApproveRequest? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_issuing_authorizations_authorization_approve_with_http_info(authorization: authorization, post_issuing_authorizations_authorization_approve_request: post_issuing_authorizations_authorization_approve_request)
      data
    end

    # &lt;p&gt;Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param post_issuing_authorizations_authorization_approve_request [Stripe::PostIssuingAuthorizationsAuthorizationApproveRequest?]
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_issuing_authorizations_authorization_approve_with_http_info(
      *,
      authorization : String? = nil,
      post_issuing_authorizations_authorization_approve_request : Stripe::PostIssuingAuthorizationsAuthorizationApproveRequest? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_authorizations_authorization_approve(authorization: authorization, post_issuing_authorizations_authorization_approve_request: post_issuing_authorizations_authorization_approve_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_authorizations_authorization_approve\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param post_issuing_authorizations_authorization_approve_request [Stripe::PostIssuingAuthorizationsAuthorizationApproveRequest?]
    # @return nil
    def post_issuing_authorizations_authorization_approve(
      *,
      authorization : String? = nil,
      post_issuing_authorizations_authorization_approve_request : Stripe::PostIssuingAuthorizationsAuthorizationApproveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_authorizations_authorization_approve(authorization: authorization, post_issuing_authorizations_authorization_approve_request: post_issuing_authorizations_authorization_approve_request).execute(&block)
    end

    POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_APPROVE_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization_approve(
      *,
      authorization : String? = nil,
      post_issuing_authorizations_authorization_approve_request : Stripe::PostIssuingAuthorizationsAuthorizationApproveRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_authorizations_authorization_approve ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_APPROVE_MAX_LENGTH_FOR_AUTHORIZATION)
        end
        unless (_post_issuing_authorizations_authorization_approve_request = post_issuing_authorizations_authorization_approve_request).nil?
          _post_issuing_authorizations_authorization_approve_request.validate if _post_issuing_authorizations_authorization_approve_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}/approve".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_issuing_authorizations_authorization_approve_request, content_type: header_params["Content-Type"]?) if !post_issuing_authorizations_authorization_approve_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_authorizations_authorization_approve",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href=\"/docs/issuing/controls/real-time-authorizations\">real time authorization</a> flow.</p>
    # @required @param authorization [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Stripe::IssuingAuthorization]
    def post_issuing_authorizations_authorization_decline(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Stripe::IssuingAuthorization
      data, _status_code, _headers = post_issuing_authorizations_authorization_decline_with_http_info(authorization: authorization, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)
      data
    end

    # &lt;p&gt;Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Tuple(Stripe::IssuingAuthorization, Integer, Hash)] Stripe::IssuingAuthorization, response status code and response headers
    def post_issuing_authorizations_authorization_decline_with_http_info(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Tuple(Stripe::IssuingAuthorization, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_authorizations_authorization_decline(authorization: authorization, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_authorizations_authorization_decline\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingAuthorization.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @required @param authorization [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return nil
    def post_issuing_authorizations_authorization_decline(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_authorizations_authorization_decline(authorization: authorization, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request).execute(&block)
    end

    POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_DECLINE_MAX_LENGTH_FOR_AUTHORIZATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization_decline(
      *,
      authorization : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_authorizations_authorization_decline ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"authorization\" is required and cannot be null") if authorization.nil?
        unless (_authorization = authorization).nil?
          OpenApi::PrimitiveValidator.validate_max_length("authorization", authorization.to_s.size, POST_ISSUING_AUTHORIZATIONS_AUTHORIZATION_DECLINE_MAX_LENGTH_FOR_AUTHORIZATION)
        end
        unless (_post_application_fees_fee_refunds_id_request = post_application_fees_fee_refunds_id_request).nil?
          _post_application_fees_fee_refunds_id_request.validate if _post_application_fees_fee_refunds_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}/decline".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_application_fees_fee_refunds_id_request, content_type: header_params["Content-Type"]?) if !post_application_fees_fee_refunds_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_authorizations_authorization_decline",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
    # @required @param post_issuing_cardholders_request [Stripe::PostIssuingCardholdersRequest?]
    # @return [Stripe::IssuingCardholder]
    def post_issuing_cardholders(
      *,
      post_issuing_cardholders_request : Stripe::PostIssuingCardholdersRequest? = nil
    ) : Stripe::IssuingCardholder
      data, _status_code, _headers = post_issuing_cardholders_with_http_info(post_issuing_cardholders_request: post_issuing_cardholders_request)
      data
    end

    # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
    # @required @param post_issuing_cardholders_request [Stripe::PostIssuingCardholdersRequest?]
    # @return [Tuple(Stripe::IssuingCardholder, Integer, Hash)] Stripe::IssuingCardholder, response status code and response headers
    def post_issuing_cardholders_with_http_info(
      *,
      post_issuing_cardholders_request : Stripe::PostIssuingCardholdersRequest? = nil
    ) : Tuple(Stripe::IssuingCardholder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cardholders(post_issuing_cardholders_request: post_issuing_cardholders_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_cardholders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
    # @required @param post_issuing_cardholders_request [Stripe::PostIssuingCardholdersRequest?]
    # @return nil
    def post_issuing_cardholders(
      *,
      post_issuing_cardholders_request : Stripe::PostIssuingCardholdersRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cardholders(post_issuing_cardholders_request: post_issuing_cardholders_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_cardholders(
      *,
      post_issuing_cardholders_request : Stripe::PostIssuingCardholdersRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_cardholders ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_issuing_cardholders_request\" is required and cannot be null") if post_issuing_cardholders_request.nil?
        unless (_post_issuing_cardholders_request = post_issuing_cardholders_request).nil?
          _post_issuing_cardholders_request.validate if _post_issuing_cardholders_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_issuing_cardholders_request, content_type: header_params["Content-Type"]?) if !post_issuing_cardholders_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cardholders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param cardholder [String?]
    # @optional @param post_issuing_cardholders_cardholder_request [Stripe::PostIssuingCardholdersCardholderRequest?]
    # @return [Stripe::IssuingCardholder]
    def post_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      post_issuing_cardholders_cardholder_request : Stripe::PostIssuingCardholdersCardholderRequest? = nil
    ) : Stripe::IssuingCardholder
      data, _status_code, _headers = post_issuing_cardholders_cardholder_with_http_info(cardholder: cardholder, post_issuing_cardholders_cardholder_request: post_issuing_cardholders_cardholder_request)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param post_issuing_cardholders_cardholder_request [Stripe::PostIssuingCardholdersCardholderRequest?]
    # @return [Tuple(Stripe::IssuingCardholder, Integer, Hash)] Stripe::IssuingCardholder, response status code and response headers
    def post_issuing_cardholders_cardholder_with_http_info(
      *,
      cardholder : String? = nil,
      post_issuing_cardholders_cardholder_request : Stripe::PostIssuingCardholdersCardholderRequest? = nil
    ) : Tuple(Stripe::IssuingCardholder, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cardholders_cardholder(cardholder: cardholder, post_issuing_cardholders_cardholder_request: post_issuing_cardholders_cardholder_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_cardholders_cardholder\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCardholder.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param cardholder [String?]
    # @optional @param post_issuing_cardholders_cardholder_request [Stripe::PostIssuingCardholdersCardholderRequest?]
    # @return nil
    def post_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      post_issuing_cardholders_cardholder_request : Stripe::PostIssuingCardholdersCardholderRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cardholders_cardholder(cardholder: cardholder, post_issuing_cardholders_cardholder_request: post_issuing_cardholders_cardholder_request).execute(&block)
    end

    POST_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_cardholders_cardholder(
      *,
      cardholder : String? = nil,
      post_issuing_cardholders_cardholder_request : Stripe::PostIssuingCardholdersCardholderRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_cardholders_cardholder ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"cardholder\" is required and cannot be null") if cardholder.nil?
        unless (_cardholder = cardholder).nil?
          OpenApi::PrimitiveValidator.validate_max_length("cardholder", cardholder.to_s.size, POST_ISSUING_CARDHOLDERS_CARDHOLDER_MAX_LENGTH_FOR_CARDHOLDER)
        end
        unless (_post_issuing_cardholders_cardholder_request = post_issuing_cardholders_cardholder_request).nil?
          _post_issuing_cardholders_cardholder_request.validate if _post_issuing_cardholders_cardholder_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders/{cardholder}".sub("{" + "cardholder" + "}", URI.encode_path(cardholder.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_issuing_cardholders_cardholder_request, content_type: header_params["Content-Type"]?) if !post_issuing_cardholders_cardholder_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cardholders_cardholder",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an Issuing <code>Card</code> object.</p>
    # @required @param post_issuing_cards_request [Stripe::PostIssuingCardsRequest?]
    # @return [Stripe::IssuingCard]
    def post_issuing_cards(
      *,
      post_issuing_cards_request : Stripe::PostIssuingCardsRequest? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_issuing_cards_with_http_info(post_issuing_cards_request: post_issuing_cards_request)
      data
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param post_issuing_cards_request [Stripe::PostIssuingCardsRequest?]
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_issuing_cards_with_http_info(
      *,
      post_issuing_cards_request : Stripe::PostIssuingCardsRequest? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cards(post_issuing_cards_request: post_issuing_cards_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_cards\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @required @param post_issuing_cards_request [Stripe::PostIssuingCardsRequest?]
    # @return nil
    def post_issuing_cards(
      *,
      post_issuing_cards_request : Stripe::PostIssuingCardsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cards(post_issuing_cards_request: post_issuing_cards_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_cards(
      *,
      post_issuing_cards_request : Stripe::PostIssuingCardsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_cards ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_issuing_cards_request\" is required and cannot be null") if post_issuing_cards_request.nil?
        unless (_post_issuing_cards_request = post_issuing_cards_request).nil?
          _post_issuing_cards_request.validate if _post_issuing_cards_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_issuing_cards_request, content_type: header_params["Content-Type"]?) if !post_issuing_cards_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param card [String?]
    # @optional @param post_issuing_cards_card_request [Stripe::PostIssuingCardsCardRequest?]
    # @return [Stripe::IssuingCard]
    def post_issuing_cards_card(
      *,
      card : String? = nil,
      post_issuing_cards_card_request : Stripe::PostIssuingCardsCardRequest? = nil
    ) : Stripe::IssuingCard
      data, _status_code, _headers = post_issuing_cards_card_with_http_info(card: card, post_issuing_cards_card_request: post_issuing_cards_card_request)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param post_issuing_cards_card_request [Stripe::PostIssuingCardsCardRequest?]
    # @return [Tuple(Stripe::IssuingCard, Integer, Hash)] Stripe::IssuingCard, response status code and response headers
    def post_issuing_cards_card_with_http_info(
      *,
      card : String? = nil,
      post_issuing_cards_card_request : Stripe::PostIssuingCardsCardRequest? = nil
    ) : Tuple(Stripe::IssuingCard, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_cards_card(card: card, post_issuing_cards_card_request: post_issuing_cards_card_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_cards_card\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingCard.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param card [String?]
    # @optional @param post_issuing_cards_card_request [Stripe::PostIssuingCardsCardRequest?]
    # @return nil
    def post_issuing_cards_card(
      *,
      card : String? = nil,
      post_issuing_cards_card_request : Stripe::PostIssuingCardsCardRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_cards_card(card: card, post_issuing_cards_card_request: post_issuing_cards_card_request).execute(&block)
    end

    POST_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_cards_card(
      *,
      card : String? = nil,
      post_issuing_cards_card_request : Stripe::PostIssuingCardsCardRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_cards_card ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"card\" is required and cannot be null") if card.nil?
        unless (_card = card).nil?
          OpenApi::PrimitiveValidator.validate_max_length("card", card.to_s.size, POST_ISSUING_CARDS_CARD_MAX_LENGTH_FOR_CARD)
        end
        unless (_post_issuing_cards_card_request = post_issuing_cards_card_request).nil?
          _post_issuing_cards_card_request.validate if _post_issuing_cards_card_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/cards/{card}".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_issuing_cards_card_request, content_type: header_params["Content-Type"]?) if !post_issuing_cards_card_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_cards_card",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href=\"/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
    # @optional @param post_issuing_disputes_request [Stripe::PostIssuingDisputesRequest?]
    # @return [Stripe::IssuingDispute]
    def post_issuing_disputes(
      *,
      post_issuing_disputes_request : Stripe::PostIssuingDisputesRequest? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = post_issuing_disputes_with_http_info(post_issuing_disputes_request: post_issuing_disputes_request)
      data
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
    # @optional @param post_issuing_disputes_request [Stripe::PostIssuingDisputesRequest?]
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def post_issuing_disputes_with_http_info(
      *,
      post_issuing_disputes_request : Stripe::PostIssuingDisputesRequest? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_disputes(post_issuing_disputes_request: post_issuing_disputes_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_disputes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
    # @optional @param post_issuing_disputes_request [Stripe::PostIssuingDisputesRequest?]
    # @return nil
    def post_issuing_disputes(
      *,
      post_issuing_disputes_request : Stripe::PostIssuingDisputesRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_disputes(post_issuing_disputes_request: post_issuing_disputes_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes(
      *,
      post_issuing_disputes_request : Stripe::PostIssuingDisputesRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_disputes ..." }
      end

      if client_side_validation
        unless (_post_issuing_disputes_request = post_issuing_disputes_request).nil?
          _post_issuing_disputes_request.validate if _post_issuing_disputes_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_issuing_disputes_request, content_type: header_params["Content-Type"]?) if !post_issuing_disputes_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
    # @required @param dispute [String?]
    # @optional @param post_issuing_disputes_dispute_request [Stripe::PostIssuingDisputesDisputeRequest?]
    # @return [Stripe::IssuingDispute]
    def post_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      post_issuing_disputes_dispute_request : Stripe::PostIssuingDisputesDisputeRequest? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = post_issuing_disputes_dispute_with_http_info(dispute: dispute, post_issuing_disputes_dispute_request: post_issuing_disputes_dispute_request)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param post_issuing_disputes_dispute_request [Stripe::PostIssuingDisputesDisputeRequest?]
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def post_issuing_disputes_dispute_with_http_info(
      *,
      dispute : String? = nil,
      post_issuing_disputes_dispute_request : Stripe::PostIssuingDisputesDisputeRequest? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_disputes_dispute(dispute: dispute, post_issuing_disputes_dispute_request: post_issuing_disputes_dispute_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_disputes_dispute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param post_issuing_disputes_dispute_request [Stripe::PostIssuingDisputesDisputeRequest?]
    # @return nil
    def post_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      post_issuing_disputes_dispute_request : Stripe::PostIssuingDisputesDisputeRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_disputes_dispute(dispute: dispute, post_issuing_disputes_dispute_request: post_issuing_disputes_dispute_request).execute(&block)
    end

    POST_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes_dispute(
      *,
      dispute : String? = nil,
      post_issuing_disputes_dispute_request : Stripe::PostIssuingDisputesDisputeRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_disputes_dispute ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, POST_ISSUING_DISPUTES_DISPUTE_MAX_LENGTH_FOR_DISPUTE)
        end
        unless (_post_issuing_disputes_dispute_request = post_issuing_disputes_dispute_request).nil?
          _post_issuing_disputes_dispute_request.validate if _post_issuing_disputes_dispute_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_issuing_disputes_dispute_request, content_type: header_params["Content-Type"]?) if !post_issuing_disputes_dispute_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href=\"/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\">Dispute reasons and evidence</a>.</p>
    # @required @param dispute [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Stripe::IssuingDispute]
    def post_issuing_disputes_dispute_submit(
      *,
      dispute : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Stripe::IssuingDispute
      data, _status_code, _headers = post_issuing_disputes_dispute_submit_with_http_info(dispute: dispute, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)
      data
    end

    # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Tuple(Stripe::IssuingDispute, Integer, Hash)] Stripe::IssuingDispute, response status code and response headers
    def post_issuing_disputes_dispute_submit_with_http_info(
      *,
      dispute : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Tuple(Stripe::IssuingDispute, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_disputes_dispute_submit(dispute: dispute, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_disputes_dispute_submit\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingDispute.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
    # @required @param dispute [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return nil
    def post_issuing_disputes_dispute_submit(
      *,
      dispute : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_disputes_dispute_submit(dispute: dispute, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request).execute(&block)
    end

    POST_ISSUING_DISPUTES_DISPUTE_SUBMIT_MAX_LENGTH_FOR_DISPUTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes_dispute_submit(
      *,
      dispute : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_disputes_dispute_submit ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"dispute\" is required and cannot be null") if dispute.nil?
        unless (_dispute = dispute).nil?
          OpenApi::PrimitiveValidator.validate_max_length("dispute", dispute.to_s.size, POST_ISSUING_DISPUTES_DISPUTE_SUBMIT_MAX_LENGTH_FOR_DISPUTE)
        end
        unless (_post_application_fees_fee_refunds_id_request = post_application_fees_fee_refunds_id_request).nil?
          _post_application_fees_fee_refunds_id_request.validate if _post_application_fees_fee_refunds_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}/submit".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_application_fees_fee_refunds_id_request, content_type: header_params["Content-Type"]?) if !post_application_fees_fee_refunds_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_disputes_dispute_submit",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param transaction [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Stripe::IssuingTransaction]
    def post_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Stripe::IssuingTransaction
      data, _status_code, _headers = post_issuing_transactions_transaction_with_http_info(transaction: transaction, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Tuple(Stripe::IssuingTransaction, Integer, Hash)] Stripe::IssuingTransaction, response status code and response headers
    def post_issuing_transactions_transaction_with_http_info(
      *,
      transaction : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Tuple(Stripe::IssuingTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_issuing_transactions_transaction(transaction: transaction, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: IssuingApi#post_issuing_transactions_transaction\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::IssuingTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return nil
    def post_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_issuing_transactions_transaction(transaction: transaction, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request).execute(&block)
    end

    POST_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_issuing_transactions_transaction(
      *,
      transaction : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: IssuingApi.post_issuing_transactions_transaction ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"transaction\" is required and cannot be null") if transaction.nil?
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, POST_ISSUING_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION)
        end
        unless (_post_application_fees_fee_refunds_id_request = post_application_fees_fee_refunds_id_request).nil?
          _post_application_fees_fee_refunds_id_request.validate if _post_application_fees_fee_refunds_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/issuing/transactions/{transaction}".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_application_fees_fee_refunds_id_request, content_type: header_params["Content-Type"]?) if !post_application_fees_fee_refunds_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "IssuingApi.post_issuing_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
