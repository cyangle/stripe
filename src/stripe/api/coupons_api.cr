#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class CouponsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>You can delete coupons via the <a href=\"https://dashboard.stripe.com/coupons\">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
    # @required @param coupon [String?]
    # @return [Stripe::DeletedCoupon]
    def delete_coupons_coupon(
      *,
      coupon : String? = nil
    ) : Stripe::DeletedCoupon
      data, _status_code, _headers = delete_coupons_coupon_with_http_info(coupon: coupon)
      data
    end

    # &lt;p&gt;You can delete coupons via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.&lt;/p&gt;
    # @required @param coupon [String?]
    # @return [Tuple(Stripe::DeletedCoupon, Integer, Hash)] Stripe::DeletedCoupon, response status code and response headers
    def delete_coupons_coupon_with_http_info(
      *,
      coupon : String? = nil
    ) : Tuple(Stripe::DeletedCoupon, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_coupons_coupon(coupon: coupon)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CouponsApi#delete_coupons_coupon\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedCoupon.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can delete coupons via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.&lt;/p&gt;
    # @required @param coupon [String?]
    # @return nil
    def delete_coupons_coupon(
      *,
      coupon : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_coupons_coupon(coupon: coupon).execute(&block)
    end

    DELETE_COUPONS_COUPON_MAX_LENGTH_FOR_COUPON = 5000

    # @return Crest::Request
    def build_api_request_for_delete_coupons_coupon(
      *,
      coupon : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CouponsApi.delete_coupons_coupon ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"coupon\" is required and cannot be null") if coupon.nil?
        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, DELETE_COUPONS_COUPON_MAX_LENGTH_FOR_COUPON)
        end
      end

      # resource path
      local_var_path = "/v1/coupons/{coupon}".sub("{" + "coupon" + "}", URI.encode_path(coupon.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "CouponsApi.delete_coupons_coupon",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your coupons.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::CouponsResourceCouponList]
    def get_coupons(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::CouponsResourceCouponList
      data, _status_code, _headers = get_coupons_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your coupons.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::CouponsResourceCouponList, Integer, Hash)] Stripe::CouponsResourceCouponList, response status code and response headers
    def get_coupons_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::CouponsResourceCouponList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_coupons(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CouponsApi#get_coupons\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::CouponsResourceCouponList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your coupons.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_coupons(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_coupons(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, expand: expand).execute(&block)
    end

    GET_COUPONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_COUPONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_coupons(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CouponsApi.get_coupons ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_COUPONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_COUPONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/coupons"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CouponsApi.get_coupons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the coupon with the given ID.</p>
    # @required @param coupon [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Coupon]
    def get_coupons_coupon(
      *,
      coupon : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Coupon
      data, _status_code, _headers = get_coupons_coupon_with_http_info(coupon: coupon, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the coupon with the given ID.&lt;/p&gt;
    # @required @param coupon [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Coupon, Integer, Hash)] Stripe::Coupon, response status code and response headers
    def get_coupons_coupon_with_http_info(
      *,
      coupon : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Coupon, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_coupons_coupon(coupon: coupon, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CouponsApi#get_coupons_coupon\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Coupon.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the coupon with the given ID.&lt;/p&gt;
    # @required @param coupon [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_coupons_coupon(
      *,
      coupon : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_coupons_coupon(coupon: coupon, expand: expand).execute(&block)
    end

    GET_COUPONS_COUPON_MAX_LENGTH_FOR_COUPON = 5000

    # @return Crest::Request
    def build_api_request_for_get_coupons_coupon(
      *,
      coupon : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CouponsApi.get_coupons_coupon ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"coupon\" is required and cannot be null") if coupon.nil?
        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, GET_COUPONS_COUPON_MAX_LENGTH_FOR_COUPON)
        end
      end

      # resource path
      local_var_path = "/v1/coupons/{coupon}".sub("{" + "coupon" + "}", URI.encode_path(coupon.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CouponsApi.get_coupons_coupon",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can create coupons easily via the <a href=\"https://dashboard.stripe.com/coupons\">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>  <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
    # @optional @param post_coupons_request [Stripe::PostCouponsRequest?]
    # @return [Stripe::Coupon]
    def post_coupons(
      *,
      post_coupons_request : Stripe::PostCouponsRequest? = nil
    ) : Stripe::Coupon
      data, _status_code, _headers = post_coupons_with_http_info(post_coupons_request: post_coupons_request)
      data
    end

    # &lt;p&gt;You can create coupons easily via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.&lt;/p&gt;  &lt;p&gt;A coupon has either a &lt;code&gt;percent_off&lt;/code&gt; or an &lt;code&gt;amount_off&lt;/code&gt; and &lt;code&gt;currency&lt;/code&gt;. If you set an &lt;code&gt;amount_off&lt;/code&gt;, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of &lt;currency&gt;100&lt;/currency&gt; will have a final total of &lt;currency&gt;0&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it and an invoice with a subtotal of &lt;currency&gt;300&lt;/currency&gt; will have a final total of &lt;currency&gt;100&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it.&lt;/p&gt;
    # @optional @param post_coupons_request [Stripe::PostCouponsRequest?]
    # @return [Tuple(Stripe::Coupon, Integer, Hash)] Stripe::Coupon, response status code and response headers
    def post_coupons_with_http_info(
      *,
      post_coupons_request : Stripe::PostCouponsRequest? = nil
    ) : Tuple(Stripe::Coupon, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_coupons(post_coupons_request: post_coupons_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CouponsApi#post_coupons\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Coupon.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can create coupons easily via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.&lt;/p&gt;  &lt;p&gt;A coupon has either a &lt;code&gt;percent_off&lt;/code&gt; or an &lt;code&gt;amount_off&lt;/code&gt; and &lt;code&gt;currency&lt;/code&gt;. If you set an &lt;code&gt;amount_off&lt;/code&gt;, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of &lt;currency&gt;100&lt;/currency&gt; will have a final total of &lt;currency&gt;0&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it and an invoice with a subtotal of &lt;currency&gt;300&lt;/currency&gt; will have a final total of &lt;currency&gt;100&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it.&lt;/p&gt;
    # @optional @param post_coupons_request [Stripe::PostCouponsRequest?]
    # @return nil
    def post_coupons(
      *,
      post_coupons_request : Stripe::PostCouponsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_coupons(post_coupons_request: post_coupons_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_coupons(
      *,
      post_coupons_request : Stripe::PostCouponsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CouponsApi.post_coupons ..." }
      end

      if client_side_validation
        unless (_post_coupons_request = post_coupons_request).nil?
          _post_coupons_request.validate if _post_coupons_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/coupons"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_coupons_request, content_type: header_params["Content-Type"]?) if !post_coupons_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CouponsApi.post_coupons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
    # @required @param coupon [String?]
    # @optional @param post_coupons_coupon_request [Stripe::PostCouponsCouponRequest?]
    # @return [Stripe::Coupon]
    def post_coupons_coupon(
      *,
      coupon : String? = nil,
      post_coupons_coupon_request : Stripe::PostCouponsCouponRequest? = nil
    ) : Stripe::Coupon
      data, _status_code, _headers = post_coupons_coupon_with_http_info(coupon: coupon, post_coupons_coupon_request: post_coupons_coupon_request)
      data
    end

    # &lt;p&gt;Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.&lt;/p&gt;
    # @required @param coupon [String?]
    # @optional @param post_coupons_coupon_request [Stripe::PostCouponsCouponRequest?]
    # @return [Tuple(Stripe::Coupon, Integer, Hash)] Stripe::Coupon, response status code and response headers
    def post_coupons_coupon_with_http_info(
      *,
      coupon : String? = nil,
      post_coupons_coupon_request : Stripe::PostCouponsCouponRequest? = nil
    ) : Tuple(Stripe::Coupon, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_coupons_coupon(coupon: coupon, post_coupons_coupon_request: post_coupons_coupon_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CouponsApi#post_coupons_coupon\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Coupon.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.&lt;/p&gt;
    # @required @param coupon [String?]
    # @optional @param post_coupons_coupon_request [Stripe::PostCouponsCouponRequest?]
    # @return nil
    def post_coupons_coupon(
      *,
      coupon : String? = nil,
      post_coupons_coupon_request : Stripe::PostCouponsCouponRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_coupons_coupon(coupon: coupon, post_coupons_coupon_request: post_coupons_coupon_request).execute(&block)
    end

    POST_COUPONS_COUPON_MAX_LENGTH_FOR_COUPON = 5000

    # @return Crest::Request
    def build_api_request_for_post_coupons_coupon(
      *,
      coupon : String? = nil,
      post_coupons_coupon_request : Stripe::PostCouponsCouponRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CouponsApi.post_coupons_coupon ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"coupon\" is required and cannot be null") if coupon.nil?
        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, POST_COUPONS_COUPON_MAX_LENGTH_FOR_COUPON)
        end
        unless (_post_coupons_coupon_request = post_coupons_coupon_request).nil?
          _post_coupons_coupon_request.validate if _post_coupons_coupon_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/coupons/{coupon}".sub("{" + "coupon" + "}", URI.encode_path(coupon.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_coupons_coupon_request, content_type: header_params["Content-Type"]?) if !post_coupons_coupon_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CouponsApi.post_coupons_coupon",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
