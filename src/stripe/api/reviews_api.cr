#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class ReviewsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::RadarReviewList]
    def get_reviews(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Stripe::RadarReviewList
      data, _status_code, _headers = get_reviews_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Review&lt;/code&gt; objects that have &lt;code&gt;open&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::RadarReviewList, Integer, Hash)] Stripe::RadarReviewList, response status code and response headers
    def get_reviews_with_http_info(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Tuple(Stripe::RadarReviewList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_reviews(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ReviewsApi#get_reviews\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarReviewList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Review&lt;/code&gt; objects that have &lt;code&gt;open&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_reviews(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_reviews(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, created: created).execute(&block)
    end

    GET_REVIEWS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_REVIEWS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_reviews(*, ending_before : String? = nil, starting_after : String? = nil, limit : Int64? = nil, expand : Array(Array(String))? = nil, created : Stripe::GetAccountsCreatedParameter? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: ReviewsApi.get_reviews ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_REVIEWS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_REVIEWS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/reviews"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ReviewsApi.get_reviews",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Review</code> object.</p>
    # @required @param review [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Review]
    def get_reviews_review(*, review : String? = nil, expand : Array(Array(String))? = nil) : Stripe::Review
      data, _status_code, _headers = get_reviews_review_with_http_info(review: review, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Review&lt;/code&gt; object.&lt;/p&gt;
    # @required @param review [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Review, Integer, Hash)] Stripe::Review, response status code and response headers
    def get_reviews_review_with_http_info(*, review : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::Review, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_reviews_review(review: review, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ReviewsApi#get_reviews_review\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Review.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Review&lt;/code&gt; object.&lt;/p&gt;
    # @required @param review [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_reviews_review(*, review : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_reviews_review(review: review, expand: expand).execute(&block)
    end

    GET_REVIEWS_REVIEW_MAX_LENGTH_FOR_REVIEW = 5000

    # @return Crest::Request
    def build_api_request_for_get_reviews_review(*, review : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: ReviewsApi.get_reviews_review ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"review\" is required and cannot be null") if review.nil?
        unless (_review = review).nil?
          OpenApi::PrimitiveValidator.validate_max_length("review", review.to_s.size, GET_REVIEWS_REVIEW_MAX_LENGTH_FOR_REVIEW)
        end
      end

      # resource path
      local_var_path = "/v1/reviews/{review}".sub("{" + "review" + "}", URI.encode_path(review.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ReviewsApi.get_reviews_review",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
    # @required @param review [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Review]
    def post_reviews_review_approve(*, review : String? = nil, expand : Array(String)? = nil) : Stripe::Review
      data, _status_code, _headers = post_reviews_review_approve_with_http_info(review: review, expand: expand)
      data
    end

    # &lt;p&gt;Approves a &lt;code&gt;Review&lt;/code&gt; object, closing it and removing it from the list of reviews.&lt;/p&gt;
    # @required @param review [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Review, Integer, Hash)] Stripe::Review, response status code and response headers
    def post_reviews_review_approve_with_http_info(*, review : String? = nil, expand : Array(String)? = nil) : Tuple(Stripe::Review, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_reviews_review_approve(review: review, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ReviewsApi#post_reviews_review_approve\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Review.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Approves a &lt;code&gt;Review&lt;/code&gt; object, closing it and removing it from the list of reviews.&lt;/p&gt;
    # @required @param review [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_reviews_review_approve(*, review : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_reviews_review_approve(review: review, expand: expand).execute(&block)
    end

    POST_REVIEWS_REVIEW_APPROVE_MAX_LENGTH_FOR_REVIEW = 5000

    # @return Crest::Request
    def build_api_request_for_post_reviews_review_approve(*, review : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: ReviewsApi.post_reviews_review_approve ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"review\" is required and cannot be null") if review.nil?
        unless (_review = review).nil?
          OpenApi::PrimitiveValidator.validate_max_length("review", review.to_s.size, POST_REVIEWS_REVIEW_APPROVE_MAX_LENGTH_FOR_REVIEW)
        end
      end

      # resource path
      local_var_path = "/v1/reviews/{review}/approve".sub("{" + "review" + "}", URI.encode_path(review.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ReviewsApi.post_reviews_review_approve",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
