#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class ShippingRatesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your shipping rates.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param currency [String?] Only return shipping rates for the given currency.
    # @optional @param active [Bool?] Only return shipping rates that are active or inactive.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ShippingResourcesShippingRateList]
    def get_shipping_rates(*, ending_before : String? = nil, starting_after : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, limit : Int64? = nil, currency : String? = nil, active : Bool? = nil, expand : Array(Array(String))? = nil) : Stripe::ShippingResourcesShippingRateList
      data, _status_code, _headers = get_shipping_rates_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, currency: currency, active: active, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your shipping rates.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param currency [String?] Only return shipping rates for the given currency.
    # @optional @param active [Bool?] Only return shipping rates that are active or inactive.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ShippingResourcesShippingRateList, Integer, Hash)] Stripe::ShippingResourcesShippingRateList, response status code and response headers
    def get_shipping_rates_with_http_info(*, ending_before : String? = nil, starting_after : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, limit : Int64? = nil, currency : String? = nil, active : Bool? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::ShippingResourcesShippingRateList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_shipping_rates(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, currency: currency, active: active, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ShippingRatesApi#get_shipping_rates\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ShippingResourcesShippingRateList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your shipping rates.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param currency [String?] Only return shipping rates for the given currency.
    # @optional @param active [Bool?] Only return shipping rates that are active or inactive.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_shipping_rates(*, ending_before : String? = nil, starting_after : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, limit : Int64? = nil, currency : String? = nil, active : Bool? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_shipping_rates(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, currency: currency, active: active, expand: expand).execute(&block)
    end

    GET_SHIPPING_RATES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_SHIPPING_RATES_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_shipping_rates(*, ending_before : String? = nil, starting_after : String? = nil, created : Stripe::GetAccountsCreatedParameter? = nil, limit : Int64? = nil, currency : String? = nil, active : Bool? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: ShippingRatesApi.get_shipping_rates ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_SHIPPING_RATES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_SHIPPING_RATES_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/shipping_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ShippingRatesApi.get_shipping_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns the shipping rate object with the given ID.</p>
    # @required @param shipping_rate_token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ShippingRate]
    def get_shipping_rates_shipping_rate_token(*, shipping_rate_token : String? = nil, expand : Array(Array(String))? = nil) : Stripe::ShippingRate
      data, _status_code, _headers = get_shipping_rates_shipping_rate_token_with_http_info(shipping_rate_token: shipping_rate_token, expand: expand)
      data
    end

    # &lt;p&gt;Returns the shipping rate object with the given ID.&lt;/p&gt;
    # @required @param shipping_rate_token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ShippingRate, Integer, Hash)] Stripe::ShippingRate, response status code and response headers
    def get_shipping_rates_shipping_rate_token_with_http_info(*, shipping_rate_token : String? = nil, expand : Array(Array(String))? = nil) : Tuple(Stripe::ShippingRate, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ShippingRatesApi#get_shipping_rates_shipping_rate_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ShippingRate.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns the shipping rate object with the given ID.&lt;/p&gt;
    # @required @param shipping_rate_token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_shipping_rates_shipping_rate_token(*, shipping_rate_token : String? = nil, expand : Array(Array(String))? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_get_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, expand: expand).execute(&block)
    end

    GET_SHIPPING_RATES_SHIPPING_RATE_TOKEN_MAX_LENGTH_FOR_SHIPPING_RATE_TOKEN = 5000

    # @return Crest::Request
    def build_api_request_for_get_shipping_rates_shipping_rate_token(*, shipping_rate_token : String? = nil, expand : Array(Array(String))? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: ShippingRatesApi.get_shipping_rates_shipping_rate_token ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"shipping_rate_token\" is required and cannot be null") if shipping_rate_token.nil?
        unless (_shipping_rate_token = shipping_rate_token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("shipping_rate_token", shipping_rate_token.to_s.size, GET_SHIPPING_RATES_SHIPPING_RATE_TOKEN_MAX_LENGTH_FOR_SHIPPING_RATE_TOKEN)
        end
      end

      # resource path
      local_var_path = "/v1/shipping_rates/{shipping_rate_token}".sub("{" + "shipping_rate_token" + "}", URI.encode_path(shipping_rate_token.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ShippingRatesApi.get_shipping_rates_shipping_rate_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new shipping rate object.</p>
    # @required @param display_name [String?] The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    # @optional @param delivery_estimate [Stripe::DeliveryEstimate?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fixed_amount [Stripe::FixedAmount?]
    # @optional @param tax_behavior [String?] Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    # @optional @param tax_code [String?] A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
    # @optional @param _type [String?] The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    # @return [Stripe::ShippingRate]
    def post_shipping_rates(*, display_name : String? = nil, delivery_estimate : Stripe::DeliveryEstimate? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmount? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil) : Stripe::ShippingRate
      data, _status_code, _headers = post_shipping_rates_with_http_info(display_name: display_name, delivery_estimate: delivery_estimate, expand: expand, fixed_amount: fixed_amount, tax_behavior: tax_behavior, tax_code: tax_code, _type: _type)
      data
    end

    # &lt;p&gt;Creates a new shipping rate object.&lt;/p&gt;
    # @required @param display_name [String?] The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    # @optional @param delivery_estimate [Stripe::DeliveryEstimate?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fixed_amount [Stripe::FixedAmount?]
    # @optional @param tax_behavior [String?] Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    # @optional @param tax_code [String?] A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
    # @optional @param _type [String?] The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    # @return [Tuple(Stripe::ShippingRate, Integer, Hash)] Stripe::ShippingRate, response status code and response headers
    def post_shipping_rates_with_http_info(*, display_name : String? = nil, delivery_estimate : Stripe::DeliveryEstimate? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmount? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil) : Tuple(Stripe::ShippingRate, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_shipping_rates(display_name: display_name, delivery_estimate: delivery_estimate, expand: expand, fixed_amount: fixed_amount, tax_behavior: tax_behavior, tax_code: tax_code, _type: _type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ShippingRatesApi#post_shipping_rates\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ShippingRate.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new shipping rate object.&lt;/p&gt;
    # @required @param display_name [String?] The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    # @optional @param delivery_estimate [Stripe::DeliveryEstimate?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fixed_amount [Stripe::FixedAmount?]
    # @optional @param tax_behavior [String?] Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    # @optional @param tax_code [String?] A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
    # @optional @param _type [String?] The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    # @return nil
    def post_shipping_rates(*, display_name : String? = nil, delivery_estimate : Stripe::DeliveryEstimate? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmount? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_shipping_rates(display_name: display_name, delivery_estimate: delivery_estimate, expand: expand, fixed_amount: fixed_amount, tax_behavior: tax_behavior, tax_code: tax_code, _type: _type).execute(&block)
    end

    POST_SHIPPING_RATES_MAX_LENGTH_FOR_DISPLAY_NAME   = 100
    POST_SHIPPING_RATES_VALID_VALUES_FOR_TAX_BEHAVIOR = String.static_array("exclusive", "inclusive", "unspecified")
    POST_SHIPPING_RATES_VALID_VALUES_FOR__TYPE        = String.static_array("fixed_amount")

    # @return Crest::Request
    def build_api_request_for_post_shipping_rates(*, display_name : String? = nil, delivery_estimate : Stripe::DeliveryEstimate? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmount? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: ShippingRatesApi.post_shipping_rates ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"display_name\" is required and cannot be null") if display_name.nil?
        unless (_display_name = display_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("display_name", display_name.to_s.size, POST_SHIPPING_RATES_MAX_LENGTH_FOR_DISPLAY_NAME)
        end
        unless (_delivery_estimate = delivery_estimate).nil?
          _delivery_estimate.validate if _delivery_estimate.is_a?(OpenApi::Validatable)
        end

        unless (_fixed_amount = fixed_amount).nil?
          _fixed_amount.validate if _fixed_amount.is_a?(OpenApi::Validatable)
        end
        unless (_tax_behavior = tax_behavior).nil?
          OpenApi::EnumValidator.validate("tax_behavior", _tax_behavior, POST_SHIPPING_RATES_VALID_VALUES_FOR_TAX_BEHAVIOR)
        end

        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_SHIPPING_RATES_VALID_VALUES_FOR__TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/shipping_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["delivery_estimate"] = delivery_estimate.to_s if !delivery_estimate.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["fixed_amount"] = fixed_amount.to_s if !fixed_amount.nil?
      form_params["tax_behavior"] = tax_behavior.to_s if !tax_behavior.nil?
      form_params["tax_code"] = tax_code.to_s if !tax_code.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ShippingRatesApi.post_shipping_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing shipping rate object.</p>
    # @required @param shipping_rate_token [String?]
    # @optional @param active [Bool?] Whether the shipping rate can be used for new purchases. Defaults to `true`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fixed_amount [Stripe::FixedAmountUpdate?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param tax_behavior [String?] Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    # @return [Stripe::ShippingRate]
    def post_shipping_rates_shipping_rate_token(*, shipping_rate_token : String? = nil, active : Bool? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmountUpdate? = nil, metadata : Stripe::PostAccountsRequestMetadata? = nil, tax_behavior : String? = nil) : Stripe::ShippingRate
      data, _status_code, _headers = post_shipping_rates_shipping_rate_token_with_http_info(shipping_rate_token: shipping_rate_token, active: active, expand: expand, fixed_amount: fixed_amount, metadata: metadata, tax_behavior: tax_behavior)
      data
    end

    # &lt;p&gt;Updates an existing shipping rate object.&lt;/p&gt;
    # @required @param shipping_rate_token [String?]
    # @optional @param active [Bool?] Whether the shipping rate can be used for new purchases. Defaults to `true`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fixed_amount [Stripe::FixedAmountUpdate?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param tax_behavior [String?] Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    # @return [Tuple(Stripe::ShippingRate, Integer, Hash)] Stripe::ShippingRate, response status code and response headers
    def post_shipping_rates_shipping_rate_token_with_http_info(*, shipping_rate_token : String? = nil, active : Bool? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmountUpdate? = nil, metadata : Stripe::PostAccountsRequestMetadata? = nil, tax_behavior : String? = nil) : Tuple(Stripe::ShippingRate, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, active: active, expand: expand, fixed_amount: fixed_amount, metadata: metadata, tax_behavior: tax_behavior)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ShippingRatesApi#post_shipping_rates_shipping_rate_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ShippingRate.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing shipping rate object.&lt;/p&gt;
    # @required @param shipping_rate_token [String?]
    # @optional @param active [Bool?] Whether the shipping rate can be used for new purchases. Defaults to `true`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fixed_amount [Stripe::FixedAmountUpdate?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param tax_behavior [String?] Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    # @return nil
    def post_shipping_rates_shipping_rate_token(*, shipping_rate_token : String? = nil, active : Bool? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmountUpdate? = nil, metadata : Stripe::PostAccountsRequestMetadata? = nil, tax_behavior : String? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, active: active, expand: expand, fixed_amount: fixed_amount, metadata: metadata, tax_behavior: tax_behavior).execute(&block)
    end

    POST_SHIPPING_RATES_SHIPPING_RATE_TOKEN_MAX_LENGTH_FOR_SHIPPING_RATE_TOKEN = 5000
    POST_SHIPPING_RATES_SHIPPING_RATE_TOKEN_VALID_VALUES_FOR_TAX_BEHAVIOR      = String.static_array("exclusive", "inclusive", "unspecified")

    # @return Crest::Request
    def build_api_request_for_post_shipping_rates_shipping_rate_token(*, shipping_rate_token : String? = nil, active : Bool? = nil, expand : Array(String)? = nil, fixed_amount : Stripe::FixedAmountUpdate? = nil, metadata : Stripe::PostAccountsRequestMetadata? = nil, tax_behavior : String? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: ShippingRatesApi.post_shipping_rates_shipping_rate_token ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"shipping_rate_token\" is required and cannot be null") if shipping_rate_token.nil?
        unless (_shipping_rate_token = shipping_rate_token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("shipping_rate_token", shipping_rate_token.to_s.size, POST_SHIPPING_RATES_SHIPPING_RATE_TOKEN_MAX_LENGTH_FOR_SHIPPING_RATE_TOKEN)
        end

        unless (_fixed_amount = fixed_amount).nil?
          _fixed_amount.validate if _fixed_amount.is_a?(OpenApi::Validatable)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_tax_behavior = tax_behavior).nil?
          OpenApi::EnumValidator.validate("tax_behavior", _tax_behavior, POST_SHIPPING_RATES_SHIPPING_RATE_TOKEN_VALID_VALUES_FOR_TAX_BEHAVIOR)
        end
      end

      # resource path
      local_var_path = "/v1/shipping_rates/{shipping_rate_token}".sub("{" + "shipping_rate_token" + "}", URI.encode_path(shipping_rate_token.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["fixed_amount"] = fixed_amount.to_s if !fixed_amount.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["tax_behavior"] = tax_behavior.to_s if !tax_behavior.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ShippingRatesApi.post_shipping_rates_shipping_rate_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
