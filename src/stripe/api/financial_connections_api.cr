#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class FinancialConnectionsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param account_holder [Stripe::AccountholderParams?] If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.
    # @optional @param session [String?] If present, only return accounts that were collected as part of the given session.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BankConnectionsResourceLinkedAccountList]
    def get_financial_connections_accounts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      account_holder : Stripe::AccountholderParams? = nil,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::BankConnectionsResourceLinkedAccountList
      data, _status_code, _headers = get_financial_connections_accounts_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, account_holder: account_holder, session: session, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param account_holder [Stripe::AccountholderParams?] If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.
    # @optional @param session [String?] If present, only return accounts that were collected as part of the given session.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BankConnectionsResourceLinkedAccountList, Integer, Hash)] Stripe::BankConnectionsResourceLinkedAccountList, response status code and response headers
    def get_financial_connections_accounts_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      account_holder : Stripe::AccountholderParams? = nil,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::BankConnectionsResourceLinkedAccountList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_financial_connections_accounts(ending_before: ending_before, starting_after: starting_after, limit: limit, account_holder: account_holder, session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FinancialConnectionsApi#get_financial_connections_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BankConnectionsResourceLinkedAccountList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param account_holder [Stripe::AccountholderParams?] If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.
    # @optional @param session [String?] If present, only return accounts that were collected as part of the given session.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_financial_connections_accounts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      account_holder : Stripe::AccountholderParams? = nil,
      session : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_financial_connections_accounts(ending_before: ending_before, starting_after: starting_after, limit: limit, account_holder: account_holder, session: session, expand: expand).execute(&block)
    end

    GET_FINANCIAL_CONNECTIONS_ACCOUNTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_FINANCIAL_CONNECTIONS_ACCOUNTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_FINANCIAL_CONNECTIONS_ACCOUNTS_MAX_LENGTH_FOR_SESSION        = 5000

    # @return Crest::Request
    def build_api_request_for_get_financial_connections_accounts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      account_holder : Stripe::AccountholderParams? = nil,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FinancialConnectionsApi.get_financial_connections_accounts ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_FINANCIAL_CONNECTIONS_ACCOUNTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_FINANCIAL_CONNECTIONS_ACCOUNTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_account_holder = account_holder).nil?
          _account_holder.validate if _account_holder.is_a?(OpenApi::Validatable)
        end
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, GET_FINANCIAL_CONNECTIONS_ACCOUNTS_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["account_holder"] = account_holder.to_s if !account_holder.nil?
      query_params["session"] = session.to_s if !session.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FinancialConnectionsApi.get_financial_connections_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::FinancialConnectionsAccount]
    def get_financial_connections_accounts_account(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::FinancialConnectionsAccount
      data, _status_code, _headers = get_financial_connections_accounts_account_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::FinancialConnectionsAccount, Integer, Hash)] Stripe::FinancialConnectionsAccount, response status code and response headers
    def get_financial_connections_accounts_account_with_http_info(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::FinancialConnectionsAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_financial_connections_accounts_account(account: account, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FinancialConnectionsApi#get_financial_connections_accounts_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FinancialConnectionsAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_financial_connections_accounts_account(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_financial_connections_accounts_account(account: account, expand: expand).execute(&block)
    end

    GET_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_financial_connections_accounts_account(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FinancialConnectionsApi.get_financial_connections_accounts_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FinancialConnectionsApi.get_financial_connections_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a Financial Connections <code>Session</code></p>
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::FinancialConnectionsSession]
    def get_financial_connections_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::FinancialConnectionsSession
      data, _status_code, _headers = get_financial_connections_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::FinancialConnectionsSession, Integer, Hash)] Stripe::FinancialConnectionsSession, response status code and response headers
    def get_financial_connections_sessions_session_with_http_info(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::FinancialConnectionsSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_financial_connections_sessions_session(session: session, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FinancialConnectionsApi#get_financial_connections_sessions_session\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FinancialConnectionsSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
    # @required @param session [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_financial_connections_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_financial_connections_sessions_session(session: session, expand: expand).execute(&block)
    end

    GET_FINANCIAL_CONNECTIONS_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION = 5000

    # @return Crest::Request
    def build_api_request_for_get_financial_connections_sessions_session(
      *,
      session : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FinancialConnectionsApi.get_financial_connections_sessions_session ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"session\" is required and cannot be null") if session.nil?
        unless (_session = session).nil?
          OpenApi::PrimitiveValidator.validate_max_length("session", session.to_s.size, GET_FINANCIAL_CONNECTIONS_SESSIONS_SESSION_MAX_LENGTH_FOR_SESSION)
        end
      end

      # resource path
      local_var_path = "/v1/financial_connections/sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FinancialConnectionsApi.get_financial_connections_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
    # @required @param account [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::FinancialConnectionsAccount]
    def post_financial_connections_accounts_account_disconnect(
      *,
      account : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::FinancialConnectionsAccount
      data, _status_code, _headers = post_financial_connections_accounts_account_disconnect_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::FinancialConnectionsAccount, Integer, Hash)] Stripe::FinancialConnectionsAccount, response status code and response headers
    def post_financial_connections_accounts_account_disconnect_with_http_info(
      *,
      account : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::FinancialConnectionsAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_financial_connections_accounts_account_disconnect(account: account, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FinancialConnectionsApi#post_financial_connections_accounts_account_disconnect\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FinancialConnectionsAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_financial_connections_accounts_account_disconnect(
      *,
      account : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_financial_connections_accounts_account_disconnect(account: account, expand: expand).execute(&block)
    end

    POST_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_DISCONNECT_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_financial_connections_accounts_account_disconnect(
      *,
      account : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FinancialConnectionsApi.post_financial_connections_accounts_account_disconnect ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_DISCONNECT_MAX_LENGTH_FOR_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts/{account}/disconnect".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FinancialConnectionsApi.post_financial_connections_accounts_account_disconnect",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
    # @required @param account [String?]
    # @required @param features [Array(String)?] The list of account features that you would like to refresh.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::FinancialConnectionsAccount]
    def post_financial_connections_accounts_account_refresh(
      *,
      account : String? = nil,
      features : Array(String)? = nil,
      expand : Array(String)? = nil
    ) : Stripe::FinancialConnectionsAccount
      data, _status_code, _headers = post_financial_connections_accounts_account_refresh_with_http_info(account: account, features: features, expand: expand)
      data
    end

    # &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param features [Array(String)?] The list of account features that you would like to refresh.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::FinancialConnectionsAccount, Integer, Hash)] Stripe::FinancialConnectionsAccount, response status code and response headers
    def post_financial_connections_accounts_account_refresh_with_http_info(
      *,
      account : String? = nil,
      features : Array(String)? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::FinancialConnectionsAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_financial_connections_accounts_account_refresh(account: account, features: features, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FinancialConnectionsApi#post_financial_connections_accounts_account_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FinancialConnectionsAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param features [Array(String)?] The list of account features that you would like to refresh.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_financial_connections_accounts_account_refresh(
      *,
      account : String? = nil,
      features : Array(String)? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_financial_connections_accounts_account_refresh(account: account, features: features, expand: expand).execute(&block)
    end

    POST_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_REFRESH_MAX_LENGTH_FOR_ACCOUNT    = 5000
    POST_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_REFRESH_VALID_VALUES_FOR_FEATURES = String.static_array("balance", "ownership")

    # @return Crest::Request
    def build_api_request_for_post_financial_connections_accounts_account_refresh(
      *,
      account : String? = nil,
      features : Array(String)? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FinancialConnectionsApi.post_financial_connections_accounts_account_refresh ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_REFRESH_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"features\" is required and cannot be null") if features.nil?
        unless (_features = features).nil?
          OpenApi::EnumValidator.validate("features", _features, POST_FINANCIAL_CONNECTIONS_ACCOUNTS_ACCOUNT_REFRESH_VALID_VALUES_FOR_FEATURES)
        end
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts/{account}/refresh".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = @api_client.build_collection_param(features, "csv") if !features.nil? && !features.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FinancialConnectionsApi.post_financial_connections_accounts_account_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
    # @required @param account_holder [Stripe::AccountholderParams?]
    # @required @param permissions [Array(String)?] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param filters [Stripe::FiltersParams?]
    # @optional @param return_url [String?] For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
    # @return [Stripe::FinancialConnectionsSession]
    def post_financial_connections_sessions(
      *,
      account_holder : Stripe::AccountholderParams? = nil,
      permissions : Array(String)? = nil,
      expand : Array(String)? = nil,
      filters : Stripe::FiltersParams? = nil,
      return_url : String? = nil
    ) : Stripe::FinancialConnectionsSession
      data, _status_code, _headers = post_financial_connections_sessions_with_http_info(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url)
      data
    end

    # &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
    # @required @param account_holder [Stripe::AccountholderParams?]
    # @required @param permissions [Array(String)?] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param filters [Stripe::FiltersParams?]
    # @optional @param return_url [String?] For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
    # @return [Tuple(Stripe::FinancialConnectionsSession, Integer, Hash)] Stripe::FinancialConnectionsSession, response status code and response headers
    def post_financial_connections_sessions_with_http_info(
      *,
      account_holder : Stripe::AccountholderParams? = nil,
      permissions : Array(String)? = nil,
      expand : Array(String)? = nil,
      filters : Stripe::FiltersParams? = nil,
      return_url : String? = nil
    ) : Tuple(Stripe::FinancialConnectionsSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_financial_connections_sessions(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FinancialConnectionsApi#post_financial_connections_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::FinancialConnectionsSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
    # @required @param account_holder [Stripe::AccountholderParams?]
    # @required @param permissions [Array(String)?] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param filters [Stripe::FiltersParams?]
    # @optional @param return_url [String?] For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
    # @return nil
    def post_financial_connections_sessions(
      *,
      account_holder : Stripe::AccountholderParams? = nil,
      permissions : Array(String)? = nil,
      expand : Array(String)? = nil,
      filters : Stripe::FiltersParams? = nil,
      return_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_financial_connections_sessions(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url).execute(&block)
    end

    POST_FINANCIAL_CONNECTIONS_SESSIONS_VALID_VALUES_FOR_PERMISSIONS = String.static_array("balances", "ownership", "payment_method", "transactions")
    POST_FINANCIAL_CONNECTIONS_SESSIONS_MAX_LENGTH_FOR_RETURN_URL    = 5000

    # @return Crest::Request
    def build_api_request_for_post_financial_connections_sessions(
      *,
      account_holder : Stripe::AccountholderParams? = nil,
      permissions : Array(String)? = nil,
      expand : Array(String)? = nil,
      filters : Stripe::FiltersParams? = nil,
      return_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FinancialConnectionsApi.post_financial_connections_sessions ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_holder\" is required and cannot be null") if account_holder.nil?
        unless (_account_holder = account_holder).nil?
          _account_holder.validate if _account_holder.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"permissions\" is required and cannot be null") if permissions.nil?
        unless (_permissions = permissions).nil?
          OpenApi::EnumValidator.validate("permissions", _permissions, POST_FINANCIAL_CONNECTIONS_SESSIONS_VALID_VALUES_FOR_PERMISSIONS)
        end

        unless (_filters = filters).nil?
          _filters.validate if _filters.is_a?(OpenApi::Validatable)
        end
        unless (_return_url = return_url).nil?
          OpenApi::PrimitiveValidator.validate_max_length("return_url", return_url.to_s.size, POST_FINANCIAL_CONNECTIONS_SESSIONS_MAX_LENGTH_FOR_RETURN_URL)
        end
      end

      # resource path
      local_var_path = "/v1/financial_connections/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder"] = account_holder.to_s if !account_holder.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["filters"] = filters.to_s if !filters.nil?
      form_params["permissions"] = @api_client.build_collection_param(permissions, "csv") if !permissions.nil? && !permissions.empty?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FinancialConnectionsApi.post_financial_connections_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
