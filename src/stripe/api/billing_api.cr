#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/aggregation_settings_param"
require "../models/billing_meter"
require "../models/billing_meter_event"
require "../models/billing_meter_event_adjustment"
require "../models/billing_meter_resource_billing_meter_event_summary_list"
require "../models/billing_meter_resource_billing_meter_list"
require "../models/customer_mapping_param"
require "../models/error"
require "../models/event_adjustment_cancel_settings_param"

require "../models/meter_value_settings_param"

module Stripe
  class BillingApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieve a list of billing meters.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Filter results to only include meters with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingMeterResourceBillingMeterList]
    def get_billing_meters(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::BillingMeterResourceBillingMeterList
      data, _status_code, _headers = get_billing_meters_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a list of billing meters.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Filter results to only include meters with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingMeterResourceBillingMeterList, Integer, Hash)] Stripe::BillingMeterResourceBillingMeterList, response status code and response headers
    def get_billing_meters_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::BillingMeterResourceBillingMeterList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_billing_meters(ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#get_billing_meters\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeterResourceBillingMeterList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve a list of billing meters.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param status [String?] Filter results to only include meters with the given status.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_billing_meters(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_billing_meters(ending_before: ending_before, starting_after: starting_after, limit: limit, status: status, expand: expand).execute(&block)
    end

    GET_BILLING_METERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_BILLING_METERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_BILLING_METERS_VALID_VALUES_FOR_STATUS       = String.static_array("active", "inactive")

    # @return Crest::Request
    def build_api_request_for_get_billing_meters(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.get_billing_meters ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_BILLING_METERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_BILLING_METERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_BILLING_METERS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meters"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BillingApi.get_billing_meters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a billing meter given an ID</p>
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingMeter]
    def get_billing_meters_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::BillingMeter
      data, _status_code, _headers = get_billing_meters_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a billing meter given an ID&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingMeter, Integer, Hash)] Stripe::BillingMeter, response status code and response headers
    def get_billing_meters_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::BillingMeter, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_billing_meters_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#get_billing_meters_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeter.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a billing meter given an ID&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_billing_meters_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_billing_meters_id(id: id, expand: expand).execute(&block)
    end

    GET_BILLING_METERS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_billing_meters_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.get_billing_meters_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_BILLING_METERS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meters/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BillingApi.get_billing_meters_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a list of billing meter event summaries.</p>
    # @required @param customer [String?] The customer for which to fetch event summaries.
    # @required @param start_time [Int32?] The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.
    # @required @param end_time [Int32?] The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param value_grouping_window [String?] Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, ..., 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingMeterResourceBillingMeterEventSummaryList]
    def get_billing_meters_id_event_summaries(
      *,
      customer : String? = nil,
      start_time : Int64? = nil,
      end_time : Int64? = nil,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value_grouping_window : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::BillingMeterResourceBillingMeterEventSummaryList
      data, _status_code, _headers = get_billing_meters_id_event_summaries_with_http_info(customer: customer, start_time: start_time, end_time: end_time, id: id, ending_before: ending_before, starting_after: starting_after, limit: limit, value_grouping_window: value_grouping_window, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a list of billing meter event summaries.&lt;/p&gt;
    # @required @param customer [String?] The customer for which to fetch event summaries.
    # @required @param start_time [Int32?] The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.
    # @required @param end_time [Int32?] The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param value_grouping_window [String?] Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, ..., 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingMeterResourceBillingMeterEventSummaryList, Integer, Hash)] Stripe::BillingMeterResourceBillingMeterEventSummaryList, response status code and response headers
    def get_billing_meters_id_event_summaries_with_http_info(
      *,
      customer : String? = nil,
      start_time : Int64? = nil,
      end_time : Int64? = nil,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value_grouping_window : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::BillingMeterResourceBillingMeterEventSummaryList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_billing_meters_id_event_summaries(customer: customer, start_time: start_time, end_time: end_time, id: id, ending_before: ending_before, starting_after: starting_after, limit: limit, value_grouping_window: value_grouping_window, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#get_billing_meters_id_event_summaries\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeterResourceBillingMeterEventSummaryList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve a list of billing meter event summaries.&lt;/p&gt;
    # @required @param customer [String?] The customer for which to fetch event summaries.
    # @required @param start_time [Int32?] The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.
    # @required @param end_time [Int32?] The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param value_grouping_window [String?] Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, ..., 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_billing_meters_id_event_summaries(
      *,
      customer : String? = nil,
      start_time : Int64? = nil,
      end_time : Int64? = nil,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value_grouping_window : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_billing_meters_id_event_summaries(customer: customer, start_time: start_time, end_time: end_time, id: id, ending_before: ending_before, starting_after: starting_after, limit: limit, value_grouping_window: value_grouping_window, expand: expand).execute(&block)
    end

    GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_CUSTOMER                = 5000
    GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_ID                      = 5000
    GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_ENDING_BEFORE           = 5000
    GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_STARTING_AFTER          = 5000
    GET_BILLING_METERS_ID_EVENT_SUMMARIES_VALID_VALUES_FOR_VALUE_GROUPING_WINDOW = String.static_array("day", "hour")

    # @return Crest::Request
    def build_api_request_for_get_billing_meters_id_event_summaries(
      *,
      customer : String? = nil,
      start_time : Int64? = nil,
      end_time : Int64? = nil,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value_grouping_window : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.get_billing_meters_id_event_summaries ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"customer\" is required and cannot be null") if customer.nil?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_CUSTOMER)
        end
        raise ArgumentError.new("\"start_time\" is required and cannot be null") if start_time.nil?

        raise ArgumentError.new("\"end_time\" is required and cannot be null") if end_time.nil?

        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_ID)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_BILLING_METERS_ID_EVENT_SUMMARIES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_value_grouping_window = value_grouping_window).nil?
          OpenApi::EnumValidator.validate("value_grouping_window", _value_grouping_window, GET_BILLING_METERS_ID_EVENT_SUMMARIES_VALID_VALUES_FOR_VALUE_GROUPING_WINDOW)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meters/{id}/event_summaries".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["value_grouping_window"] = value_grouping_window.to_s if !value_grouping_window.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["start_time"] = start_time.to_s if !start_time.nil?
      query_params["end_time"] = end_time.to_s if !end_time.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BillingApi.get_billing_meters_id_event_summaries",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a billing meter event adjustment</p>
    # @required @param event_name [String?] The name of the meter event. Corresponds with the `event_name` field on a meter.
    # @required @param _type [String?] Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
    # @optional @param cancel [Stripe::EventAdjustmentCancelSettingsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingMeterEventAdjustment]
    def post_billing_meter_event_adjustments(
      *,
      event_name : String? = nil,
      _type : String? = nil,
      cancel : Stripe::EventAdjustmentCancelSettingsParam? = nil,
      expand : Array(String)? = nil
    ) : Stripe::BillingMeterEventAdjustment
      data, _status_code, _headers = post_billing_meter_event_adjustments_with_http_info(event_name: event_name, _type: _type, cancel: cancel, expand: expand)
      data
    end

    # &lt;p&gt;Creates a billing meter event adjustment&lt;/p&gt;
    # @required @param event_name [String?] The name of the meter event. Corresponds with the `event_name` field on a meter.
    # @required @param _type [String?] Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
    # @optional @param cancel [Stripe::EventAdjustmentCancelSettingsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingMeterEventAdjustment, Integer, Hash)] Stripe::BillingMeterEventAdjustment, response status code and response headers
    def post_billing_meter_event_adjustments_with_http_info(
      *,
      event_name : String? = nil,
      _type : String? = nil,
      cancel : Stripe::EventAdjustmentCancelSettingsParam? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::BillingMeterEventAdjustment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_meter_event_adjustments(event_name: event_name, _type: _type, cancel: cancel, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#post_billing_meter_event_adjustments\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeterEventAdjustment.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a billing meter event adjustment&lt;/p&gt;
    # @required @param event_name [String?] The name of the meter event. Corresponds with the `event_name` field on a meter.
    # @required @param _type [String?] Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
    # @optional @param cancel [Stripe::EventAdjustmentCancelSettingsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_billing_meter_event_adjustments(
      *,
      event_name : String? = nil,
      _type : String? = nil,
      cancel : Stripe::EventAdjustmentCancelSettingsParam? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_meter_event_adjustments(event_name: event_name, _type: _type, cancel: cancel, expand: expand).execute(&block)
    end

    POST_BILLING_METER_EVENT_ADJUSTMENTS_MAX_LENGTH_FOR_EVENT_NAME = 100
    POST_BILLING_METER_EVENT_ADJUSTMENTS_VALID_VALUES_FOR__TYPE    = String.static_array("cancel")

    # @return Crest::Request
    def build_api_request_for_post_billing_meter_event_adjustments(
      *,
      event_name : String? = nil,
      _type : String? = nil,
      cancel : Stripe::EventAdjustmentCancelSettingsParam? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.post_billing_meter_event_adjustments ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"event_name\" is required and cannot be null") if event_name.nil?
        unless (_event_name = event_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("event_name", event_name.to_s.size, POST_BILLING_METER_EVENT_ADJUSTMENTS_MAX_LENGTH_FOR_EVENT_NAME)
        end
        raise ArgumentError.new("\"_type\" is required and cannot be null") if _type.nil?
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_BILLING_METER_EVENT_ADJUSTMENTS_VALID_VALUES_FOR__TYPE)
        end
        unless (_cancel = cancel).nil?
          _cancel.validate if _cancel.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meter_event_adjustments"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cancel.to_json), "cancel")) if !cancel.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("event_name", event_name.to_s) if !event_name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingApi.post_billing_meter_event_adjustments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a billing meter event</p>
    # @required @param event_name [String?] The name of the meter event. Corresponds with the `event_name` field on a meter.
    # @required @param payload [Hash(String, String)?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param identifier [String?] A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We'll enforce uniqueness within a rolling 24 hour period.
    # @optional @param timestamp [Int32?] The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.
    # @return [Stripe::BillingMeterEvent]
    def post_billing_meter_events(
      *,
      event_name : String? = nil,
      payload : Hash(String, String)? = nil,
      expand : Array(String)? = nil,
      identifier : String? = nil,
      timestamp : Int64? = nil
    ) : Stripe::BillingMeterEvent
      data, _status_code, _headers = post_billing_meter_events_with_http_info(event_name: event_name, payload: payload, expand: expand, identifier: identifier, timestamp: timestamp)
      data
    end

    # &lt;p&gt;Creates a billing meter event&lt;/p&gt;
    # @required @param event_name [String?] The name of the meter event. Corresponds with the `event_name` field on a meter.
    # @required @param payload [Hash(String, String)?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param identifier [String?] A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We'll enforce uniqueness within a rolling 24 hour period.
    # @optional @param timestamp [Int32?] The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.
    # @return [Tuple(Stripe::BillingMeterEvent, Integer, Hash)] Stripe::BillingMeterEvent, response status code and response headers
    def post_billing_meter_events_with_http_info(
      *,
      event_name : String? = nil,
      payload : Hash(String, String)? = nil,
      expand : Array(String)? = nil,
      identifier : String? = nil,
      timestamp : Int64? = nil
    ) : Tuple(Stripe::BillingMeterEvent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_meter_events(event_name: event_name, payload: payload, expand: expand, identifier: identifier, timestamp: timestamp)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#post_billing_meter_events\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeterEvent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a billing meter event&lt;/p&gt;
    # @required @param event_name [String?] The name of the meter event. Corresponds with the `event_name` field on a meter.
    # @required @param payload [Hash(String, String)?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param identifier [String?] A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We'll enforce uniqueness within a rolling 24 hour period.
    # @optional @param timestamp [Int32?] The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.
    # @return nil
    def post_billing_meter_events(
      *,
      event_name : String? = nil,
      payload : Hash(String, String)? = nil,
      expand : Array(String)? = nil,
      identifier : String? = nil,
      timestamp : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_meter_events(event_name: event_name, payload: payload, expand: expand, identifier: identifier, timestamp: timestamp).execute(&block)
    end

    POST_BILLING_METER_EVENTS_MAX_LENGTH_FOR_EVENT_NAME = 100
    POST_BILLING_METER_EVENTS_MAX_LENGTH_FOR_IDENTIFIER = 100

    # @return Crest::Request
    def build_api_request_for_post_billing_meter_events(
      *,
      event_name : String? = nil,
      payload : Hash(String, String)? = nil,
      expand : Array(String)? = nil,
      identifier : String? = nil,
      timestamp : Int64? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.post_billing_meter_events ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"event_name\" is required and cannot be null") if event_name.nil?
        unless (_event_name = event_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("event_name", event_name.to_s.size, POST_BILLING_METER_EVENTS_MAX_LENGTH_FOR_EVENT_NAME)
        end
        raise ArgumentError.new("\"payload\" is required and cannot be null") if payload.nil?

        unless (_identifier = identifier).nil?
          OpenApi::PrimitiveValidator.validate_max_length("identifier", identifier.to_s.size, POST_BILLING_METER_EVENTS_MAX_LENGTH_FOR_IDENTIFIER)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meter_events"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("event_name", event_name.to_s) if !event_name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("identifier", identifier.to_s) if !identifier.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payload.to_json), "payload")) if !payload.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("timestamp", timestamp.to_s) if !timestamp.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingApi.post_billing_meter_events",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a billing meter</p>
    # @required @param default_aggregation [Stripe::AggregationSettingsParam?]
    # @required @param display_name [String?] The meter's name.
    # @required @param event_name [String?] The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
    # @optional @param customer_mapping [Stripe::CustomerMappingParam?]
    # @optional @param event_time_window [String?] The time window to pre-aggregate meter events for, if any.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param value_settings [Stripe::MeterValueSettingsParam?]
    # @return [Stripe::BillingMeter]
    def post_billing_meters(
      *,
      default_aggregation : Stripe::AggregationSettingsParam? = nil,
      display_name : String? = nil,
      event_name : String? = nil,
      customer_mapping : Stripe::CustomerMappingParam? = nil,
      event_time_window : String? = nil,
      expand : Array(String)? = nil,
      value_settings : Stripe::MeterValueSettingsParam? = nil
    ) : Stripe::BillingMeter
      data, _status_code, _headers = post_billing_meters_with_http_info(default_aggregation: default_aggregation, display_name: display_name, event_name: event_name, customer_mapping: customer_mapping, event_time_window: event_time_window, expand: expand, value_settings: value_settings)
      data
    end

    # &lt;p&gt;Creates a billing meter&lt;/p&gt;
    # @required @param default_aggregation [Stripe::AggregationSettingsParam?]
    # @required @param display_name [String?] The meter's name.
    # @required @param event_name [String?] The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
    # @optional @param customer_mapping [Stripe::CustomerMappingParam?]
    # @optional @param event_time_window [String?] The time window to pre-aggregate meter events for, if any.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param value_settings [Stripe::MeterValueSettingsParam?]
    # @return [Tuple(Stripe::BillingMeter, Integer, Hash)] Stripe::BillingMeter, response status code and response headers
    def post_billing_meters_with_http_info(
      *,
      default_aggregation : Stripe::AggregationSettingsParam? = nil,
      display_name : String? = nil,
      event_name : String? = nil,
      customer_mapping : Stripe::CustomerMappingParam? = nil,
      event_time_window : String? = nil,
      expand : Array(String)? = nil,
      value_settings : Stripe::MeterValueSettingsParam? = nil
    ) : Tuple(Stripe::BillingMeter, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_meters(default_aggregation: default_aggregation, display_name: display_name, event_name: event_name, customer_mapping: customer_mapping, event_time_window: event_time_window, expand: expand, value_settings: value_settings)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#post_billing_meters\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeter.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a billing meter&lt;/p&gt;
    # @required @param default_aggregation [Stripe::AggregationSettingsParam?]
    # @required @param display_name [String?] The meter's name.
    # @required @param event_name [String?] The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
    # @optional @param customer_mapping [Stripe::CustomerMappingParam?]
    # @optional @param event_time_window [String?] The time window to pre-aggregate meter events for, if any.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param value_settings [Stripe::MeterValueSettingsParam?]
    # @return nil
    def post_billing_meters(
      *,
      default_aggregation : Stripe::AggregationSettingsParam? = nil,
      display_name : String? = nil,
      event_name : String? = nil,
      customer_mapping : Stripe::CustomerMappingParam? = nil,
      event_time_window : String? = nil,
      expand : Array(String)? = nil,
      value_settings : Stripe::MeterValueSettingsParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_meters(default_aggregation: default_aggregation, display_name: display_name, event_name: event_name, customer_mapping: customer_mapping, event_time_window: event_time_window, expand: expand, value_settings: value_settings).execute(&block)
    end

    POST_BILLING_METERS_MAX_LENGTH_FOR_DISPLAY_NAME        = 250
    POST_BILLING_METERS_MAX_LENGTH_FOR_EVENT_NAME          = 100
    POST_BILLING_METERS_VALID_VALUES_FOR_EVENT_TIME_WINDOW = String.static_array("day", "hour")

    # @return Crest::Request
    def build_api_request_for_post_billing_meters(
      *,
      default_aggregation : Stripe::AggregationSettingsParam? = nil,
      display_name : String? = nil,
      event_name : String? = nil,
      customer_mapping : Stripe::CustomerMappingParam? = nil,
      event_time_window : String? = nil,
      expand : Array(String)? = nil,
      value_settings : Stripe::MeterValueSettingsParam? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.post_billing_meters ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"default_aggregation\" is required and cannot be null") if default_aggregation.nil?
        unless (_default_aggregation = default_aggregation).nil?
          _default_aggregation.validate if _default_aggregation.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"display_name\" is required and cannot be null") if display_name.nil?
        unless (_display_name = display_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("display_name", display_name.to_s.size, POST_BILLING_METERS_MAX_LENGTH_FOR_DISPLAY_NAME)
        end
        raise ArgumentError.new("\"event_name\" is required and cannot be null") if event_name.nil?
        unless (_event_name = event_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("event_name", event_name.to_s.size, POST_BILLING_METERS_MAX_LENGTH_FOR_EVENT_NAME)
        end
        unless (_customer_mapping = customer_mapping).nil?
          _customer_mapping.validate if _customer_mapping.is_a?(OpenApi::Validatable)
        end
        unless (_event_time_window = event_time_window).nil?
          OpenApi::EnumValidator.validate("event_time_window", _event_time_window, POST_BILLING_METERS_VALID_VALUES_FOR_EVENT_TIME_WINDOW)
        end

        unless (_value_settings = value_settings).nil?
          _value_settings.validate if _value_settings.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meters"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(customer_mapping.to_json), "customer_mapping")) if !customer_mapping.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_aggregation.to_json), "default_aggregation")) if !default_aggregation.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("display_name", display_name.to_s) if !display_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("event_name", event_name.to_s) if !event_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("event_time_window", event_time_window.to_s) if !event_time_window.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(value_settings.to_json), "value_settings")) if !value_settings.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingApi.post_billing_meters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a billing meter</p>
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param display_name [String?] The meter's name.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingMeter]
    def post_billing_meters_id(
      *,
      id : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::BillingMeter
      data, _status_code, _headers = post_billing_meters_id_with_http_info(id: id, display_name: display_name, expand: expand)
      data
    end

    # &lt;p&gt;Updates a billing meter&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param display_name [String?] The meter's name.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingMeter, Integer, Hash)] Stripe::BillingMeter, response status code and response headers
    def post_billing_meters_id_with_http_info(
      *,
      id : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::BillingMeter, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_meters_id(id: id, display_name: display_name, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#post_billing_meters_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeter.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a billing meter&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param display_name [String?] The meter's name.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_billing_meters_id(
      *,
      id : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_meters_id(id: id, display_name: display_name, expand: expand).execute(&block)
    end

    POST_BILLING_METERS_ID_MAX_LENGTH_FOR_ID           = 5000
    POST_BILLING_METERS_ID_MAX_LENGTH_FOR_DISPLAY_NAME =  250

    # @return Crest::Request
    def build_api_request_for_post_billing_meters_id(
      *,
      id : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.post_billing_meters_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_BILLING_METERS_ID_MAX_LENGTH_FOR_ID)
        end
        unless (_display_name = display_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("display_name", display_name.to_s.size, POST_BILLING_METERS_ID_MAX_LENGTH_FOR_DISPLAY_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meters/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("display_name", display_name.to_s) if !display_name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingApi.post_billing_meters_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deactivates a billing meter</p>
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingMeter]
    def post_billing_meters_id_deactivate(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::BillingMeter
      data, _status_code, _headers = post_billing_meters_id_deactivate_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Deactivates a billing meter&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingMeter, Integer, Hash)] Stripe::BillingMeter, response status code and response headers
    def post_billing_meters_id_deactivate_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::BillingMeter, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_meters_id_deactivate(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#post_billing_meters_id_deactivate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeter.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deactivates a billing meter&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_billing_meters_id_deactivate(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_meters_id_deactivate(id: id, expand: expand).execute(&block)
    end

    POST_BILLING_METERS_ID_DEACTIVATE_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_billing_meters_id_deactivate(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.post_billing_meters_id_deactivate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_BILLING_METERS_ID_DEACTIVATE_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meters/{id}/deactivate".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingApi.post_billing_meters_id_deactivate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reactivates a billing meter</p>
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingMeter]
    def post_billing_meters_id_reactivate(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::BillingMeter
      data, _status_code, _headers = post_billing_meters_id_reactivate_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Reactivates a billing meter&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingMeter, Integer, Hash)] Stripe::BillingMeter, response status code and response headers
    def post_billing_meters_id_reactivate_with_http_info(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::BillingMeter, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_meters_id_reactivate(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BillingApi#post_billing_meters_id_reactivate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingMeter.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Reactivates a billing meter&lt;/p&gt;
    # @required @param id [String?] Unique identifier for the object.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_billing_meters_id_reactivate(
      *,
      id : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_meters_id_reactivate(id: id, expand: expand).execute(&block)
    end

    POST_BILLING_METERS_ID_REACTIVATE_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_billing_meters_id_reactivate(
      *,
      id : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BillingApi.post_billing_meters_id_reactivate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_BILLING_METERS_ID_REACTIVATE_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/billing/meters/{id}/reactivate".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingApi.post_billing_meters_id_reactivate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
