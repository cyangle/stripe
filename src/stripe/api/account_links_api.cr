#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class AccountLinksApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
    # @required @param account [String?] The identifier of the account to create an account link for.
    # @required @param _type [String?] The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    # @optional @param collect [String?] Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param refresh_url [String?] The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
    # @optional @param return_url [String?] The URL that the user will be redirected to upon leaving or completing the linked flow.
    # @return [Stripe::AccountLink]
    def post_account_links(*, account : String? = nil, _type : String? = nil, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil) : Stripe::AccountLink
      data, _status_code, _headers = post_account_links_with_http_info(account: account, _type: _type, collect: collect, expand: expand, refresh_url: refresh_url, return_url: return_url)
      data
    end

    # &lt;p&gt;Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.&lt;/p&gt;
    # @required @param account [String?] The identifier of the account to create an account link for.
    # @required @param _type [String?] The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    # @optional @param collect [String?] Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param refresh_url [String?] The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
    # @optional @param return_url [String?] The URL that the user will be redirected to upon leaving or completing the linked flow.
    # @return [Tuple(Stripe::AccountLink, Integer, Hash)] Stripe::AccountLink, response status code and response headers
    def post_account_links_with_http_info(*, account : String? = nil, _type : String? = nil, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil) : Tuple(Stripe::AccountLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_account_links(account: account, _type: _type, collect: collect, expand: expand, refresh_url: refresh_url, return_url: return_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountLinksApi#post_account_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::AccountLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.&lt;/p&gt;
    # @required @param account [String?] The identifier of the account to create an account link for.
    # @required @param _type [String?] The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    # @optional @param collect [String?] Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param refresh_url [String?] The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
    # @optional @param return_url [String?] The URL that the user will be redirected to upon leaving or completing the linked flow.
    # @return nil
    def post_account_links(*, account : String? = nil, _type : String? = nil, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil, &block : Crest::Response ->) : Nil
      build_api_request_for_post_account_links(account: account, _type: _type, collect: collect, expand: expand, refresh_url: refresh_url, return_url: return_url).execute(&block)
    end

    POST_ACCOUNT_LINKS_MAX_LENGTH_FOR_ACCOUNT   = 5000
    POST_ACCOUNT_LINKS_VALID_VALUES_FOR__TYPE   = String.static_array("account_onboarding", "account_update")
    POST_ACCOUNT_LINKS_VALID_VALUES_FOR_COLLECT = String.static_array("currently_due", "eventually_due")

    # @return Crest::Request
    def build_api_request_for_post_account_links(*, account : String? = nil, _type : String? = nil, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountLinksApi.post_account_links ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNT_LINKS_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"_type\" is required and cannot be null") if _type.nil?
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_ACCOUNT_LINKS_VALID_VALUES_FOR__TYPE)
        end
        unless (_collect = collect).nil?
          OpenApi::EnumValidator.validate("collect", _collect, POST_ACCOUNT_LINKS_VALID_VALUES_FOR_COLLECT)
        end
      end

      # resource path
      local_var_path = "/v1/account_links"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["collect"] = collect.to_s if !collect.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["refresh_url"] = refresh_url.to_s if !refresh_url.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountLinksApi.post_account_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
