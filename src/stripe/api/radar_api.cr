#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class RadarApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
    # @required @param item [String?]
    # @return [Stripe::DeletedRadarValueListItem]
    def delete_radar_value_list_items_item(
      *,
      item : String? = nil
    ) : Stripe::DeletedRadarValueListItem
      data, _status_code, _headers = delete_radar_value_list_items_item_with_http_info(item: item)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueListItem&lt;/code&gt; object, removing it from its parent value list.&lt;/p&gt;
    # @required @param item [String?]
    # @return [Tuple(Stripe::DeletedRadarValueListItem, Integer, Hash)] Stripe::DeletedRadarValueListItem, response status code and response headers
    def delete_radar_value_list_items_item_with_http_info(
      *,
      item : String? = nil
    ) : Tuple(Stripe::DeletedRadarValueListItem, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_radar_value_list_items_item(item: item)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#delete_radar_value_list_items_item\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedRadarValueListItem.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueListItem&lt;/code&gt; object, removing it from its parent value list.&lt;/p&gt;
    # @required @param item [String?]
    # @return nil
    def delete_radar_value_list_items_item(
      *,
      item : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_radar_value_list_items_item(item: item).execute(&block)
    end

    DELETE_RADAR_VALUE_LIST_ITEMS_ITEM_MAX_LENGTH_FOR_ITEM = 5000

    # @return Crest::Request
    def build_api_request_for_delete_radar_value_list_items_item(
      *,
      item : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.delete_radar_value_list_items_item ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"item\" is required and cannot be null") if item.nil?
        unless (_item = item).nil?
          OpenApi::PrimitiveValidator.validate_max_length("item", item.to_s.size, DELETE_RADAR_VALUE_LIST_ITEMS_ITEM_MAX_LENGTH_FOR_ITEM)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "RadarApi.delete_radar_value_list_items_item",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
    # @required @param value_list [String?]
    # @return [Stripe::DeletedRadarValueList]
    def delete_radar_value_lists_value_list(
      *,
      value_list : String? = nil
    ) : Stripe::DeletedRadarValueList
      data, _status_code, _headers = delete_radar_value_lists_value_list_with_http_info(value_list: value_list)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueList&lt;/code&gt; object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.&lt;/p&gt;
    # @required @param value_list [String?]
    # @return [Tuple(Stripe::DeletedRadarValueList, Integer, Hash)] Stripe::DeletedRadarValueList, response status code and response headers
    def delete_radar_value_lists_value_list_with_http_info(
      *,
      value_list : String? = nil
    ) : Tuple(Stripe::DeletedRadarValueList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_radar_value_lists_value_list(value_list: value_list)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#delete_radar_value_lists_value_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedRadarValueList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueList&lt;/code&gt; object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.&lt;/p&gt;
    # @required @param value_list [String?]
    # @return nil
    def delete_radar_value_lists_value_list(
      *,
      value_list : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_radar_value_lists_value_list(value_list: value_list).execute(&block)
    end

    DELETE_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_VALUE_LIST = 5000

    # @return Crest::Request
    def build_api_request_for_delete_radar_value_lists_value_list(
      *,
      value_list : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.delete_radar_value_lists_value_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"value_list\" is required and cannot be null") if value_list.nil?
        unless (_value_list = value_list).nil?
          OpenApi::PrimitiveValidator.validate_max_length("value_list", value_list.to_s.size, DELETE_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_VALUE_LIST)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_lists/{value_list}".sub("{" + "value_list" + "}", URI.encode_path(value_list.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "RadarApi.delete_radar_value_lists_value_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of early fraud warnings.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param charge [String?] Only return early fraud warnings for the charge specified by this charge ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::RadarEarlyFraudWarningList]
    def get_radar_early_fraud_warnings(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::RadarEarlyFraudWarningList
      data, _status_code, _headers = get_radar_early_fraud_warnings_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of early fraud warnings.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param charge [String?] Only return early fraud warnings for the charge specified by this charge ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::RadarEarlyFraudWarningList, Integer, Hash)] Stripe::RadarEarlyFraudWarningList, response status code and response headers
    def get_radar_early_fraud_warnings_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::RadarEarlyFraudWarningList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_radar_early_fraud_warnings(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#get_radar_early_fraud_warnings\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarEarlyFraudWarningList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of early fraud warnings.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.
    # @optional @param charge [String?] Only return early fraud warnings for the charge specified by this charge ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_radar_early_fraud_warnings(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_radar_early_fraud_warnings(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, expand: expand).execute(&block)
    end

    GET_RADAR_EARLY_FRAUD_WARNINGS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_RADAR_EARLY_FRAUD_WARNINGS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_RADAR_EARLY_FRAUD_WARNINGS_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_get_radar_early_fraud_warnings(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.get_radar_early_fraud_warnings ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_RADAR_EARLY_FRAUD_WARNINGS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_RADAR_EARLY_FRAUD_WARNINGS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_RADAR_EARLY_FRAUD_WARNINGS_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end
      end

      # resource path
      local_var_path = "/v1/radar/early_fraud_warnings"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RadarApi.get_radar_early_fraud_warnings",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an early fraud warning that has previously been created. </p>  <p>Please refer to the <a href=\"#early_fraud_warning_object\">early fraud warning</a> object reference for more details.</p>
    # @required @param early_fraud_warning [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::RadarEarlyFraudWarning]
    def get_radar_early_fraud_warnings_early_fraud_warning(
      *,
      early_fraud_warning : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::RadarEarlyFraudWarning
      data, _status_code, _headers = get_radar_early_fraud_warnings_early_fraud_warning_with_http_info(early_fraud_warning: early_fraud_warning, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an early fraud warning that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#early_fraud_warning_object\&quot;&gt;early fraud warning&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param early_fraud_warning [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::RadarEarlyFraudWarning, Integer, Hash)] Stripe::RadarEarlyFraudWarning, response status code and response headers
    def get_radar_early_fraud_warnings_early_fraud_warning_with_http_info(
      *,
      early_fraud_warning : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::RadarEarlyFraudWarning, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_radar_early_fraud_warnings_early_fraud_warning(early_fraud_warning: early_fraud_warning, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#get_radar_early_fraud_warnings_early_fraud_warning\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarEarlyFraudWarning.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an early fraud warning that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#early_fraud_warning_object\&quot;&gt;early fraud warning&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param early_fraud_warning [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_radar_early_fraud_warnings_early_fraud_warning(
      *,
      early_fraud_warning : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_radar_early_fraud_warnings_early_fraud_warning(early_fraud_warning: early_fraud_warning, expand: expand).execute(&block)
    end

    GET_RADAR_EARLY_FRAUD_WARNINGS_EARLY_FRAUD_WARNING_MAX_LENGTH_FOR_EARLY_FRAUD_WARNING = 5000

    # @return Crest::Request
    def build_api_request_for_get_radar_early_fraud_warnings_early_fraud_warning(
      *,
      early_fraud_warning : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.get_radar_early_fraud_warnings_early_fraud_warning ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"early_fraud_warning\" is required and cannot be null") if early_fraud_warning.nil?
        unless (_early_fraud_warning = early_fraud_warning).nil?
          OpenApi::PrimitiveValidator.validate_max_length("early_fraud_warning", early_fraud_warning.to_s.size, GET_RADAR_EARLY_FRAUD_WARNINGS_EARLY_FRAUD_WARNING_MAX_LENGTH_FOR_EARLY_FRAUD_WARNING)
        end
      end

      # resource path
      local_var_path = "/v1/radar/early_fraud_warnings/{early_fraud_warning}".sub("{" + "early_fraud_warning" + "}", URI.encode_path(early_fraud_warning.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RadarApi.get_radar_early_fraud_warnings_early_fraud_warning",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @required @param value_list [String?] Identifier for the parent value list this item belongs to.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param value [String?] Return items belonging to the parent list whose value matches the specified value (using an \"is like\" match).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::RadarListListItemList]
    def get_radar_value_list_items(
      *,
      value_list : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::RadarListListItemList
      data, _status_code, _headers = get_radar_value_list_items_with_http_info(value_list: value_list, ending_before: ending_before, starting_after: starting_after, limit: limit, value: value, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueListItem&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @required @param value_list [String?] Identifier for the parent value list this item belongs to.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param value [String?] Return items belonging to the parent list whose value matches the specified value (using an \"is like\" match).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::RadarListListItemList, Integer, Hash)] Stripe::RadarListListItemList, response status code and response headers
    def get_radar_value_list_items_with_http_info(
      *,
      value_list : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::RadarListListItemList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_radar_value_list_items(value_list: value_list, ending_before: ending_before, starting_after: starting_after, limit: limit, value: value, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#get_radar_value_list_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarListListItemList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueListItem&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @required @param value_list [String?] Identifier for the parent value list this item belongs to.
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param value [String?] Return items belonging to the parent list whose value matches the specified value (using an \"is like\" match).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_radar_value_list_items(
      *,
      value_list : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_radar_value_list_items(value_list: value_list, ending_before: ending_before, starting_after: starting_after, limit: limit, value: value, expand: expand, created: created).execute(&block)
    end

    GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE_LIST     = 5000
    GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE          =  800

    # @return Crest::Request
    def build_api_request_for_get_radar_value_list_items(
      *,
      value_list : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      value : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.get_radar_value_list_items ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"value_list\" is required and cannot be null") if value_list.nil?
        unless (_value_list = value_list).nil?
          OpenApi::PrimitiveValidator.validate_max_length("value_list", value_list.to_s.size, GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE_LIST)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_value = value).nil?
          OpenApi::PrimitiveValidator.validate_max_length("value", value.to_s.size, GET_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["value_list"] = value_list.to_s if !value_list.nil?
      query_params["value"] = value.to_s if !value.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RadarApi.get_radar_value_list_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>ValueListItem</code> object.</p>
    # @required @param item [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::RadarValueListItem]
    def get_radar_value_list_items_item(
      *,
      item : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::RadarValueListItem
      data, _status_code, _headers = get_radar_value_list_items_item_with_http_info(item: item, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueListItem&lt;/code&gt; object.&lt;/p&gt;
    # @required @param item [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::RadarValueListItem, Integer, Hash)] Stripe::RadarValueListItem, response status code and response headers
    def get_radar_value_list_items_item_with_http_info(
      *,
      item : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::RadarValueListItem, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_radar_value_list_items_item(item: item, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#get_radar_value_list_items_item\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarValueListItem.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueListItem&lt;/code&gt; object.&lt;/p&gt;
    # @required @param item [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_radar_value_list_items_item(
      *,
      item : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_radar_value_list_items_item(item: item, expand: expand).execute(&block)
    end

    GET_RADAR_VALUE_LIST_ITEMS_ITEM_MAX_LENGTH_FOR_ITEM = 5000

    # @return Crest::Request
    def build_api_request_for_get_radar_value_list_items_item(
      *,
      item : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.get_radar_value_list_items_item ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"item\" is required and cannot be null") if item.nil?
        unless (_item = item).nil?
          OpenApi::PrimitiveValidator.validate_max_length("item", item.to_s.size, GET_RADAR_VALUE_LIST_ITEMS_ITEM_MAX_LENGTH_FOR_ITEM)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RadarApi.get_radar_value_list_items_item",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param contains [String?] A value contained within a value list - returns all value lists containing this value.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param _alias [String?] The alias used to reference the value list when writing rules.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::RadarListListList]
    def get_radar_value_lists(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      contains : String? = nil,
      expand : Array(Array(String))? = nil,
      _alias : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::RadarListListList
      data, _status_code, _headers = get_radar_value_lists_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, contains: contains, expand: expand, _alias: _alias, created: created)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueList&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param contains [String?] A value contained within a value list - returns all value lists containing this value.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param _alias [String?] The alias used to reference the value list when writing rules.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::RadarListListList, Integer, Hash)] Stripe::RadarListListList, response status code and response headers
    def get_radar_value_lists_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      contains : String? = nil,
      expand : Array(Array(String))? = nil,
      _alias : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::RadarListListList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_radar_value_lists(ending_before: ending_before, starting_after: starting_after, limit: limit, contains: contains, expand: expand, _alias: _alias, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#get_radar_value_lists\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarListListList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueList&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param contains [String?] A value contained within a value list - returns all value lists containing this value.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param _alias [String?] The alias used to reference the value list when writing rules.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_radar_value_lists(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      contains : String? = nil,
      expand : Array(Array(String))? = nil,
      _alias : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_radar_value_lists(ending_before: ending_before, starting_after: starting_after, limit: limit, contains: contains, expand: expand, _alias: _alias, created: created).execute(&block)
    end

    GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_CONTAINS       =  800
    GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR__ALIAS         =  100

    # @return Crest::Request
    def build_api_request_for_get_radar_value_lists(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      contains : String? = nil,
      expand : Array(Array(String))? = nil,
      _alias : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.get_radar_value_lists ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_contains = contains).nil?
          OpenApi::PrimitiveValidator.validate_max_length("contains", contains.to_s.size, GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_CONTAINS)
        end

        unless (__alias = _alias).nil?
          OpenApi::PrimitiveValidator.validate_max_length("_alias", _alias.to_s.size, GET_RADAR_VALUE_LISTS_MAX_LENGTH_FOR__ALIAS)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_lists"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["contains"] = contains.to_s if !contains.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["alias"] = _alias.to_s if !_alias.nil?
      query_params["created"] = created.to_s if !created.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RadarApi.get_radar_value_lists",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>ValueList</code> object.</p>
    # @required @param value_list [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::RadarValueList]
    def get_radar_value_lists_value_list(
      *,
      value_list : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::RadarValueList
      data, _status_code, _headers = get_radar_value_lists_value_list_with_http_info(value_list: value_list, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueList&lt;/code&gt; object.&lt;/p&gt;
    # @required @param value_list [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::RadarValueList, Integer, Hash)] Stripe::RadarValueList, response status code and response headers
    def get_radar_value_lists_value_list_with_http_info(
      *,
      value_list : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::RadarValueList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_radar_value_lists_value_list(value_list: value_list, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#get_radar_value_lists_value_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarValueList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueList&lt;/code&gt; object.&lt;/p&gt;
    # @required @param value_list [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_radar_value_lists_value_list(
      *,
      value_list : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_radar_value_lists_value_list(value_list: value_list, expand: expand).execute(&block)
    end

    GET_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_VALUE_LIST = 5000

    # @return Crest::Request
    def build_api_request_for_get_radar_value_lists_value_list(
      *,
      value_list : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.get_radar_value_lists_value_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"value_list\" is required and cannot be null") if value_list.nil?
        unless (_value_list = value_list).nil?
          OpenApi::PrimitiveValidator.validate_max_length("value_list", value_list.to_s.size, GET_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_VALUE_LIST)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_lists/{value_list}".sub("{" + "value_list" + "}", URI.encode_path(value_list.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RadarApi.get_radar_value_lists_value_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
    # @required @param value [String?] The value of the item (whose type must match the type of the parent value list).
    # @required @param value_list [String?] The identifier of the value list which the created item will be added to.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::RadarValueListItem]
    def post_radar_value_list_items(
      *,
      value : String? = nil,
      value_list : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::RadarValueListItem
      data, _status_code, _headers = post_radar_value_list_items_with_http_info(value: value, value_list: value_list, expand: expand)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueListItem&lt;/code&gt; object, which is added to the specified parent value list.&lt;/p&gt;
    # @required @param value [String?] The value of the item (whose type must match the type of the parent value list).
    # @required @param value_list [String?] The identifier of the value list which the created item will be added to.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::RadarValueListItem, Integer, Hash)] Stripe::RadarValueListItem, response status code and response headers
    def post_radar_value_list_items_with_http_info(
      *,
      value : String? = nil,
      value_list : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::RadarValueListItem, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_radar_value_list_items(value: value, value_list: value_list, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#post_radar_value_list_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarValueListItem.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueListItem&lt;/code&gt; object, which is added to the specified parent value list.&lt;/p&gt;
    # @required @param value [String?] The value of the item (whose type must match the type of the parent value list).
    # @required @param value_list [String?] The identifier of the value list which the created item will be added to.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_radar_value_list_items(
      *,
      value : String? = nil,
      value_list : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_radar_value_list_items(value: value, value_list: value_list, expand: expand).execute(&block)
    end

    POST_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE      =  800
    POST_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE_LIST = 5000

    # @return Crest::Request
    def build_api_request_for_post_radar_value_list_items(
      *,
      value : String? = nil,
      value_list : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.post_radar_value_list_items ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"value\" is required and cannot be null") if value.nil?
        unless (_value = value).nil?
          OpenApi::PrimitiveValidator.validate_max_length("value", value.to_s.size, POST_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE)
        end
        raise ArgumentError.new("\"value_list\" is required and cannot be null") if value_list.nil?
        unless (_value_list = value_list).nil?
          OpenApi::PrimitiveValidator.validate_max_length("value_list", value_list.to_s.size, POST_RADAR_VALUE_LIST_ITEMS_MAX_LENGTH_FOR_VALUE_LIST)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["value"] = value.to_s if !value.nil?
      form_params["value_list"] = value_list.to_s if !value_list.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "RadarApi.post_radar_value_list_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
    # @required @param _alias [String?] The name of the value list for use in rules.
    # @required @param name [String?] The human-readable name of the value list.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param item_type [String?] Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.
    # @return [Stripe::RadarValueList]
    def post_radar_value_lists(
      *,
      _alias : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      item_type : String? = nil
    ) : Stripe::RadarValueList
      data, _status_code, _headers = post_radar_value_lists_with_http_info(_alias: _alias, name: name, expand: expand, item_type: item_type)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueList&lt;/code&gt; object, which can then be referenced in rules.&lt;/p&gt;
    # @required @param _alias [String?] The name of the value list for use in rules.
    # @required @param name [String?] The human-readable name of the value list.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param item_type [String?] Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.
    # @return [Tuple(Stripe::RadarValueList, Integer, Hash)] Stripe::RadarValueList, response status code and response headers
    def post_radar_value_lists_with_http_info(
      *,
      _alias : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      item_type : String? = nil
    ) : Tuple(Stripe::RadarValueList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_radar_value_lists(_alias: _alias, name: name, expand: expand, item_type: item_type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#post_radar_value_lists\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarValueList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueList&lt;/code&gt; object, which can then be referenced in rules.&lt;/p&gt;
    # @required @param _alias [String?] The name of the value list for use in rules.
    # @required @param name [String?] The human-readable name of the value list.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param item_type [String?] Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.
    # @return nil
    def post_radar_value_lists(
      *,
      _alias : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      item_type : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_radar_value_lists(_alias: _alias, name: name, expand: expand, item_type: item_type).execute(&block)
    end

    POST_RADAR_VALUE_LISTS_MAX_LENGTH_FOR__ALIAS      =  100
    POST_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_NAME        =  100
    POST_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_ITEM_TYPE   = 5000
    POST_RADAR_VALUE_LISTS_VALID_VALUES_FOR_ITEM_TYPE = String.static_array("card_bin", "card_fingerprint", "case_sensitive_string", "country", "customer_id", "email", "ip_address", "string")

    # @return Crest::Request
    def build_api_request_for_post_radar_value_lists(
      *,
      _alias : String? = nil,
      name : String? = nil,
      expand : Array(String)? = nil,
      item_type : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.post_radar_value_lists ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"_alias\" is required and cannot be null") if _alias.nil?
        unless (__alias = _alias).nil?
          OpenApi::PrimitiveValidator.validate_max_length("_alias", _alias.to_s.size, POST_RADAR_VALUE_LISTS_MAX_LENGTH_FOR__ALIAS)
        end
        raise ArgumentError.new("\"name\" is required and cannot be null") if name.nil?
        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_RADAR_VALUE_LISTS_MAX_LENGTH_FOR_NAME)
        end

        unless (_item_type = item_type).nil?
          OpenApi::EnumValidator.validate("item_type", _item_type, POST_RADAR_VALUE_LISTS_VALID_VALUES_FOR_ITEM_TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_lists"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["alias"] = _alias.to_s if !_alias.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["item_type"] = item_type.to_s if !item_type.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "RadarApi.post_radar_value_lists",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
    # @required @param value_list [String?]
    # @optional @param _alias [String?] The name of the value list for use in rules.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The human-readable name of the value list.
    # @return [Stripe::RadarValueList]
    def post_radar_value_lists_value_list(
      *,
      value_list : String? = nil,
      _alias : String? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Stripe::RadarValueList
      data, _status_code, _headers = post_radar_value_lists_value_list_with_http_info(value_list: value_list, _alias: _alias, expand: expand, name: name)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;ValueList&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that &lt;code&gt;item_type&lt;/code&gt; is immutable.&lt;/p&gt;
    # @required @param value_list [String?]
    # @optional @param _alias [String?] The name of the value list for use in rules.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The human-readable name of the value list.
    # @return [Tuple(Stripe::RadarValueList, Integer, Hash)] Stripe::RadarValueList, response status code and response headers
    def post_radar_value_lists_value_list_with_http_info(
      *,
      value_list : String? = nil,
      _alias : String? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Tuple(Stripe::RadarValueList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_radar_value_lists_value_list(value_list: value_list, _alias: _alias, expand: expand, name: name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RadarApi#post_radar_value_lists_value_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::RadarValueList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a &lt;code&gt;ValueList&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that &lt;code&gt;item_type&lt;/code&gt; is immutable.&lt;/p&gt;
    # @required @param value_list [String?]
    # @optional @param _alias [String?] The name of the value list for use in rules.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] The human-readable name of the value list.
    # @return nil
    def post_radar_value_lists_value_list(
      *,
      value_list : String? = nil,
      _alias : String? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_radar_value_lists_value_list(value_list: value_list, _alias: _alias, expand: expand, name: name).execute(&block)
    end

    POST_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_VALUE_LIST = 5000
    POST_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR__ALIAS     =  100
    POST_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_NAME       =  100

    # @return Crest::Request
    def build_api_request_for_post_radar_value_lists_value_list(
      *,
      value_list : String? = nil,
      _alias : String? = nil,
      expand : Array(String)? = nil,
      name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RadarApi.post_radar_value_lists_value_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"value_list\" is required and cannot be null") if value_list.nil?
        unless (_value_list = value_list).nil?
          OpenApi::PrimitiveValidator.validate_max_length("value_list", value_list.to_s.size, POST_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_VALUE_LIST)
        end
        unless (__alias = _alias).nil?
          OpenApi::PrimitiveValidator.validate_max_length("_alias", _alias.to_s.size, POST_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR__ALIAS)
        end

        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_RADAR_VALUE_LISTS_VALUE_LIST_MAX_LENGTH_FOR_NAME)
        end
      end

      # resource path
      local_var_path = "/v1/radar/value_lists/{value_list}".sub("{" + "value_list" + "}", URI.encode_path(value_list.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["alias"] = _alias.to_s if !_alias.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "RadarApi.post_radar_value_lists_value_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
