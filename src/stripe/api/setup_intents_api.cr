#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class SetupIntentsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of SetupIntents.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param payment_method [String?] Only return SetupIntents associated with the specified payment method.
    # @optional @param customer [String?] Only return SetupIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentFlowsSetupIntentList]
    def get_setup_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentFlowsSetupIntentList
      data, _status_code, _headers = get_setup_intents_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, attach_to_self: attach_to_self, payment_method: payment_method, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param payment_method [String?] Only return SetupIntents associated with the specified payment method.
    # @optional @param customer [String?] Only return SetupIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentFlowsSetupIntentList, Integer, Hash)] Stripe::PaymentFlowsSetupIntentList, response status code and response headers
    def get_setup_intents_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentFlowsSetupIntentList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_setup_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, attach_to_self: attach_to_self, payment_method: payment_method, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#get_setup_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentFlowsSetupIntentList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param payment_method [String?] Only return SetupIntents associated with the specified payment method.
    # @optional @param customer [String?] Only return SetupIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_setup_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_setup_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, attach_to_self: attach_to_self, payment_method: payment_method, customer: customer, expand: expand).execute(&block)
    end

    GET_SETUP_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_SETUP_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_SETUP_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000
    GET_SETUP_INTENTS_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_get_setup_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.get_setup_intents ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["attach_to_self"] = attach_to_self.to_s if !attach_to_self.nil?
      query_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SetupIntentsApi.get_setup_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a SetupIntent that has previously been created. </p>  <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>  <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href=\"#setup_intent_object\">SetupIntent</a> object reference for more details.</p>
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.
    # @return [Stripe::SetupIntent]
    def get_setup_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = get_setup_intents_intent_with_http_info(intent: intent, expand: expand, client_secret: client_secret)
      data
    end

    # &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def get_setup_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_setup_intents_intent(intent: intent, expand: expand, client_secret: client_secret)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#get_setup_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.
    # @return nil
    def get_setup_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_setup_intents_intent(intent: intent, expand: expand, client_secret: client_secret).execute(&block)
    end

    GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT        = 5000
    GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # @return Crest::Request
    def build_api_request_for_get_setup_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.get_setup_intents_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end

        unless (_client_secret = client_secret).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_secret", client_secret.to_s.size, GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SetupIntentsApi.get_setup_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a SetupIntent object.</p>  <p>After the SetupIntent is created, attach a payment method and <a href=\"/docs/api/setup_intents/confirm\">confirm</a> to collect any required permissions to charge the payment method later.</p>
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param confirm [Bool?] Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required.
    # @optional @param customer [String?] ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flow_directions [Array(String)?] Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    # @optional @param mandate_data [Stripe::SecretKeyParam?]
    # @optional @param on_behalf_of [String?] The Stripe account ID for which this SetupIntent is created.
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to [\\\"card\\\"].
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
    # @optional @param single_use [Stripe::SetupIntentSingleUseParams?]
    # @optional @param usage [String?] Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
    # @return [Stripe::SetupIntent]
    def post_setup_intents(
      *,
      attach_to_self : Bool? = nil,
      confirm : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      mandate_data : Stripe::SecretKeyParam? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      return_url : String? = nil,
      single_use : Stripe::SetupIntentSingleUseParams? = nil,
      usage : String? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_with_http_info(attach_to_self: attach_to_self, confirm: confirm, customer: customer, description: description, expand: expand, flow_directions: flow_directions, mandate_data: mandate_data, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, return_url: return_url, single_use: single_use, usage: usage)
      data
    end

    # &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After the SetupIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to collect any required permissions to charge the payment method later.&lt;/p&gt;
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param confirm [Bool?] Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required.
    # @optional @param customer [String?] ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flow_directions [Array(String)?] Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    # @optional @param mandate_data [Stripe::SecretKeyParam?]
    # @optional @param on_behalf_of [String?] The Stripe account ID for which this SetupIntent is created.
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to [\\\"card\\\"].
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
    # @optional @param single_use [Stripe::SetupIntentSingleUseParams?]
    # @optional @param usage [String?] Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_with_http_info(
      *,
      attach_to_self : Bool? = nil,
      confirm : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      mandate_data : Stripe::SecretKeyParam? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      return_url : String? = nil,
      single_use : Stripe::SetupIntentSingleUseParams? = nil,
      usage : String? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents(attach_to_self: attach_to_self, confirm: confirm, customer: customer, description: description, expand: expand, flow_directions: flow_directions, mandate_data: mandate_data, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, return_url: return_url, single_use: single_use, usage: usage)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After the SetupIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to collect any required permissions to charge the payment method later.&lt;/p&gt;
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param confirm [Bool?] Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required.
    # @optional @param customer [String?] ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flow_directions [Array(String)?] Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    # @optional @param mandate_data [Stripe::SecretKeyParam?]
    # @optional @param on_behalf_of [String?] The Stripe account ID for which this SetupIntent is created.
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to [\\\"card\\\"].
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
    # @optional @param single_use [Stripe::SetupIntentSingleUseParams?]
    # @optional @param usage [String?] Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
    # @return nil
    def post_setup_intents(
      *,
      attach_to_self : Bool? = nil,
      confirm : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      mandate_data : Stripe::SecretKeyParam? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      return_url : String? = nil,
      single_use : Stripe::SetupIntentSingleUseParams? = nil,
      usage : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents(attach_to_self: attach_to_self, confirm: confirm, customer: customer, description: description, expand: expand, flow_directions: flow_directions, mandate_data: mandate_data, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, return_url: return_url, single_use: single_use, usage: usage).execute(&block)
    end

    POST_SETUP_INTENTS_MAX_LENGTH_FOR_CUSTOMER          = 5000
    POST_SETUP_INTENTS_MAX_LENGTH_FOR_DESCRIPTION       = 1000
    POST_SETUP_INTENTS_VALID_VALUES_FOR_FLOW_DIRECTIONS = String.static_array("inbound", "outbound")
    POST_SETUP_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD    = 5000
    POST_SETUP_INTENTS_VALID_VALUES_FOR_USAGE           = String.static_array("off_session", "on_session")

    # @return Crest::Request
    def build_api_request_for_post_setup_intents(
      *,
      attach_to_self : Bool? = nil,
      confirm : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      mandate_data : Stripe::SecretKeyParam? = nil,
      on_behalf_of : String? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      return_url : String? = nil,
      single_use : Stripe::SetupIntentSingleUseParams? = nil,
      usage : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents ..." }
      end

      if client_side_validation
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_SETUP_INTENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_SETUP_INTENTS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_flow_directions = flow_directions).nil?
          OpenApi::EnumValidator.validate("flow_directions", _flow_directions, POST_SETUP_INTENTS_VALID_VALUES_FOR_FLOW_DIRECTIONS)
        end
        unless (_mandate_data = mandate_data).nil?
          _mandate_data.validate if _mandate_data.is_a?(OpenApi::Validatable)
        end

        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_SETUP_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_payment_method_data = payment_method_data).nil?
          _payment_method_data.validate if _payment_method_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_options = payment_method_options).nil?
          _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
        end

        unless (_single_use = single_use).nil?
          _single_use.validate if _single_use.is_a?(OpenApi::Validatable)
        end
        unless (_usage = usage).nil?
          OpenApi::EnumValidator.validate("usage", _usage, POST_SETUP_INTENTS_VALID_VALUES_FOR_USAGE)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["attach_to_self"] = attach_to_self.to_s if !attach_to_self.nil?
      form_params["confirm"] = confirm.to_s if !confirm.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["flow_directions"] = @api_client.build_collection_param(flow_directions, "csv") if !flow_directions.nil? && !flow_directions.empty?
      form_params["mandate_data"] = mandate_data.to_s if !mandate_data.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["return_url"] = return_url.to_s if !return_url.nil?
      form_params["single_use"] = single_use.to_s if !single_use.nil?
      form_params["usage"] = usage.to_s if !usage.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a SetupIntent object.</p>
    # @required @param intent [String?]
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param customer [String?] ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flow_directions [Array(String)?] Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to [\\\"card\\\"].
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent(
      *,
      intent : String? = nil,
      attach_to_self : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_with_http_info(intent: intent, attach_to_self: attach_to_self, customer: customer, description: description, expand: expand, flow_directions: flow_directions, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types)
      data
    end

    # &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param customer [String?] ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flow_directions [Array(String)?] Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to [\\\"card\\\"].
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      attach_to_self : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent(intent: intent, attach_to_self: attach_to_self, customer: customer, description: description, expand: expand, flow_directions: flow_directions, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param customer [String?] ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flow_directions [Array(String)?] Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param payment_method_types [Array(String)?] The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to [\\\"card\\\"].
    # @return nil
    def post_setup_intents_intent(
      *,
      intent : String? = nil,
      attach_to_self : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent(intent: intent, attach_to_self: attach_to_self, customer: customer, description: description, expand: expand, flow_directions: flow_directions, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT            = 5000
    POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_CUSTOMER          = 5000
    POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_DESCRIPTION       = 1000
    POST_SETUP_INTENTS_INTENT_VALID_VALUES_FOR_FLOW_DIRECTIONS = String.static_array("inbound", "outbound")
    POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_PAYMENT_METHOD    = 5000

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent(
      *,
      intent : String? = nil,
      attach_to_self : Bool? = nil,
      customer : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      flow_directions : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      payment_method_types : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_flow_directions = flow_directions).nil?
          OpenApi::EnumValidator.validate("flow_directions", _flow_directions, POST_SETUP_INTENTS_INTENT_VALID_VALUES_FOR_FLOW_DIRECTIONS)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_payment_method_data = payment_method_data).nil?
          _payment_method_data.validate if _payment_method_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_options = payment_method_options).nil?
          _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["attach_to_self"] = attach_to_self.to_s if !attach_to_self.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["flow_directions"] = @api_client.build_collection_param(flow_directions, "csv") if !flow_directions.nil? && !flow_directions.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>  <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
    # @required @param intent [String?]
    # @optional @param cancellation_reason [String?] Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate`
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent_cancel(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_cancel_with_http_info(intent: intent, cancellation_reason: cancellation_reason, expand: expand)
      data
    end

    # &lt;p&gt;A SetupIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param cancellation_reason [String?] Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate`
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_cancel_with_http_info(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A SetupIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param cancellation_reason [String?] Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate`
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_setup_intents_intent_cancel(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT                = 5000
    POST_SETUP_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_CANCELLATION_REASON   = 5000
    POST_SETUP_INTENTS_INTENT_CANCEL_VALID_VALUES_FOR_CANCELLATION_REASON = String.static_array("abandoned", "duplicate", "requested_by_customer")

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_cancel(
      *,
      intent : String? = nil,
      cancellation_reason : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT)
        end
        unless (_cancellation_reason = cancellation_reason).nil?
          OpenApi::EnumValidator.validate("cancellation_reason", _cancellation_reason, POST_SETUP_INTENTS_INTENT_CANCEL_VALID_VALUES_FOR_CANCELLATION_REASON)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/cancel".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["cancellation_reason"] = cancellation_reason.to_s if !cancellation_reason.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.</p>  <p>If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the <code>succeeded</code> status.</p>  <p>Otherwise, it will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If setup fails, the SetupIntent will transition to the <code>requires_payment_method</code> status.</p>
    # @required @param intent [String?]
    # @optional @param client_secret [String?] The client secret of the SetupIntent.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate_data [Stripe::PostPaymentIntentsIntentConfirmRequestMandateData?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent_confirm(
      *,
      intent : String? = nil,
      client_secret : String? = nil,
      expand : Array(String)? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      return_url : String? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_confirm_with_http_info(intent: intent, client_secret: client_secret, expand: expand, mandate_data: mandate_data, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, return_url: return_url)
      data
    end

    # &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param client_secret [String?] The client secret of the SetupIntent.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate_data [Stripe::PostPaymentIntentsIntentConfirmRequestMandateData?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_confirm_with_http_info(
      *,
      intent : String? = nil,
      client_secret : String? = nil,
      expand : Array(String)? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      return_url : String? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent_confirm(intent: intent, client_secret: client_secret, expand: expand, mandate_data: mandate_data, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, return_url: return_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent_confirm\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param client_secret [String?] The client secret of the SetupIntent.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param mandate_data [Stripe::PostPaymentIntentsIntentConfirmRequestMandateData?]
    # @optional @param payment_method [String?] ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    # @optional @param payment_method_data [Stripe::PaymentMethodDataParams?]
    # @optional @param payment_method_options [Stripe::PaymentMethodOptionsParam?]
    # @optional @param return_url [String?] The URL to redirect your customer back to after they authenticate on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
    # @return nil
    def post_setup_intents_intent_confirm(
      *,
      intent : String? = nil,
      client_secret : String? = nil,
      expand : Array(String)? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      return_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent_confirm(intent: intent, client_secret: client_secret, expand: expand, mandate_data: mandate_data, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, return_url: return_url).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT         = 5000
    POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_CLIENT_SECRET  = 5000
    POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_confirm(
      *,
      intent : String? = nil,
      client_secret : String? = nil,
      expand : Array(String)? = nil,
      mandate_data : Stripe::PostPaymentIntentsIntentConfirmRequestMandateData? = nil,
      payment_method : String? = nil,
      payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      return_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent_confirm ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT)
        end
        unless (_client_secret = client_secret).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_secret", client_secret.to_s.size, POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_CLIENT_SECRET)
        end

        unless (_mandate_data = mandate_data).nil?
          _mandate_data.validate if _mandate_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_payment_method_data = payment_method_data).nil?
          _payment_method_data.validate if _payment_method_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_options = payment_method_options).nil?
          _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/confirm".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["mandate_data"] = mandate_data.to_s if !mandate_data.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent_confirm",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verifies microdeposits on a SetupIntent object.</p>
    # @required @param intent [String?]
    # @optional @param amounts [Array(Int32)?] Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    # @optional @param client_secret [String?] The client secret of the SetupIntent.
    # @optional @param descriptor_code [String?] A six-character code starting with SM present in the microdeposit sent to the bank account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      client_secret : String? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_verify_microdeposits_with_http_info(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand)
      data
    end

    # &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amounts [Array(Int32)?] Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    # @optional @param client_secret [String?] The client secret of the SetupIntent.
    # @optional @param descriptor_code [String?] A six-character code starting with SM present in the microdeposit sent to the bank account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_verify_microdeposits_with_http_info(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      client_secret : String? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent_verify_microdeposits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param amounts [Array(Int32)?] Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    # @optional @param client_secret [String?] The client secret of the SetupIntent.
    # @optional @param descriptor_code [String?] A six-character code starting with SM present in the microdeposit sent to the bank account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_setup_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      client_secret : String? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT          = 5000
    POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_CLIENT_SECRET   = 5000
    POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_DESCRIPTOR_CODE = 5000

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      amounts : Array(Int32)? = nil,
      client_secret : String? = nil,
      descriptor_code : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent_verify_microdeposits ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT)
        end

        unless (_client_secret = client_secret).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_secret", client_secret.to_s.size, POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_CLIENT_SECRET)
        end
        unless (_descriptor_code = descriptor_code).nil?
          OpenApi::PrimitiveValidator.validate_max_length("descriptor_code", descriptor_code.to_s.size, POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_DESCRIPTOR_CODE)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/verify_microdeposits".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amounts"] = @api_client.build_collection_param(amounts, "csv") if !amounts.nil? && !amounts.empty?
      form_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      form_params["descriptor_code"] = descriptor_code.to_s if !descriptor_code.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent_verify_microdeposits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
