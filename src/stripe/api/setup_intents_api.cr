#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class SetupIntentsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of SetupIntents.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param payment_method [String?] Only return SetupIntents associated with the specified payment method.
    # @optional @param customer [String?] Only return SetupIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentFlowsSetupIntentList]
    def get_setup_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentFlowsSetupIntentList
      data, _status_code, _headers = get_setup_intents_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, attach_to_self: attach_to_self, payment_method: payment_method, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param payment_method [String?] Only return SetupIntents associated with the specified payment method.
    # @optional @param customer [String?] Only return SetupIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentFlowsSetupIntentList, Integer, Hash)] Stripe::PaymentFlowsSetupIntentList, response status code and response headers
    def get_setup_intents_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentFlowsSetupIntentList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_setup_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, attach_to_self: attach_to_self, payment_method: payment_method, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#get_setup_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentFlowsSetupIntentList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param attach_to_self [Bool?] If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    # @optional @param payment_method [String?] Only return SetupIntents associated with the specified payment method.
    # @optional @param customer [String?] Only return SetupIntents for the customer specified by this customer ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_setup_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_setup_intents(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, attach_to_self: attach_to_self, payment_method: payment_method, customer: customer, expand: expand).execute(&block)
    end

    GET_SETUP_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_SETUP_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_SETUP_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000
    GET_SETUP_INTENTS_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_get_setup_intents(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      attach_to_self : Bool? = nil,
      payment_method : String? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.get_setup_intents ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_SETUP_INTENTS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["attach_to_self"] = attach_to_self.to_s if !attach_to_self.nil?
      query_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SetupIntentsApi.get_setup_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a SetupIntent that has previously been created. </p>  <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>  <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href=\"#setup_intent_object\">SetupIntent</a> object reference for more details.</p>
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.
    # @return [Stripe::SetupIntent]
    def get_setup_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = get_setup_intents_intent_with_http_info(intent: intent, expand: expand, client_secret: client_secret)
      data
    end

    # &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def get_setup_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_setup_intents_intent(intent: intent, expand: expand, client_secret: client_secret)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#get_setup_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.
    # @return nil
    def get_setup_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_setup_intents_intent(intent: intent, expand: expand, client_secret: client_secret).execute(&block)
    end

    GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT        = 5000
    GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # @return Crest::Request
    def build_api_request_for_get_setup_intents_intent(
      *,
      intent : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.get_setup_intents_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end

        unless (_client_secret = client_secret).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_secret", client_secret.to_s.size, GET_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_CLIENT_SECRET)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SetupIntentsApi.get_setup_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a SetupIntent object.</p>  <p>After the SetupIntent is created, attach a payment method and <a href=\"/docs/api/setup_intents/confirm\">confirm</a> to collect any required permissions to charge the payment method later.</p>
    # @optional @param post_setup_intents_request [Stripe::PostSetupIntentsRequest?]
    # @return [Stripe::SetupIntent]
    def post_setup_intents(
      *,
      post_setup_intents_request : Stripe::PostSetupIntentsRequest? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_with_http_info(post_setup_intents_request: post_setup_intents_request)
      data
    end

    # &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After the SetupIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to collect any required permissions to charge the payment method later.&lt;/p&gt;
    # @optional @param post_setup_intents_request [Stripe::PostSetupIntentsRequest?]
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_with_http_info(
      *,
      post_setup_intents_request : Stripe::PostSetupIntentsRequest? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents(post_setup_intents_request: post_setup_intents_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After the SetupIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to collect any required permissions to charge the payment method later.&lt;/p&gt;
    # @optional @param post_setup_intents_request [Stripe::PostSetupIntentsRequest?]
    # @return nil
    def post_setup_intents(
      *,
      post_setup_intents_request : Stripe::PostSetupIntentsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents(post_setup_intents_request: post_setup_intents_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_setup_intents(
      *,
      post_setup_intents_request : Stripe::PostSetupIntentsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents ..." }
      end

      if client_side_validation
        unless (_post_setup_intents_request = post_setup_intents_request).nil?
          _post_setup_intents_request.validate if _post_setup_intents_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_setup_intents_request, content_type: header_params["Content-Type"]?) if !post_setup_intents_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a SetupIntent object.</p>
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_request [Stripe::PostSetupIntentsIntentRequest?]
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent(
      *,
      intent : String? = nil,
      post_setup_intents_intent_request : Stripe::PostSetupIntentsIntentRequest? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_with_http_info(intent: intent, post_setup_intents_intent_request: post_setup_intents_intent_request)
      data
    end

    # &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_request [Stripe::PostSetupIntentsIntentRequest?]
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_with_http_info(
      *,
      intent : String? = nil,
      post_setup_intents_intent_request : Stripe::PostSetupIntentsIntentRequest? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent(intent: intent, post_setup_intents_intent_request: post_setup_intents_intent_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_request [Stripe::PostSetupIntentsIntentRequest?]
    # @return nil
    def post_setup_intents_intent(
      *,
      intent : String? = nil,
      post_setup_intents_intent_request : Stripe::PostSetupIntentsIntentRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent(intent: intent, post_setup_intents_intent_request: post_setup_intents_intent_request).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent(
      *,
      intent : String? = nil,
      post_setup_intents_intent_request : Stripe::PostSetupIntentsIntentRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_setup_intents_intent_request = post_setup_intents_intent_request).nil?
          _post_setup_intents_intent_request.validate if _post_setup_intents_intent_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_setup_intents_intent_request, content_type: header_params["Content-Type"]?) if !post_setup_intents_intent_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>  <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_cancel_request [Stripe::PostSetupIntentsIntentCancelRequest?]
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent_cancel(
      *,
      intent : String? = nil,
      post_setup_intents_intent_cancel_request : Stripe::PostSetupIntentsIntentCancelRequest? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_cancel_with_http_info(intent: intent, post_setup_intents_intent_cancel_request: post_setup_intents_intent_cancel_request)
      data
    end

    # &lt;p&gt;A SetupIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_cancel_request [Stripe::PostSetupIntentsIntentCancelRequest?]
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_cancel_with_http_info(
      *,
      intent : String? = nil,
      post_setup_intents_intent_cancel_request : Stripe::PostSetupIntentsIntentCancelRequest? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent_cancel(intent: intent, post_setup_intents_intent_cancel_request: post_setup_intents_intent_cancel_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A SetupIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_cancel_request [Stripe::PostSetupIntentsIntentCancelRequest?]
    # @return nil
    def post_setup_intents_intent_cancel(
      *,
      intent : String? = nil,
      post_setup_intents_intent_cancel_request : Stripe::PostSetupIntentsIntentCancelRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent_cancel(intent: intent, post_setup_intents_intent_cancel_request: post_setup_intents_intent_cancel_request).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_cancel(
      *,
      intent : String? = nil,
      post_setup_intents_intent_cancel_request : Stripe::PostSetupIntentsIntentCancelRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_CANCEL_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_setup_intents_intent_cancel_request = post_setup_intents_intent_cancel_request).nil?
          _post_setup_intents_intent_cancel_request.validate if _post_setup_intents_intent_cancel_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/cancel".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_setup_intents_intent_cancel_request, content_type: header_params["Content-Type"]?) if !post_setup_intents_intent_cancel_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.</p>  <p>If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the <code>succeeded</code> status.</p>  <p>Otherwise, it will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If setup fails, the SetupIntent will transition to the <code>requires_payment_method</code> status.</p>
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_confirm_request [Stripe::PostSetupIntentsIntentConfirmRequest?]
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent_confirm(
      *,
      intent : String? = nil,
      post_setup_intents_intent_confirm_request : Stripe::PostSetupIntentsIntentConfirmRequest? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_confirm_with_http_info(intent: intent, post_setup_intents_intent_confirm_request: post_setup_intents_intent_confirm_request)
      data
    end

    # &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_confirm_request [Stripe::PostSetupIntentsIntentConfirmRequest?]
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_confirm_with_http_info(
      *,
      intent : String? = nil,
      post_setup_intents_intent_confirm_request : Stripe::PostSetupIntentsIntentConfirmRequest? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent_confirm(intent: intent, post_setup_intents_intent_confirm_request: post_setup_intents_intent_confirm_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent_confirm\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_confirm_request [Stripe::PostSetupIntentsIntentConfirmRequest?]
    # @return nil
    def post_setup_intents_intent_confirm(
      *,
      intent : String? = nil,
      post_setup_intents_intent_confirm_request : Stripe::PostSetupIntentsIntentConfirmRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent_confirm(intent: intent, post_setup_intents_intent_confirm_request: post_setup_intents_intent_confirm_request).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_confirm(
      *,
      intent : String? = nil,
      post_setup_intents_intent_confirm_request : Stripe::PostSetupIntentsIntentConfirmRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent_confirm ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_CONFIRM_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_setup_intents_intent_confirm_request = post_setup_intents_intent_confirm_request).nil?
          _post_setup_intents_intent_confirm_request.validate if _post_setup_intents_intent_confirm_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/confirm".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_setup_intents_intent_confirm_request, content_type: header_params["Content-Type"]?) if !post_setup_intents_intent_confirm_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent_confirm",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verifies microdeposits on a SetupIntent object.</p>
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_verify_microdeposits_request [Stripe::PostSetupIntentsIntentVerifyMicrodepositsRequest?]
    # @return [Stripe::SetupIntent]
    def post_setup_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      post_setup_intents_intent_verify_microdeposits_request : Stripe::PostSetupIntentsIntentVerifyMicrodepositsRequest? = nil
    ) : Stripe::SetupIntent
      data, _status_code, _headers = post_setup_intents_intent_verify_microdeposits_with_http_info(intent: intent, post_setup_intents_intent_verify_microdeposits_request: post_setup_intents_intent_verify_microdeposits_request)
      data
    end

    # &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_verify_microdeposits_request [Stripe::PostSetupIntentsIntentVerifyMicrodepositsRequest?]
    # @return [Tuple(Stripe::SetupIntent, Integer, Hash)] Stripe::SetupIntent, response status code and response headers
    def post_setup_intents_intent_verify_microdeposits_with_http_info(
      *,
      intent : String? = nil,
      post_setup_intents_intent_verify_microdeposits_request : Stripe::PostSetupIntentsIntentVerifyMicrodepositsRequest? = nil
    ) : Tuple(Stripe::SetupIntent, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_setup_intents_intent_verify_microdeposits(intent: intent, post_setup_intents_intent_verify_microdeposits_request: post_setup_intents_intent_verify_microdeposits_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SetupIntentsApi#post_setup_intents_intent_verify_microdeposits\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SetupIntent.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
    # @required @param intent [String?]
    # @optional @param post_setup_intents_intent_verify_microdeposits_request [Stripe::PostSetupIntentsIntentVerifyMicrodepositsRequest?]
    # @return nil
    def post_setup_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      post_setup_intents_intent_verify_microdeposits_request : Stripe::PostSetupIntentsIntentVerifyMicrodepositsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_setup_intents_intent_verify_microdeposits(intent: intent, post_setup_intents_intent_verify_microdeposits_request: post_setup_intents_intent_verify_microdeposits_request).execute(&block)
    end

    POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_verify_microdeposits(
      *,
      intent : String? = nil,
      post_setup_intents_intent_verify_microdeposits_request : Stripe::PostSetupIntentsIntentVerifyMicrodepositsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SetupIntentsApi.post_setup_intents_intent_verify_microdeposits ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"intent\" is required and cannot be null") if intent.nil?
        unless (_intent = intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("intent", intent.to_s.size, POST_SETUP_INTENTS_INTENT_VERIFY_MICRODEPOSITS_MAX_LENGTH_FOR_INTENT)
        end
        unless (_post_setup_intents_intent_verify_microdeposits_request = post_setup_intents_intent_verify_microdeposits_request).nil?
          _post_setup_intents_intent_verify_microdeposits_request.validate if _post_setup_intents_intent_verify_microdeposits_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/verify_microdeposits".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_setup_intents_intent_verify_microdeposits_request, content_type: header_params["Content-Type"]?) if !post_setup_intents_intent_verify_microdeposits_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SetupIntentsApi.post_setup_intents_intent_verify_microdeposits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
