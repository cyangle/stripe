#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/error"
require "../models/get_accounts_created_parameter"

require "../models/post_accounts_request_metadata"
require "../models/topup"
require "../models/topup_list"

module Stripe
  class TopupsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of top-ups.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param amount [Stripe::GetAccountsCreatedParameter?] A positive integer representing how much to transfer.
    # @optional @param status [String?] Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TopupList]
    def get_topups(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      amount : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TopupList
      data, _status_code, _headers = get_topups_with_http_info(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, amount: amount, status: status, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of top-ups.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param amount [Stripe::GetAccountsCreatedParameter?] A positive integer representing how much to transfer.
    # @optional @param status [String?] Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TopupList, Integer, Hash)] Stripe::TopupList, response status code and response headers
    def get_topups_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      amount : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TopupList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_topups(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, amount: amount, status: status, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TopupsApi#get_topups\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TopupList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of top-ups.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param amount [Stripe::GetAccountsCreatedParameter?] A positive integer representing how much to transfer.
    # @optional @param status [String?] Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_topups(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      amount : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_topups(ending_before: ending_before, starting_after: starting_after, created: created, limit: limit, amount: amount, status: status, expand: expand).execute(&block)
    end

    GET_TOPUPS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TOPUPS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TOPUPS_MAX_LENGTH_FOR_STATUS         = 5000
    GET_TOPUPS_VALID_VALUES_FOR_STATUS       = String.static_array("canceled", "failed", "pending", "succeeded")

    # @return Crest::Request
    def build_api_request_for_get_topups(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      limit : Int64? = nil,
      amount : Stripe::GetAccountsCreatedParameter? = nil,
      status : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TopupsApi.get_topups ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TOPUPS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TOPUPS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_amount = amount).nil?
          _amount.validate if _amount.is_a?(OpenApi::Validatable)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TOPUPS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/topups"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["amount"] = amount.to_s if !amount.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TopupsApi.get_topups",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
    # @required @param topup [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Topup]
    def get_topups_topup(
      *,
      topup : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Topup
      data, _status_code, _headers = get_topups_topup_with_http_info(topup: topup, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.&lt;/p&gt;
    # @required @param topup [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Topup, Integer, Hash)] Stripe::Topup, response status code and response headers
    def get_topups_topup_with_http_info(
      *,
      topup : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Topup, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_topups_topup(topup: topup, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TopupsApi#get_topups_topup\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Topup.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.&lt;/p&gt;
    # @required @param topup [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_topups_topup(
      *,
      topup : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_topups_topup(topup: topup, expand: expand).execute(&block)
    end

    GET_TOPUPS_TOPUP_MAX_LENGTH_FOR_TOPUP = 5000

    # @return Crest::Request
    def build_api_request_for_get_topups_topup(
      *,
      topup : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TopupsApi.get_topups_topup ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"topup\" is required and cannot be null") if topup.nil?
        unless (_topup = topup).nil?
          OpenApi::PrimitiveValidator.validate_max_length("topup", topup.to_s.size, GET_TOPUPS_TOPUP_MAX_LENGTH_FOR_TOPUP)
        end
      end

      # resource path
      local_var_path = "/v1/topups/{topup}".sub("{" + "topup" + "}", URI.encode_path(topup.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TopupsApi.get_topups_topup",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Top up the balance of an account</p>
    # @required @param amount [Int32?] A positive integer representing how much to transfer.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param source [String?] The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)).
    # @optional @param statement_descriptor [String?] Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters.
    # @optional @param transfer_group [String?] A string that identifies this top-up as part of a group.
    # @return [Stripe::Topup]
    def post_topups(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      transfer_group : String? = nil
    ) : Stripe::Topup
      data, _status_code, _headers = post_topups_with_http_info(amount: amount, currency: currency, description: description, expand: expand, metadata: metadata, source: source, statement_descriptor: statement_descriptor, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Top up the balance of an account&lt;/p&gt;
    # @required @param amount [Int32?] A positive integer representing how much to transfer.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param source [String?] The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)).
    # @optional @param statement_descriptor [String?] Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters.
    # @optional @param transfer_group [String?] A string that identifies this top-up as part of a group.
    # @return [Tuple(Stripe::Topup, Integer, Hash)] Stripe::Topup, response status code and response headers
    def post_topups_with_http_info(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      transfer_group : String? = nil
    ) : Tuple(Stripe::Topup, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_topups(amount: amount, currency: currency, description: description, expand: expand, metadata: metadata, source: source, statement_descriptor: statement_descriptor, transfer_group: transfer_group)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TopupsApi#post_topups\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Topup.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Top up the balance of an account&lt;/p&gt;
    # @required @param amount [Int32?] A positive integer representing how much to transfer.
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param source [String?] The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)).
    # @optional @param statement_descriptor [String?] Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters.
    # @optional @param transfer_group [String?] A string that identifies this top-up as part of a group.
    # @return nil
    def post_topups(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      transfer_group : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_topups(amount: amount, currency: currency, description: description, expand: expand, metadata: metadata, source: source, statement_descriptor: statement_descriptor, transfer_group: transfer_group).execute(&block)
    end

    POST_TOPUPS_MAX_LENGTH_FOR_DESCRIPTION          = 5000
    POST_TOPUPS_MAX_LENGTH_FOR_SOURCE               = 5000
    POST_TOPUPS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR =   15

    # @return Crest::Request
    def build_api_request_for_post_topups(
      *,
      amount : Int64? = nil,
      currency : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      source : String? = nil,
      statement_descriptor : String? = nil,
      transfer_group : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TopupsApi.post_topups ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"amount\" is required and cannot be null") if amount.nil?

        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TOPUPS_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_source = source).nil?
          OpenApi::PrimitiveValidator.validate_max_length("source", source.to_s.size, POST_TOPUPS_MAX_LENGTH_FOR_SOURCE)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_TOPUPS_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
      end

      # resource path
      local_var_path = "/v1/topups"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("source", source.to_s) if !source.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("transfer_group", transfer_group.to_s) if !transfer_group.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TopupsApi.post_topups",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
    # @required @param topup [String?]
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::Topup]
    def post_topups_topup(
      *,
      topup : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::Topup
      data, _status_code, _headers = post_topups_topup_with_http_info(topup: topup, description: description, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the metadata of a top-up. Other top-up details are not editable by design.&lt;/p&gt;
    # @required @param topup [String?]
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::Topup, Integer, Hash)] Stripe::Topup, response status code and response headers
    def post_topups_topup_with_http_info(
      *,
      topup : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::Topup, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_topups_topup(topup: topup, description: description, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TopupsApi#post_topups_topup\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Topup.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the metadata of a top-up. Other top-up details are not editable by design.&lt;/p&gt;
    # @required @param topup [String?]
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_topups_topup(
      *,
      topup : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_topups_topup(topup: topup, description: description, expand: expand, metadata: metadata).execute(&block)
    end

    POST_TOPUPS_TOPUP_MAX_LENGTH_FOR_TOPUP       = 5000
    POST_TOPUPS_TOPUP_MAX_LENGTH_FOR_DESCRIPTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_topups_topup(
      *,
      topup : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TopupsApi.post_topups_topup ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"topup\" is required and cannot be null") if topup.nil?
        unless (_topup = topup).nil?
          OpenApi::PrimitiveValidator.validate_max_length("topup", topup.to_s.size, POST_TOPUPS_TOPUP_MAX_LENGTH_FOR_TOPUP)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TOPUPS_TOPUP_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/topups/{topup}".sub("{" + "topup" + "}", URI.encode_path(topup.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TopupsApi.post_topups_topup",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
    # @required @param topup [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Topup]
    def post_topups_topup_cancel(
      *,
      topup : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Topup
      data, _status_code, _headers = post_topups_topup_cancel_with_http_info(topup: topup, expand: expand)
      data
    end

    # &lt;p&gt;Cancels a top-up. Only pending top-ups can be canceled.&lt;/p&gt;
    # @required @param topup [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Topup, Integer, Hash)] Stripe::Topup, response status code and response headers
    def post_topups_topup_cancel_with_http_info(
      *,
      topup : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Topup, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_topups_topup_cancel(topup: topup, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TopupsApi#post_topups_topup_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Topup.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels a top-up. Only pending top-ups can be canceled.&lt;/p&gt;
    # @required @param topup [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_topups_topup_cancel(
      *,
      topup : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_topups_topup_cancel(topup: topup, expand: expand).execute(&block)
    end

    POST_TOPUPS_TOPUP_CANCEL_MAX_LENGTH_FOR_TOPUP = 5000

    # @return Crest::Request
    def build_api_request_for_post_topups_topup_cancel(
      *,
      topup : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TopupsApi.post_topups_topup_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"topup\" is required and cannot be null") if topup.nil?
        unless (_topup = topup).nil?
          OpenApi::PrimitiveValidator.validate_max_length("topup", topup.to_s.size, POST_TOPUPS_TOPUP_CANCEL_MAX_LENGTH_FOR_TOPUP)
        end
      end

      # resource path
      local_var_path = "/v1/topups/{topup}/cancel".sub("{" + "topup" + "}", URI.encode_path(topup.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TopupsApi.post_topups_topup_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
