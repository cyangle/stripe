#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class TaxRatesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Optional flag to filter by tax rates that are either active or inactive (archived).
    # @optional @param inclusive [Bool?] Optional flag to filter by tax rates that are inclusive (or those that are not inclusive).
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Optional range for filtering created date.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TaxRatesList]
    def get_tax_rates(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      inclusive : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TaxRatesList
      data, _status_code, _headers = get_tax_rates_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, inclusive: inclusive, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Optional flag to filter by tax rates that are either active or inactive (archived).
    # @optional @param inclusive [Bool?] Optional flag to filter by tax rates that are inclusive (or those that are not inclusive).
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Optional range for filtering created date.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TaxRatesList, Integer, Hash)] Stripe::TaxRatesList, response status code and response headers
    def get_tax_rates_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      inclusive : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TaxRatesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_rates(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, inclusive: inclusive, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TaxRatesApi#get_tax_rates\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxRatesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Optional flag to filter by tax rates that are either active or inactive (archived).
    # @optional @param inclusive [Bool?] Optional flag to filter by tax rates that are inclusive (or those that are not inclusive).
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Optional range for filtering created date.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tax_rates(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      inclusive : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_rates(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, inclusive: inclusive, created: created, expand: expand).execute(&block)
    end

    GET_TAX_RATES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TAX_RATES_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_tax_rates(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      inclusive : Bool? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TaxRatesApi.get_tax_rates ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TAX_RATES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TAX_RATES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tax_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["inclusive"] = inclusive.to_s if !inclusive.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxRatesApi.get_tax_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a tax rate with the given ID</p>
    # @required @param tax_rate [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TaxRate]
    def get_tax_rates_tax_rate(
      *,
      tax_rate : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TaxRate
      data, _status_code, _headers = get_tax_rates_tax_rate_with_http_info(tax_rate: tax_rate, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a tax rate with the given ID&lt;/p&gt;
    # @required @param tax_rate [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TaxRate, Integer, Hash)] Stripe::TaxRate, response status code and response headers
    def get_tax_rates_tax_rate_with_http_info(
      *,
      tax_rate : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TaxRate, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_rates_tax_rate(tax_rate: tax_rate, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TaxRatesApi#get_tax_rates_tax_rate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxRate.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a tax rate with the given ID&lt;/p&gt;
    # @required @param tax_rate [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tax_rates_tax_rate(
      *,
      tax_rate : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_rates_tax_rate(tax_rate: tax_rate, expand: expand).execute(&block)
    end

    GET_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_TAX_RATE = 5000

    # @return Crest::Request
    def build_api_request_for_get_tax_rates_tax_rate(
      *,
      tax_rate : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TaxRatesApi.get_tax_rates_tax_rate ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"tax_rate\" is required and cannot be null") if tax_rate.nil?
        unless (_tax_rate = tax_rate).nil?
          OpenApi::PrimitiveValidator.validate_max_length("tax_rate", tax_rate.to_s.size, GET_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_TAX_RATE)
        end
      end

      # resource path
      local_var_path = "/v1/tax_rates/{tax_rate}".sub("{" + "tax_rate" + "}", URI.encode_path(tax_rate.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxRatesApi.get_tax_rates_tax_rate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new tax rate.</p>
    # @required @param display_name [String?] The display name of the tax rate, which will be shown to users.
    # @required @param inclusive [Bool?] This specifies if the tax rate is inclusive or exclusive.
    # @required @param percentage [Float64?] This represents the tax rate percent out of 100.
    # @optional @param active [Bool?] Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    # @optional @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @optional @param description [String?] An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param jurisdiction [String?] The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
    # @optional @param state [String?] [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\"NY\\\" for New York, United States.
    # @optional @param tax_type [String?] The high-level tax type, such as `vat` or `sales_tax`.
    # @return [Stripe::TaxRate]
    def post_tax_rates(
      *,
      display_name : String? = nil,
      inclusive : Bool? = nil,
      percentage : Float64? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      state : String? = nil,
      tax_type : String? = nil
    ) : Stripe::TaxRate
      data, _status_code, _headers = post_tax_rates_with_http_info(display_name: display_name, inclusive: inclusive, percentage: percentage, active: active, country: country, description: description, expand: expand, jurisdiction: jurisdiction, state: state, tax_type: tax_type)
      data
    end

    # &lt;p&gt;Creates a new tax rate.&lt;/p&gt;
    # @required @param display_name [String?] The display name of the tax rate, which will be shown to users.
    # @required @param inclusive [Bool?] This specifies if the tax rate is inclusive or exclusive.
    # @required @param percentage [Float64?] This represents the tax rate percent out of 100.
    # @optional @param active [Bool?] Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    # @optional @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @optional @param description [String?] An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param jurisdiction [String?] The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
    # @optional @param state [String?] [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\"NY\\\" for New York, United States.
    # @optional @param tax_type [String?] The high-level tax type, such as `vat` or `sales_tax`.
    # @return [Tuple(Stripe::TaxRate, Integer, Hash)] Stripe::TaxRate, response status code and response headers
    def post_tax_rates_with_http_info(
      *,
      display_name : String? = nil,
      inclusive : Bool? = nil,
      percentage : Float64? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      state : String? = nil,
      tax_type : String? = nil
    ) : Tuple(Stripe::TaxRate, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_rates(display_name: display_name, inclusive: inclusive, percentage: percentage, active: active, country: country, description: description, expand: expand, jurisdiction: jurisdiction, state: state, tax_type: tax_type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TaxRatesApi#post_tax_rates\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxRate.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new tax rate.&lt;/p&gt;
    # @required @param display_name [String?] The display name of the tax rate, which will be shown to users.
    # @required @param inclusive [Bool?] This specifies if the tax rate is inclusive or exclusive.
    # @required @param percentage [Float64?] This represents the tax rate percent out of 100.
    # @optional @param active [Bool?] Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    # @optional @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @optional @param description [String?] An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param jurisdiction [String?] The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
    # @optional @param state [String?] [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\"NY\\\" for New York, United States.
    # @optional @param tax_type [String?] The high-level tax type, such as `vat` or `sales_tax`.
    # @return nil
    def post_tax_rates(
      *,
      display_name : String? = nil,
      inclusive : Bool? = nil,
      percentage : Float64? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      state : String? = nil,
      tax_type : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_rates(display_name: display_name, inclusive: inclusive, percentage: percentage, active: active, country: country, description: description, expand: expand, jurisdiction: jurisdiction, state: state, tax_type: tax_type).execute(&block)
    end

    POST_TAX_RATES_MAX_LENGTH_FOR_DISPLAY_NAME =   50
    POST_TAX_RATES_MAX_LENGTH_FOR_COUNTRY      = 5000
    POST_TAX_RATES_MAX_LENGTH_FOR_DESCRIPTION  = 5000
    POST_TAX_RATES_MAX_LENGTH_FOR_JURISDICTION =   50
    POST_TAX_RATES_MAX_LENGTH_FOR_STATE        =    2
    POST_TAX_RATES_VALID_VALUES_FOR_TAX_TYPE   = String.static_array("gst", "hst", "jct", "pst", "qst", "rst", "sales_tax", "vat")

    # @return Crest::Request
    def build_api_request_for_post_tax_rates(
      *,
      display_name : String? = nil,
      inclusive : Bool? = nil,
      percentage : Float64? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      state : String? = nil,
      tax_type : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TaxRatesApi.post_tax_rates ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"display_name\" is required and cannot be null") if display_name.nil?
        unless (_display_name = display_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("display_name", display_name.to_s.size, POST_TAX_RATES_MAX_LENGTH_FOR_DISPLAY_NAME)
        end
        raise ArgumentError.new("\"inclusive\" is required and cannot be null") if inclusive.nil?

        raise ArgumentError.new("\"percentage\" is required and cannot be null") if percentage.nil?

        unless (_country = country).nil?
          OpenApi::PrimitiveValidator.validate_max_length("country", country.to_s.size, POST_TAX_RATES_MAX_LENGTH_FOR_COUNTRY)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TAX_RATES_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_jurisdiction = jurisdiction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("jurisdiction", jurisdiction.to_s.size, POST_TAX_RATES_MAX_LENGTH_FOR_JURISDICTION)
        end
        unless (_state = state).nil?
          OpenApi::PrimitiveValidator.validate_max_length("state", state.to_s.size, POST_TAX_RATES_MAX_LENGTH_FOR_STATE)
        end
        unless (_tax_type = tax_type).nil?
          OpenApi::EnumValidator.validate("tax_type", _tax_type, POST_TAX_RATES_VALID_VALUES_FOR_TAX_TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/tax_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["country"] = country.to_s if !country.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["inclusive"] = inclusive.to_s if !inclusive.nil?
      form_params["jurisdiction"] = jurisdiction.to_s if !jurisdiction.nil?
      form_params["percentage"] = percentage.to_s if !percentage.nil?
      form_params["state"] = state.to_s if !state.nil?
      form_params["tax_type"] = tax_type.to_s if !tax_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxRatesApi.post_tax_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing tax rate.</p>
    # @required @param tax_rate [String?]
    # @optional @param active [Bool?] Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    # @optional @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @optional @param description [String?] An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    # @optional @param display_name [String?] The display name of the tax rate, which will be shown to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param jurisdiction [String?] The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param state [String?] [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\"NY\\\" for New York, United States.
    # @optional @param tax_type [String?] The high-level tax type, such as `vat` or `sales_tax`.
    # @return [Stripe::TaxRate]
    def post_tax_rates_tax_rate(
      *,
      tax_rate : String? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      state : String? = nil,
      tax_type : String? = nil
    ) : Stripe::TaxRate
      data, _status_code, _headers = post_tax_rates_tax_rate_with_http_info(tax_rate: tax_rate, active: active, country: country, description: description, display_name: display_name, expand: expand, jurisdiction: jurisdiction, metadata: metadata, state: state, tax_type: tax_type)
      data
    end

    # &lt;p&gt;Updates an existing tax rate.&lt;/p&gt;
    # @required @param tax_rate [String?]
    # @optional @param active [Bool?] Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    # @optional @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @optional @param description [String?] An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    # @optional @param display_name [String?] The display name of the tax rate, which will be shown to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param jurisdiction [String?] The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param state [String?] [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\"NY\\\" for New York, United States.
    # @optional @param tax_type [String?] The high-level tax type, such as `vat` or `sales_tax`.
    # @return [Tuple(Stripe::TaxRate, Integer, Hash)] Stripe::TaxRate, response status code and response headers
    def post_tax_rates_tax_rate_with_http_info(
      *,
      tax_rate : String? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      state : String? = nil,
      tax_type : String? = nil
    ) : Tuple(Stripe::TaxRate, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_rates_tax_rate(tax_rate: tax_rate, active: active, country: country, description: description, display_name: display_name, expand: expand, jurisdiction: jurisdiction, metadata: metadata, state: state, tax_type: tax_type)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TaxRatesApi#post_tax_rates_tax_rate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxRate.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing tax rate.&lt;/p&gt;
    # @required @param tax_rate [String?]
    # @optional @param active [Bool?] Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    # @optional @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @optional @param description [String?] An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    # @optional @param display_name [String?] The display name of the tax rate, which will be shown to users.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param jurisdiction [String?] The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param state [String?] [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\"NY\\\" for New York, United States.
    # @optional @param tax_type [String?] The high-level tax type, such as `vat` or `sales_tax`.
    # @return nil
    def post_tax_rates_tax_rate(
      *,
      tax_rate : String? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      state : String? = nil,
      tax_type : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_rates_tax_rate(tax_rate: tax_rate, active: active, country: country, description: description, display_name: display_name, expand: expand, jurisdiction: jurisdiction, metadata: metadata, state: state, tax_type: tax_type).execute(&block)
    end

    POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_TAX_RATE     = 5000
    POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_COUNTRY      = 5000
    POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_DESCRIPTION  = 5000
    POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_DISPLAY_NAME =   50
    POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_JURISDICTION =   50
    POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_STATE        =    2
    POST_TAX_RATES_TAX_RATE_VALID_VALUES_FOR_TAX_TYPE   = String.static_array("gst", "hst", "jct", "pst", "qst", "rst", "sales_tax", "vat")

    # @return Crest::Request
    def build_api_request_for_post_tax_rates_tax_rate(
      *,
      tax_rate : String? = nil,
      active : Bool? = nil,
      country : String? = nil,
      description : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      jurisdiction : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      state : String? = nil,
      tax_type : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TaxRatesApi.post_tax_rates_tax_rate ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"tax_rate\" is required and cannot be null") if tax_rate.nil?
        unless (_tax_rate = tax_rate).nil?
          OpenApi::PrimitiveValidator.validate_max_length("tax_rate", tax_rate.to_s.size, POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_TAX_RATE)
        end

        unless (_country = country).nil?
          OpenApi::PrimitiveValidator.validate_max_length("country", country.to_s.size, POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_COUNTRY)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_DESCRIPTION)
        end
        unless (_display_name = display_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("display_name", display_name.to_s.size, POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_DISPLAY_NAME)
        end

        unless (_jurisdiction = jurisdiction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("jurisdiction", jurisdiction.to_s.size, POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_JURISDICTION)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_state = state).nil?
          OpenApi::PrimitiveValidator.validate_max_length("state", state.to_s.size, POST_TAX_RATES_TAX_RATE_MAX_LENGTH_FOR_STATE)
        end
        unless (_tax_type = tax_type).nil?
          OpenApi::EnumValidator.validate("tax_type", _tax_type, POST_TAX_RATES_TAX_RATE_VALID_VALUES_FOR_TAX_TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/tax_rates/{tax_rate}".sub("{" + "tax_rate" + "}", URI.encode_path(tax_rate.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["country"] = country.to_s if !country.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["jurisdiction"] = jurisdiction.to_s if !jurisdiction.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["state"] = state.to_s if !state.nil?
      form_params["tax_type"] = tax_type.to_s if !tax_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxRatesApi.post_tax_rates_tax_rate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
