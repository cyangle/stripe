#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/api_method_refund_list"
require "../models/error"
require "../models/get_accounts_created_parameter"

require "../models/post_accounts_request_metadata"
require "../models/refund"

module Stripe
  class RefundsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return refunds for the PaymentIntent specified by this ID.
    # @optional @param charge [String?] Only return refunds for the charge specified by this charge ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return refunds that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ApiMethodRefundList]
    def get_refunds(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ApiMethodRefundList
      data, _status_code, _headers = get_refunds_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return refunds for the PaymentIntent specified by this ID.
    # @optional @param charge [String?] Only return refunds for the charge specified by this charge ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return refunds that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ApiMethodRefundList, Integer, Hash)] Stripe::ApiMethodRefundList, response status code and response headers
    def get_refunds_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ApiMethodRefundList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_refunds(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RefundsApi#get_refunds\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ApiMethodRefundList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return refunds for the PaymentIntent specified by this ID.
    # @optional @param charge [String?] Only return refunds for the charge specified by this charge ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return refunds that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_refunds(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_refunds(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, created: created, expand: expand).execute(&block)
    end

    GET_REFUNDS_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_get_refunds(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RefundsApi.get_refunds ..." }
      end

      if client_side_validation?
        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_REFUNDS_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/refunds"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RefundsApi.get_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing refund.</p>
    # @required @param refund [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Refund]
    def get_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Refund
      data, _status_code, _headers = get_refunds_refund_with_http_info(refund: refund, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Refund, Integer, Hash)] Stripe::Refund, response status code and response headers
    def get_refunds_refund_with_http_info(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Refund, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_refunds_refund(refund: refund, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RefundsApi#get_refunds_refund\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Refund.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_refunds_refund(refund: refund, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RefundsApi.get_refunds_refund ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"refund\" is required and cannot be null") if refund.nil?
      end

      # resource path
      local_var_path = "/v1/refunds/{refund}".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RefundsApi.get_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>  <p>Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.</p>  <p>You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.</p>  <p>Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.</p>
    # @optional @param amount [Int32?]
    # @optional @param charge [String?] The identifier of the charge to refund.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] Customer whose customer balance to refund from.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param instructions_email [String?] For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param origin [String?] Origin of the refund
    # @optional @param payment_intent [String?] The identifier of the PaymentIntent to refund.
    # @optional @param reason [String?] String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
    # @optional @param refund_application_fee [Bool?] Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
    # @optional @param reverse_transfer [Bool?] Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge.
    # @return [Stripe::Refund]
    def post_refunds(
      *,
      amount : Int64? = nil,
      charge : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil,
      instructions_email : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      origin : String? = nil,
      payment_intent : String? = nil,
      reason : String? = nil,
      refund_application_fee : Bool? = nil,
      reverse_transfer : Bool? = nil
    ) : Stripe::Refund
      data, _status_code, _headers = post_refunds_with_http_info(amount: amount, charge: charge, currency: currency, customer: customer, expand: expand, instructions_email: instructions_email, metadata: metadata, origin: origin, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)
      data
    end

    # &lt;p&gt;When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.&lt;/p&gt;  &lt;p&gt;Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.&lt;/p&gt;
    # @optional @param amount [Int32?]
    # @optional @param charge [String?] The identifier of the charge to refund.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] Customer whose customer balance to refund from.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param instructions_email [String?] For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param origin [String?] Origin of the refund
    # @optional @param payment_intent [String?] The identifier of the PaymentIntent to refund.
    # @optional @param reason [String?] String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
    # @optional @param refund_application_fee [Bool?] Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
    # @optional @param reverse_transfer [Bool?] Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge.
    # @return [Tuple(Stripe::Refund, Integer, Hash)] Stripe::Refund, response status code and response headers
    def post_refunds_with_http_info(
      *,
      amount : Int64? = nil,
      charge : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil,
      instructions_email : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      origin : String? = nil,
      payment_intent : String? = nil,
      reason : String? = nil,
      refund_application_fee : Bool? = nil,
      reverse_transfer : Bool? = nil
    ) : Tuple(Stripe::Refund, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_refunds(amount: amount, charge: charge, currency: currency, customer: customer, expand: expand, instructions_email: instructions_email, metadata: metadata, origin: origin, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RefundsApi#post_refunds\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Refund.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.&lt;/p&gt;  &lt;p&gt;Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.&lt;/p&gt;
    # @optional @param amount [Int32?]
    # @optional @param charge [String?] The identifier of the charge to refund.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param customer [String?] Customer whose customer balance to refund from.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param instructions_email [String?] For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param origin [String?] Origin of the refund
    # @optional @param payment_intent [String?] The identifier of the PaymentIntent to refund.
    # @optional @param reason [String?] String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
    # @optional @param refund_application_fee [Bool?] Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
    # @optional @param reverse_transfer [Bool?] Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge.
    # @return nil
    def post_refunds(
      *,
      amount : Int64? = nil,
      charge : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil,
      instructions_email : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      origin : String? = nil,
      payment_intent : String? = nil,
      reason : String? = nil,
      refund_application_fee : Bool? = nil,
      reverse_transfer : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_refunds(amount: amount, charge: charge, currency: currency, customer: customer, expand: expand, instructions_email: instructions_email, metadata: metadata, origin: origin, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer).execute(&block)
    end

    POST_REFUNDS_MAX_LENGTH_FOR_CHARGE         = 5000
    POST_REFUNDS_MAX_LENGTH_FOR_CUSTOMER       = 5000
    POST_REFUNDS_VALID_VALUES_FOR_ORIGIN       = String.static_array("customer_balance")
    POST_REFUNDS_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000
    POST_REFUNDS_MAX_LENGTH_FOR_REASON         = 5000
    POST_REFUNDS_VALID_VALUES_FOR_REASON       = String.static_array("duplicate", "fraudulent", "requested_by_customer")

    # @return Crest::Request
    def build_api_request_for_post_refunds(
      *,
      amount : Int64? = nil,
      charge : String? = nil,
      currency : String? = nil,
      customer : String? = nil,
      expand : Array(String)? = nil,
      instructions_email : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      origin : String? = nil,
      payment_intent : String? = nil,
      reason : String? = nil,
      refund_application_fee : Bool? = nil,
      reverse_transfer : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RefundsApi.post_refunds ..." }
      end

      if client_side_validation?
        unless (_charge = charge).nil?
          OpenApi::PrimitiveValidator.validate_max_length("charge", charge.to_s.size, POST_REFUNDS_MAX_LENGTH_FOR_CHARGE)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_REFUNDS_MAX_LENGTH_FOR_CUSTOMER)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_origin = origin).nil?
          OpenApi::EnumValidator.validate("origin", _origin, POST_REFUNDS_VALID_VALUES_FOR_ORIGIN)
        end
        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, POST_REFUNDS_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end
        unless (_reason = reason).nil?
          OpenApi::EnumValidator.validate("reason", _reason, POST_REFUNDS_VALID_VALUES_FOR_REASON)
        end
      end

      # resource path
      local_var_path = "/v1/refunds"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("charge", charge.to_s) if !charge.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("instructions_email", instructions_email.to_s) if !instructions_email.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("origin", origin.to_s) if !origin.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_intent", payment_intent.to_s) if !payment_intent.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("reason", reason.to_s) if !reason.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("refund_application_fee", refund_application_fee.to_s) if !refund_application_fee.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("reverse_transfer", reverse_transfer.to_s) if !reverse_transfer.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "RefundsApi.post_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>  <p>This request only accepts <code>metadata</code> as an argument.</p>
    # @required @param refund [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::Refund]
    def post_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::Refund
      data, _status_code, _headers = post_refunds_refund_with_http_info(refund: refund, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::Refund, Integer, Hash)] Stripe::Refund, response status code and response headers
    def post_refunds_refund_with_http_info(
      *,
      refund : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::Refund, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_refunds_refund(refund: refund, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RefundsApi#post_refunds_refund\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Refund.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_refunds_refund(refund: refund, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RefundsApi.post_refunds_refund ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"refund\" is required and cannot be null") if refund.nil?

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/refunds/{refund}".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "RefundsApi.post_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
