#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class RefundsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return refunds for the PaymentIntent specified by this ID.
    # @optional @param charge [String?] Only return refunds for the charge specified by this charge ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::ApiMethodRefundList]
    def get_refunds(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::ApiMethodRefundList
      data, _status_code, _headers = get_refunds_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return refunds for the PaymentIntent specified by this ID.
    # @optional @param charge [String?] Only return refunds for the charge specified by this charge ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::ApiMethodRefundList, Integer, Hash)] Stripe::ApiMethodRefundList, response status code and response headers
    def get_refunds_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::ApiMethodRefundList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_refunds(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RefundsApi#get_refunds\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ApiMethodRefundList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param payment_intent [String?] Only return refunds for the PaymentIntent specified by this ID.
    # @optional @param charge [String?] Only return refunds for the charge specified by this charge ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_refunds(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_refunds(ending_before: ending_before, starting_after: starting_after, limit: limit, payment_intent: payment_intent, charge: charge, expand: expand, created: created).execute(&block)
    end

    GET_REFUNDS_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_get_refunds(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      payment_intent : String? = nil,
      charge : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RefundsApi.get_refunds ..." }
      end

      if client_side_validation
        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, GET_REFUNDS_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/refunds"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RefundsApi.get_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing refund.</p>
    # @required @param refund [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Refund]
    def get_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Refund
      data, _status_code, _headers = get_refunds_refund_with_http_info(refund: refund, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Refund, Integer, Hash)] Stripe::Refund, response status code and response headers
    def get_refunds_refund_with_http_info(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Refund, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_refunds_refund(refund: refund, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RefundsApi#get_refunds_refund\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Refund.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_refunds_refund(refund: refund, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_refunds_refund(
      *,
      refund : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RefundsApi.get_refunds_refund ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"refund\" is required and cannot be null") if refund.nil?
      end

      # resource path
      local_var_path = "/v1/refunds/{refund}".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RefundsApi.get_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create a refund.</p>
    # @optional @param post_refunds_request [Stripe::PostRefundsRequest?]
    # @return [Stripe::Refund]
    def post_refunds(
      *,
      post_refunds_request : Stripe::PostRefundsRequest? = nil
    ) : Stripe::Refund
      data, _status_code, _headers = post_refunds_with_http_info(post_refunds_request: post_refunds_request)
      data
    end

    # &lt;p&gt;Create a refund.&lt;/p&gt;
    # @optional @param post_refunds_request [Stripe::PostRefundsRequest?]
    # @return [Tuple(Stripe::Refund, Integer, Hash)] Stripe::Refund, response status code and response headers
    def post_refunds_with_http_info(
      *,
      post_refunds_request : Stripe::PostRefundsRequest? = nil
    ) : Tuple(Stripe::Refund, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_refunds(post_refunds_request: post_refunds_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RefundsApi#post_refunds\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Refund.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Create a refund.&lt;/p&gt;
    # @optional @param post_refunds_request [Stripe::PostRefundsRequest?]
    # @return nil
    def post_refunds(
      *,
      post_refunds_request : Stripe::PostRefundsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_refunds(post_refunds_request: post_refunds_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_refunds(
      *,
      post_refunds_request : Stripe::PostRefundsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RefundsApi.post_refunds ..." }
      end

      if client_side_validation
        unless (_post_refunds_request = post_refunds_request).nil?
          _post_refunds_request.validate if _post_refunds_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/refunds"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_refunds_request, content_type: header_params["Content-Type"]?) if !post_refunds_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "RefundsApi.post_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request only accepts <code>metadata</code> as an argument.</p>
    # @required @param refund [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Stripe::Refund]
    def post_refunds_refund(
      *,
      refund : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Stripe::Refund
      data, _status_code, _headers = post_refunds_refund_with_http_info(refund: refund, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)
      data
    end

    # &lt;p&gt;Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Tuple(Stripe::Refund, Integer, Hash)] Stripe::Refund, response status code and response headers
    def post_refunds_refund_with_http_info(
      *,
      refund : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Tuple(Stripe::Refund, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_refunds_refund(refund: refund, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: RefundsApi#post_refunds_refund\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Refund.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
    # @required @param refund [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return nil
    def post_refunds_refund(
      *,
      refund : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_refunds_refund(refund: refund, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_refunds_refund(
      *,
      refund : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: RefundsApi.post_refunds_refund ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"refund\" is required and cannot be null") if refund.nil?

        unless (_post_application_fees_fee_refunds_id_request = post_application_fees_fee_refunds_id_request).nil?
          _post_application_fees_fee_refunds_id_request.validate if _post_application_fees_fee_refunds_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/refunds/{refund}".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_application_fees_fee_refunds_id_request, content_type: header_params["Content-Type"]?) if !post_application_fees_fee_refunds_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "RefundsApi.post_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
