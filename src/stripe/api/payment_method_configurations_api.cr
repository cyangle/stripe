#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/error"
require "../models/get_payment_method_configurations_application_parameter"

require "../models/payment_method_config_resource_payment_method_configurations_list"
require "../models/payment_method_configuration"
require "../models/payment_method_param"

module Stripe
  class PaymentMethodConfigurationsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>List payment method configurations</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param application [Stripe::GetPaymentMethodConfigurationsApplicationParameter?] The Connect application to filter by.
    # @return [Stripe::PaymentMethodConfigResourcePaymentMethodConfigurationsList]
    def get_payment_method_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      application : Stripe::GetPaymentMethodConfigurationsApplicationParameter? = nil
    ) : Stripe::PaymentMethodConfigResourcePaymentMethodConfigurationsList
      data, _status_code, _headers = get_payment_method_configurations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, application: application)
      data
    end

    # &lt;p&gt;List payment method configurations&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param application [Stripe::GetPaymentMethodConfigurationsApplicationParameter?] The Connect application to filter by.
    # @return [Tuple(Stripe::PaymentMethodConfigResourcePaymentMethodConfigurationsList, Integer, Hash)] Stripe::PaymentMethodConfigResourcePaymentMethodConfigurationsList, response status code and response headers
    def get_payment_method_configurations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      application : Stripe::GetPaymentMethodConfigurationsApplicationParameter? = nil
    ) : Tuple(Stripe::PaymentMethodConfigResourcePaymentMethodConfigurationsList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_method_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, application: application)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodConfigurationsApi#get_payment_method_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodConfigResourcePaymentMethodConfigurationsList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;List payment method configurations&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param application [Stripe::GetPaymentMethodConfigurationsApplicationParameter?] The Connect application to filter by.
    # @return nil
    def get_payment_method_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      application : Stripe::GetPaymentMethodConfigurationsApplicationParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_method_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, application: application).execute(&block)
    end

    GET_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_method_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      application : Stripe::GetPaymentMethodConfigurationsApplicationParameter? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodConfigurationsApi.get_payment_method_configurations ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_application = application).nil?
          _application.validate if _application.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_configurations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["application"] = application.to_s if !application.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodConfigurationsApi.get_payment_method_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve payment method configuration</p>
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentMethodConfiguration]
    def get_payment_method_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentMethodConfiguration
      data, _status_code, _headers = get_payment_method_configurations_configuration_with_http_info(configuration: configuration, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve payment method configuration&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentMethodConfiguration, Integer, Hash)] Stripe::PaymentMethodConfiguration, response status code and response headers
    def get_payment_method_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentMethodConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_method_configurations_configuration(configuration: configuration, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodConfigurationsApi#get_payment_method_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve payment method configuration&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_method_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_method_configurations_configuration(configuration: configuration, expand: expand).execute(&block)
    end

    GET_PAYMENT_METHOD_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_method_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodConfigurationsApi.get_payment_method_configurations_configuration ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, GET_PAYMENT_METHOD_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentMethodConfigurationsApi.get_payment_method_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a payment method configuration</p>
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param affirm [Stripe::PaymentMethodParam?]
    # @optional @param afterpay_clearpay [Stripe::PaymentMethodParam?]
    # @optional @param alipay [Stripe::PaymentMethodParam?]
    # @optional @param amazon_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay_later [Stripe::PaymentMethodParam?]
    # @optional @param au_becs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bacs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bancontact [Stripe::PaymentMethodParam?]
    # @optional @param blik [Stripe::PaymentMethodParam?]
    # @optional @param boleto [Stripe::PaymentMethodParam?]
    # @optional @param card [Stripe::PaymentMethodParam?]
    # @optional @param cartes_bancaires [Stripe::PaymentMethodParam?]
    # @optional @param cashapp [Stripe::PaymentMethodParam?]
    # @optional @param customer_balance [Stripe::PaymentMethodParam?]
    # @optional @param eps [Stripe::PaymentMethodParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodParam?]
    # @optional @param giropay [Stripe::PaymentMethodParam?]
    # @optional @param google_pay [Stripe::PaymentMethodParam?]
    # @optional @param grabpay [Stripe::PaymentMethodParam?]
    # @optional @param ideal [Stripe::PaymentMethodParam?]
    # @optional @param jcb [Stripe::PaymentMethodParam?]
    # @optional @param klarna [Stripe::PaymentMethodParam?]
    # @optional @param konbini [Stripe::PaymentMethodParam?]
    # @optional @param link [Stripe::PaymentMethodParam?]
    # @optional @param mobilepay [Stripe::PaymentMethodParam?]
    # @optional @param multibanco [Stripe::PaymentMethodParam?]
    # @optional @param name [String?] Configuration name.
    # @optional @param oxxo [Stripe::PaymentMethodParam?]
    # @optional @param p24 [Stripe::PaymentMethodParam?]
    # @optional @param parent [String?] Configuration's parent configuration. Specify to create a child configuration.
    # @optional @param paynow [Stripe::PaymentMethodParam?]
    # @optional @param paypal [Stripe::PaymentMethodParam?]
    # @optional @param promptpay [Stripe::PaymentMethodParam?]
    # @optional @param revolut_pay [Stripe::PaymentMethodParam?]
    # @optional @param sepa_debit [Stripe::PaymentMethodParam?]
    # @optional @param sofort [Stripe::PaymentMethodParam?]
    # @optional @param swish [Stripe::PaymentMethodParam?]
    # @optional @param twint [Stripe::PaymentMethodParam?]
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [Stripe::PaymentMethodParam?]
    # @optional @param zip [Stripe::PaymentMethodParam?]
    # @return [Stripe::PaymentMethodConfiguration]
    def post_payment_method_configurations(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      parent : String? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil
    ) : Stripe::PaymentMethodConfiguration
      data, _status_code, _headers = post_payment_method_configurations_with_http_info(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, amazon_pay: amazon_pay, apple_pay: apple_pay, apple_pay_later: apple_pay_later, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, blik: blik, boleto: boleto, card: card, cartes_bancaires: cartes_bancaires, cashapp: cashapp, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, google_pay: google_pay, grabpay: grabpay, ideal: ideal, jcb: jcb, klarna: klarna, konbini: konbini, link: link, mobilepay: mobilepay, multibanco: multibanco, name: name, oxxo: oxxo, p24: p24, parent: parent, paynow: paynow, paypal: paypal, promptpay: promptpay, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip)
      data
    end

    # &lt;p&gt;Creates a payment method configuration&lt;/p&gt;
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param affirm [Stripe::PaymentMethodParam?]
    # @optional @param afterpay_clearpay [Stripe::PaymentMethodParam?]
    # @optional @param alipay [Stripe::PaymentMethodParam?]
    # @optional @param amazon_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay_later [Stripe::PaymentMethodParam?]
    # @optional @param au_becs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bacs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bancontact [Stripe::PaymentMethodParam?]
    # @optional @param blik [Stripe::PaymentMethodParam?]
    # @optional @param boleto [Stripe::PaymentMethodParam?]
    # @optional @param card [Stripe::PaymentMethodParam?]
    # @optional @param cartes_bancaires [Stripe::PaymentMethodParam?]
    # @optional @param cashapp [Stripe::PaymentMethodParam?]
    # @optional @param customer_balance [Stripe::PaymentMethodParam?]
    # @optional @param eps [Stripe::PaymentMethodParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodParam?]
    # @optional @param giropay [Stripe::PaymentMethodParam?]
    # @optional @param google_pay [Stripe::PaymentMethodParam?]
    # @optional @param grabpay [Stripe::PaymentMethodParam?]
    # @optional @param ideal [Stripe::PaymentMethodParam?]
    # @optional @param jcb [Stripe::PaymentMethodParam?]
    # @optional @param klarna [Stripe::PaymentMethodParam?]
    # @optional @param konbini [Stripe::PaymentMethodParam?]
    # @optional @param link [Stripe::PaymentMethodParam?]
    # @optional @param mobilepay [Stripe::PaymentMethodParam?]
    # @optional @param multibanco [Stripe::PaymentMethodParam?]
    # @optional @param name [String?] Configuration name.
    # @optional @param oxxo [Stripe::PaymentMethodParam?]
    # @optional @param p24 [Stripe::PaymentMethodParam?]
    # @optional @param parent [String?] Configuration's parent configuration. Specify to create a child configuration.
    # @optional @param paynow [Stripe::PaymentMethodParam?]
    # @optional @param paypal [Stripe::PaymentMethodParam?]
    # @optional @param promptpay [Stripe::PaymentMethodParam?]
    # @optional @param revolut_pay [Stripe::PaymentMethodParam?]
    # @optional @param sepa_debit [Stripe::PaymentMethodParam?]
    # @optional @param sofort [Stripe::PaymentMethodParam?]
    # @optional @param swish [Stripe::PaymentMethodParam?]
    # @optional @param twint [Stripe::PaymentMethodParam?]
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [Stripe::PaymentMethodParam?]
    # @optional @param zip [Stripe::PaymentMethodParam?]
    # @return [Tuple(Stripe::PaymentMethodConfiguration, Integer, Hash)] Stripe::PaymentMethodConfiguration, response status code and response headers
    def post_payment_method_configurations_with_http_info(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      parent : String? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil
    ) : Tuple(Stripe::PaymentMethodConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_method_configurations(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, amazon_pay: amazon_pay, apple_pay: apple_pay, apple_pay_later: apple_pay_later, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, blik: blik, boleto: boleto, card: card, cartes_bancaires: cartes_bancaires, cashapp: cashapp, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, google_pay: google_pay, grabpay: grabpay, ideal: ideal, jcb: jcb, klarna: klarna, konbini: konbini, link: link, mobilepay: mobilepay, multibanco: multibanco, name: name, oxxo: oxxo, p24: p24, parent: parent, paynow: paynow, paypal: paypal, promptpay: promptpay, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodConfigurationsApi#post_payment_method_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a payment method configuration&lt;/p&gt;
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param affirm [Stripe::PaymentMethodParam?]
    # @optional @param afterpay_clearpay [Stripe::PaymentMethodParam?]
    # @optional @param alipay [Stripe::PaymentMethodParam?]
    # @optional @param amazon_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay_later [Stripe::PaymentMethodParam?]
    # @optional @param au_becs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bacs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bancontact [Stripe::PaymentMethodParam?]
    # @optional @param blik [Stripe::PaymentMethodParam?]
    # @optional @param boleto [Stripe::PaymentMethodParam?]
    # @optional @param card [Stripe::PaymentMethodParam?]
    # @optional @param cartes_bancaires [Stripe::PaymentMethodParam?]
    # @optional @param cashapp [Stripe::PaymentMethodParam?]
    # @optional @param customer_balance [Stripe::PaymentMethodParam?]
    # @optional @param eps [Stripe::PaymentMethodParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodParam?]
    # @optional @param giropay [Stripe::PaymentMethodParam?]
    # @optional @param google_pay [Stripe::PaymentMethodParam?]
    # @optional @param grabpay [Stripe::PaymentMethodParam?]
    # @optional @param ideal [Stripe::PaymentMethodParam?]
    # @optional @param jcb [Stripe::PaymentMethodParam?]
    # @optional @param klarna [Stripe::PaymentMethodParam?]
    # @optional @param konbini [Stripe::PaymentMethodParam?]
    # @optional @param link [Stripe::PaymentMethodParam?]
    # @optional @param mobilepay [Stripe::PaymentMethodParam?]
    # @optional @param multibanco [Stripe::PaymentMethodParam?]
    # @optional @param name [String?] Configuration name.
    # @optional @param oxxo [Stripe::PaymentMethodParam?]
    # @optional @param p24 [Stripe::PaymentMethodParam?]
    # @optional @param parent [String?] Configuration's parent configuration. Specify to create a child configuration.
    # @optional @param paynow [Stripe::PaymentMethodParam?]
    # @optional @param paypal [Stripe::PaymentMethodParam?]
    # @optional @param promptpay [Stripe::PaymentMethodParam?]
    # @optional @param revolut_pay [Stripe::PaymentMethodParam?]
    # @optional @param sepa_debit [Stripe::PaymentMethodParam?]
    # @optional @param sofort [Stripe::PaymentMethodParam?]
    # @optional @param swish [Stripe::PaymentMethodParam?]
    # @optional @param twint [Stripe::PaymentMethodParam?]
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [Stripe::PaymentMethodParam?]
    # @optional @param zip [Stripe::PaymentMethodParam?]
    # @return nil
    def post_payment_method_configurations(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      parent : String? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_method_configurations(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, amazon_pay: amazon_pay, apple_pay: apple_pay, apple_pay_later: apple_pay_later, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, blik: blik, boleto: boleto, card: card, cartes_bancaires: cartes_bancaires, cashapp: cashapp, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, google_pay: google_pay, grabpay: grabpay, ideal: ideal, jcb: jcb, klarna: klarna, konbini: konbini, link: link, mobilepay: mobilepay, multibanco: multibanco, name: name, oxxo: oxxo, p24: p24, parent: parent, paynow: paynow, paypal: paypal, promptpay: promptpay, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip).execute(&block)
    end

    POST_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_NAME   = 100
    POST_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_PARENT = 100

    # @return Crest::Request
    def build_api_request_for_post_payment_method_configurations(
      *,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      parent : String? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodConfigurationsApi.post_payment_method_configurations ..." }
      end

      if client_side_validation?
        unless (_acss_debit = acss_debit).nil?
          _acss_debit.validate if _acss_debit.is_a?(OpenApi::Validatable)
        end
        unless (_affirm = affirm).nil?
          _affirm.validate if _affirm.is_a?(OpenApi::Validatable)
        end
        unless (_afterpay_clearpay = afterpay_clearpay).nil?
          _afterpay_clearpay.validate if _afterpay_clearpay.is_a?(OpenApi::Validatable)
        end
        unless (_alipay = alipay).nil?
          _alipay.validate if _alipay.is_a?(OpenApi::Validatable)
        end
        unless (_amazon_pay = amazon_pay).nil?
          _amazon_pay.validate if _amazon_pay.is_a?(OpenApi::Validatable)
        end
        unless (_apple_pay = apple_pay).nil?
          _apple_pay.validate if _apple_pay.is_a?(OpenApi::Validatable)
        end
        unless (_apple_pay_later = apple_pay_later).nil?
          _apple_pay_later.validate if _apple_pay_later.is_a?(OpenApi::Validatable)
        end
        unless (_au_becs_debit = au_becs_debit).nil?
          _au_becs_debit.validate if _au_becs_debit.is_a?(OpenApi::Validatable)
        end
        unless (_bacs_debit = bacs_debit).nil?
          _bacs_debit.validate if _bacs_debit.is_a?(OpenApi::Validatable)
        end
        unless (_bancontact = bancontact).nil?
          _bancontact.validate if _bancontact.is_a?(OpenApi::Validatable)
        end
        unless (_blik = blik).nil?
          _blik.validate if _blik.is_a?(OpenApi::Validatable)
        end
        unless (_boleto = boleto).nil?
          _boleto.validate if _boleto.is_a?(OpenApi::Validatable)
        end
        unless (_card = card).nil?
          _card.validate if _card.is_a?(OpenApi::Validatable)
        end
        unless (_cartes_bancaires = cartes_bancaires).nil?
          _cartes_bancaires.validate if _cartes_bancaires.is_a?(OpenApi::Validatable)
        end
        unless (_cashapp = cashapp).nil?
          _cashapp.validate if _cashapp.is_a?(OpenApi::Validatable)
        end
        unless (_customer_balance = customer_balance).nil?
          _customer_balance.validate if _customer_balance.is_a?(OpenApi::Validatable)
        end
        unless (_eps = eps).nil?
          _eps.validate if _eps.is_a?(OpenApi::Validatable)
        end

        unless (_fpx = fpx).nil?
          _fpx.validate if _fpx.is_a?(OpenApi::Validatable)
        end
        unless (_giropay = giropay).nil?
          _giropay.validate if _giropay.is_a?(OpenApi::Validatable)
        end
        unless (_google_pay = google_pay).nil?
          _google_pay.validate if _google_pay.is_a?(OpenApi::Validatable)
        end
        unless (_grabpay = grabpay).nil?
          _grabpay.validate if _grabpay.is_a?(OpenApi::Validatable)
        end
        unless (_ideal = ideal).nil?
          _ideal.validate if _ideal.is_a?(OpenApi::Validatable)
        end
        unless (_jcb = jcb).nil?
          _jcb.validate if _jcb.is_a?(OpenApi::Validatable)
        end
        unless (_klarna = klarna).nil?
          _klarna.validate if _klarna.is_a?(OpenApi::Validatable)
        end
        unless (_konbini = konbini).nil?
          _konbini.validate if _konbini.is_a?(OpenApi::Validatable)
        end
        unless (_link = link).nil?
          _link.validate if _link.is_a?(OpenApi::Validatable)
        end
        unless (_mobilepay = mobilepay).nil?
          _mobilepay.validate if _mobilepay.is_a?(OpenApi::Validatable)
        end
        unless (_multibanco = multibanco).nil?
          _multibanco.validate if _multibanco.is_a?(OpenApi::Validatable)
        end
        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_NAME)
        end
        unless (_oxxo = oxxo).nil?
          _oxxo.validate if _oxxo.is_a?(OpenApi::Validatable)
        end
        unless (_p24 = p24).nil?
          _p24.validate if _p24.is_a?(OpenApi::Validatable)
        end
        unless (_parent = parent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("parent", parent.to_s.size, POST_PAYMENT_METHOD_CONFIGURATIONS_MAX_LENGTH_FOR_PARENT)
        end
        unless (_paynow = paynow).nil?
          _paynow.validate if _paynow.is_a?(OpenApi::Validatable)
        end
        unless (_paypal = paypal).nil?
          _paypal.validate if _paypal.is_a?(OpenApi::Validatable)
        end
        unless (_promptpay = promptpay).nil?
          _promptpay.validate if _promptpay.is_a?(OpenApi::Validatable)
        end
        unless (_revolut_pay = revolut_pay).nil?
          _revolut_pay.validate if _revolut_pay.is_a?(OpenApi::Validatable)
        end
        unless (_sepa_debit = sepa_debit).nil?
          _sepa_debit.validate if _sepa_debit.is_a?(OpenApi::Validatable)
        end
        unless (_sofort = sofort).nil?
          _sofort.validate if _sofort.is_a?(OpenApi::Validatable)
        end
        unless (_swish = swish).nil?
          _swish.validate if _swish.is_a?(OpenApi::Validatable)
        end
        unless (_twint = twint).nil?
          _twint.validate if _twint.is_a?(OpenApi::Validatable)
        end
        unless (_us_bank_account = us_bank_account).nil?
          _us_bank_account.validate if _us_bank_account.is_a?(OpenApi::Validatable)
        end
        unless (_wechat_pay = wechat_pay).nil?
          _wechat_pay.validate if _wechat_pay.is_a?(OpenApi::Validatable)
        end
        unless (_zip = zip).nil?
          _zip.validate if _zip.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_configurations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(acss_debit.to_json), "acss_debit")) if !acss_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(affirm.to_json), "affirm")) if !affirm.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(afterpay_clearpay.to_json), "afterpay_clearpay")) if !afterpay_clearpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(alipay.to_json), "alipay")) if !alipay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(amazon_pay.to_json), "amazon_pay")) if !amazon_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(apple_pay.to_json), "apple_pay")) if !apple_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(apple_pay_later.to_json), "apple_pay_later")) if !apple_pay_later.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(au_becs_debit.to_json), "au_becs_debit")) if !au_becs_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bacs_debit.to_json), "bacs_debit")) if !bacs_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bancontact.to_json), "bancontact")) if !bancontact.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(blik.to_json), "blik")) if !blik.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(boleto.to_json), "boleto")) if !boleto.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(card.to_json), "card")) if !card.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cartes_bancaires.to_json), "cartes_bancaires")) if !cartes_bancaires.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cashapp.to_json), "cashapp")) if !cashapp.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(customer_balance.to_json), "customer_balance")) if !customer_balance.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(eps.to_json), "eps")) if !eps.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(fpx.to_json), "fpx")) if !fpx.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(giropay.to_json), "giropay")) if !giropay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(google_pay.to_json), "google_pay")) if !google_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(grabpay.to_json), "grabpay")) if !grabpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(ideal.to_json), "ideal")) if !ideal.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(jcb.to_json), "jcb")) if !jcb.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(klarna.to_json), "klarna")) if !klarna.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(konbini.to_json), "konbini")) if !konbini.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(link.to_json), "link")) if !link.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(mobilepay.to_json), "mobilepay")) if !mobilepay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(multibanco.to_json), "multibanco")) if !multibanco.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(oxxo.to_json), "oxxo")) if !oxxo.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(p24.to_json), "p24")) if !p24.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("parent", parent.to_s) if !parent.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(paynow.to_json), "paynow")) if !paynow.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(paypal.to_json), "paypal")) if !paypal.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(promptpay.to_json), "promptpay")) if !promptpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(revolut_pay.to_json), "revolut_pay")) if !revolut_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(sepa_debit.to_json), "sepa_debit")) if !sepa_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(sofort.to_json), "sofort")) if !sofort.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(swish.to_json), "swish")) if !swish.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(twint.to_json), "twint")) if !twint.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(us_bank_account.to_json), "us_bank_account")) if !us_bank_account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(wechat_pay.to_json), "wechat_pay")) if !wechat_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(zip.to_json), "zip")) if !zip.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodConfigurationsApi.post_payment_method_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Update payment method configuration</p>
    # @required @param configuration [String?]
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param active [Bool?] Whether the configuration can be used for new payments.
    # @optional @param affirm [Stripe::PaymentMethodParam?]
    # @optional @param afterpay_clearpay [Stripe::PaymentMethodParam?]
    # @optional @param alipay [Stripe::PaymentMethodParam?]
    # @optional @param amazon_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay_later [Stripe::PaymentMethodParam?]
    # @optional @param au_becs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bacs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bancontact [Stripe::PaymentMethodParam?]
    # @optional @param blik [Stripe::PaymentMethodParam?]
    # @optional @param boleto [Stripe::PaymentMethodParam?]
    # @optional @param card [Stripe::PaymentMethodParam?]
    # @optional @param cartes_bancaires [Stripe::PaymentMethodParam?]
    # @optional @param cashapp [Stripe::PaymentMethodParam?]
    # @optional @param customer_balance [Stripe::PaymentMethodParam?]
    # @optional @param eps [Stripe::PaymentMethodParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodParam?]
    # @optional @param giropay [Stripe::PaymentMethodParam?]
    # @optional @param google_pay [Stripe::PaymentMethodParam?]
    # @optional @param grabpay [Stripe::PaymentMethodParam?]
    # @optional @param ideal [Stripe::PaymentMethodParam?]
    # @optional @param jcb [Stripe::PaymentMethodParam?]
    # @optional @param klarna [Stripe::PaymentMethodParam?]
    # @optional @param konbini [Stripe::PaymentMethodParam?]
    # @optional @param link [Stripe::PaymentMethodParam?]
    # @optional @param mobilepay [Stripe::PaymentMethodParam?]
    # @optional @param multibanco [Stripe::PaymentMethodParam?]
    # @optional @param name [String?] Configuration name.
    # @optional @param oxxo [Stripe::PaymentMethodParam?]
    # @optional @param p24 [Stripe::PaymentMethodParam?]
    # @optional @param paynow [Stripe::PaymentMethodParam?]
    # @optional @param paypal [Stripe::PaymentMethodParam?]
    # @optional @param promptpay [Stripe::PaymentMethodParam?]
    # @optional @param revolut_pay [Stripe::PaymentMethodParam?]
    # @optional @param sepa_debit [Stripe::PaymentMethodParam?]
    # @optional @param sofort [Stripe::PaymentMethodParam?]
    # @optional @param swish [Stripe::PaymentMethodParam?]
    # @optional @param twint [Stripe::PaymentMethodParam?]
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [Stripe::PaymentMethodParam?]
    # @optional @param zip [Stripe::PaymentMethodParam?]
    # @return [Stripe::PaymentMethodConfiguration]
    def post_payment_method_configurations_configuration(
      *,
      configuration : String? = nil,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      active : Bool? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil
    ) : Stripe::PaymentMethodConfiguration
      data, _status_code, _headers = post_payment_method_configurations_configuration_with_http_info(configuration: configuration, acss_debit: acss_debit, active: active, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, amazon_pay: amazon_pay, apple_pay: apple_pay, apple_pay_later: apple_pay_later, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, blik: blik, boleto: boleto, card: card, cartes_bancaires: cartes_bancaires, cashapp: cashapp, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, google_pay: google_pay, grabpay: grabpay, ideal: ideal, jcb: jcb, klarna: klarna, konbini: konbini, link: link, mobilepay: mobilepay, multibanco: multibanco, name: name, oxxo: oxxo, p24: p24, paynow: paynow, paypal: paypal, promptpay: promptpay, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip)
      data
    end

    # &lt;p&gt;Update payment method configuration&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param active [Bool?] Whether the configuration can be used for new payments.
    # @optional @param affirm [Stripe::PaymentMethodParam?]
    # @optional @param afterpay_clearpay [Stripe::PaymentMethodParam?]
    # @optional @param alipay [Stripe::PaymentMethodParam?]
    # @optional @param amazon_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay_later [Stripe::PaymentMethodParam?]
    # @optional @param au_becs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bacs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bancontact [Stripe::PaymentMethodParam?]
    # @optional @param blik [Stripe::PaymentMethodParam?]
    # @optional @param boleto [Stripe::PaymentMethodParam?]
    # @optional @param card [Stripe::PaymentMethodParam?]
    # @optional @param cartes_bancaires [Stripe::PaymentMethodParam?]
    # @optional @param cashapp [Stripe::PaymentMethodParam?]
    # @optional @param customer_balance [Stripe::PaymentMethodParam?]
    # @optional @param eps [Stripe::PaymentMethodParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodParam?]
    # @optional @param giropay [Stripe::PaymentMethodParam?]
    # @optional @param google_pay [Stripe::PaymentMethodParam?]
    # @optional @param grabpay [Stripe::PaymentMethodParam?]
    # @optional @param ideal [Stripe::PaymentMethodParam?]
    # @optional @param jcb [Stripe::PaymentMethodParam?]
    # @optional @param klarna [Stripe::PaymentMethodParam?]
    # @optional @param konbini [Stripe::PaymentMethodParam?]
    # @optional @param link [Stripe::PaymentMethodParam?]
    # @optional @param mobilepay [Stripe::PaymentMethodParam?]
    # @optional @param multibanco [Stripe::PaymentMethodParam?]
    # @optional @param name [String?] Configuration name.
    # @optional @param oxxo [Stripe::PaymentMethodParam?]
    # @optional @param p24 [Stripe::PaymentMethodParam?]
    # @optional @param paynow [Stripe::PaymentMethodParam?]
    # @optional @param paypal [Stripe::PaymentMethodParam?]
    # @optional @param promptpay [Stripe::PaymentMethodParam?]
    # @optional @param revolut_pay [Stripe::PaymentMethodParam?]
    # @optional @param sepa_debit [Stripe::PaymentMethodParam?]
    # @optional @param sofort [Stripe::PaymentMethodParam?]
    # @optional @param swish [Stripe::PaymentMethodParam?]
    # @optional @param twint [Stripe::PaymentMethodParam?]
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [Stripe::PaymentMethodParam?]
    # @optional @param zip [Stripe::PaymentMethodParam?]
    # @return [Tuple(Stripe::PaymentMethodConfiguration, Integer, Hash)] Stripe::PaymentMethodConfiguration, response status code and response headers
    def post_payment_method_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      active : Bool? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil
    ) : Tuple(Stripe::PaymentMethodConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_method_configurations_configuration(configuration: configuration, acss_debit: acss_debit, active: active, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, amazon_pay: amazon_pay, apple_pay: apple_pay, apple_pay_later: apple_pay_later, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, blik: blik, boleto: boleto, card: card, cartes_bancaires: cartes_bancaires, cashapp: cashapp, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, google_pay: google_pay, grabpay: grabpay, ideal: ideal, jcb: jcb, klarna: klarna, konbini: konbini, link: link, mobilepay: mobilepay, multibanco: multibanco, name: name, oxxo: oxxo, p24: p24, paynow: paynow, paypal: paypal, promptpay: promptpay, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentMethodConfigurationsApi#post_payment_method_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentMethodConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Update payment method configuration&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param acss_debit [Stripe::PaymentMethodParam?]
    # @optional @param active [Bool?] Whether the configuration can be used for new payments.
    # @optional @param affirm [Stripe::PaymentMethodParam?]
    # @optional @param afterpay_clearpay [Stripe::PaymentMethodParam?]
    # @optional @param alipay [Stripe::PaymentMethodParam?]
    # @optional @param amazon_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay [Stripe::PaymentMethodParam?]
    # @optional @param apple_pay_later [Stripe::PaymentMethodParam?]
    # @optional @param au_becs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bacs_debit [Stripe::PaymentMethodParam?]
    # @optional @param bancontact [Stripe::PaymentMethodParam?]
    # @optional @param blik [Stripe::PaymentMethodParam?]
    # @optional @param boleto [Stripe::PaymentMethodParam?]
    # @optional @param card [Stripe::PaymentMethodParam?]
    # @optional @param cartes_bancaires [Stripe::PaymentMethodParam?]
    # @optional @param cashapp [Stripe::PaymentMethodParam?]
    # @optional @param customer_balance [Stripe::PaymentMethodParam?]
    # @optional @param eps [Stripe::PaymentMethodParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param fpx [Stripe::PaymentMethodParam?]
    # @optional @param giropay [Stripe::PaymentMethodParam?]
    # @optional @param google_pay [Stripe::PaymentMethodParam?]
    # @optional @param grabpay [Stripe::PaymentMethodParam?]
    # @optional @param ideal [Stripe::PaymentMethodParam?]
    # @optional @param jcb [Stripe::PaymentMethodParam?]
    # @optional @param klarna [Stripe::PaymentMethodParam?]
    # @optional @param konbini [Stripe::PaymentMethodParam?]
    # @optional @param link [Stripe::PaymentMethodParam?]
    # @optional @param mobilepay [Stripe::PaymentMethodParam?]
    # @optional @param multibanco [Stripe::PaymentMethodParam?]
    # @optional @param name [String?] Configuration name.
    # @optional @param oxxo [Stripe::PaymentMethodParam?]
    # @optional @param p24 [Stripe::PaymentMethodParam?]
    # @optional @param paynow [Stripe::PaymentMethodParam?]
    # @optional @param paypal [Stripe::PaymentMethodParam?]
    # @optional @param promptpay [Stripe::PaymentMethodParam?]
    # @optional @param revolut_pay [Stripe::PaymentMethodParam?]
    # @optional @param sepa_debit [Stripe::PaymentMethodParam?]
    # @optional @param sofort [Stripe::PaymentMethodParam?]
    # @optional @param swish [Stripe::PaymentMethodParam?]
    # @optional @param twint [Stripe::PaymentMethodParam?]
    # @optional @param us_bank_account [Stripe::PaymentMethodParam?]
    # @optional @param wechat_pay [Stripe::PaymentMethodParam?]
    # @optional @param zip [Stripe::PaymentMethodParam?]
    # @return nil
    def post_payment_method_configurations_configuration(
      *,
      configuration : String? = nil,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      active : Bool? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_method_configurations_configuration(configuration: configuration, acss_debit: acss_debit, active: active, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, amazon_pay: amazon_pay, apple_pay: apple_pay, apple_pay_later: apple_pay_later, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, blik: blik, boleto: boleto, card: card, cartes_bancaires: cartes_bancaires, cashapp: cashapp, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, google_pay: google_pay, grabpay: grabpay, ideal: ideal, jcb: jcb, klarna: klarna, konbini: konbini, link: link, mobilepay: mobilepay, multibanco: multibanco, name: name, oxxo: oxxo, p24: p24, paynow: paynow, paypal: paypal, promptpay: promptpay, revolut_pay: revolut_pay, sepa_debit: sepa_debit, sofort: sofort, swish: swish, twint: twint, us_bank_account: us_bank_account, wechat_pay: wechat_pay, zip: zip).execute(&block)
    end

    POST_PAYMENT_METHOD_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000
    POST_PAYMENT_METHOD_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_NAME          =  100

    # @return Crest::Request
    def build_api_request_for_post_payment_method_configurations_configuration(
      *,
      configuration : String? = nil,
      acss_debit : Stripe::PaymentMethodParam? = nil,
      active : Bool? = nil,
      affirm : Stripe::PaymentMethodParam? = nil,
      afterpay_clearpay : Stripe::PaymentMethodParam? = nil,
      alipay : Stripe::PaymentMethodParam? = nil,
      amazon_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay : Stripe::PaymentMethodParam? = nil,
      apple_pay_later : Stripe::PaymentMethodParam? = nil,
      au_becs_debit : Stripe::PaymentMethodParam? = nil,
      bacs_debit : Stripe::PaymentMethodParam? = nil,
      bancontact : Stripe::PaymentMethodParam? = nil,
      blik : Stripe::PaymentMethodParam? = nil,
      boleto : Stripe::PaymentMethodParam? = nil,
      card : Stripe::PaymentMethodParam? = nil,
      cartes_bancaires : Stripe::PaymentMethodParam? = nil,
      cashapp : Stripe::PaymentMethodParam? = nil,
      customer_balance : Stripe::PaymentMethodParam? = nil,
      eps : Stripe::PaymentMethodParam? = nil,
      expand : Array(String)? = nil,
      fpx : Stripe::PaymentMethodParam? = nil,
      giropay : Stripe::PaymentMethodParam? = nil,
      google_pay : Stripe::PaymentMethodParam? = nil,
      grabpay : Stripe::PaymentMethodParam? = nil,
      ideal : Stripe::PaymentMethodParam? = nil,
      jcb : Stripe::PaymentMethodParam? = nil,
      klarna : Stripe::PaymentMethodParam? = nil,
      konbini : Stripe::PaymentMethodParam? = nil,
      link : Stripe::PaymentMethodParam? = nil,
      mobilepay : Stripe::PaymentMethodParam? = nil,
      multibanco : Stripe::PaymentMethodParam? = nil,
      name : String? = nil,
      oxxo : Stripe::PaymentMethodParam? = nil,
      p24 : Stripe::PaymentMethodParam? = nil,
      paynow : Stripe::PaymentMethodParam? = nil,
      paypal : Stripe::PaymentMethodParam? = nil,
      promptpay : Stripe::PaymentMethodParam? = nil,
      revolut_pay : Stripe::PaymentMethodParam? = nil,
      sepa_debit : Stripe::PaymentMethodParam? = nil,
      sofort : Stripe::PaymentMethodParam? = nil,
      swish : Stripe::PaymentMethodParam? = nil,
      twint : Stripe::PaymentMethodParam? = nil,
      us_bank_account : Stripe::PaymentMethodParam? = nil,
      wechat_pay : Stripe::PaymentMethodParam? = nil,
      zip : Stripe::PaymentMethodParam? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentMethodConfigurationsApi.post_payment_method_configurations_configuration ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, POST_PAYMENT_METHOD_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
        unless (_acss_debit = acss_debit).nil?
          _acss_debit.validate if _acss_debit.is_a?(OpenApi::Validatable)
        end

        unless (_affirm = affirm).nil?
          _affirm.validate if _affirm.is_a?(OpenApi::Validatable)
        end
        unless (_afterpay_clearpay = afterpay_clearpay).nil?
          _afterpay_clearpay.validate if _afterpay_clearpay.is_a?(OpenApi::Validatable)
        end
        unless (_alipay = alipay).nil?
          _alipay.validate if _alipay.is_a?(OpenApi::Validatable)
        end
        unless (_amazon_pay = amazon_pay).nil?
          _amazon_pay.validate if _amazon_pay.is_a?(OpenApi::Validatable)
        end
        unless (_apple_pay = apple_pay).nil?
          _apple_pay.validate if _apple_pay.is_a?(OpenApi::Validatable)
        end
        unless (_apple_pay_later = apple_pay_later).nil?
          _apple_pay_later.validate if _apple_pay_later.is_a?(OpenApi::Validatable)
        end
        unless (_au_becs_debit = au_becs_debit).nil?
          _au_becs_debit.validate if _au_becs_debit.is_a?(OpenApi::Validatable)
        end
        unless (_bacs_debit = bacs_debit).nil?
          _bacs_debit.validate if _bacs_debit.is_a?(OpenApi::Validatable)
        end
        unless (_bancontact = bancontact).nil?
          _bancontact.validate if _bancontact.is_a?(OpenApi::Validatable)
        end
        unless (_blik = blik).nil?
          _blik.validate if _blik.is_a?(OpenApi::Validatable)
        end
        unless (_boleto = boleto).nil?
          _boleto.validate if _boleto.is_a?(OpenApi::Validatable)
        end
        unless (_card = card).nil?
          _card.validate if _card.is_a?(OpenApi::Validatable)
        end
        unless (_cartes_bancaires = cartes_bancaires).nil?
          _cartes_bancaires.validate if _cartes_bancaires.is_a?(OpenApi::Validatable)
        end
        unless (_cashapp = cashapp).nil?
          _cashapp.validate if _cashapp.is_a?(OpenApi::Validatable)
        end
        unless (_customer_balance = customer_balance).nil?
          _customer_balance.validate if _customer_balance.is_a?(OpenApi::Validatable)
        end
        unless (_eps = eps).nil?
          _eps.validate if _eps.is_a?(OpenApi::Validatable)
        end

        unless (_fpx = fpx).nil?
          _fpx.validate if _fpx.is_a?(OpenApi::Validatable)
        end
        unless (_giropay = giropay).nil?
          _giropay.validate if _giropay.is_a?(OpenApi::Validatable)
        end
        unless (_google_pay = google_pay).nil?
          _google_pay.validate if _google_pay.is_a?(OpenApi::Validatable)
        end
        unless (_grabpay = grabpay).nil?
          _grabpay.validate if _grabpay.is_a?(OpenApi::Validatable)
        end
        unless (_ideal = ideal).nil?
          _ideal.validate if _ideal.is_a?(OpenApi::Validatable)
        end
        unless (_jcb = jcb).nil?
          _jcb.validate if _jcb.is_a?(OpenApi::Validatable)
        end
        unless (_klarna = klarna).nil?
          _klarna.validate if _klarna.is_a?(OpenApi::Validatable)
        end
        unless (_konbini = konbini).nil?
          _konbini.validate if _konbini.is_a?(OpenApi::Validatable)
        end
        unless (_link = link).nil?
          _link.validate if _link.is_a?(OpenApi::Validatable)
        end
        unless (_mobilepay = mobilepay).nil?
          _mobilepay.validate if _mobilepay.is_a?(OpenApi::Validatable)
        end
        unless (_multibanco = multibanco).nil?
          _multibanco.validate if _multibanco.is_a?(OpenApi::Validatable)
        end
        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_PAYMENT_METHOD_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_NAME)
        end
        unless (_oxxo = oxxo).nil?
          _oxxo.validate if _oxxo.is_a?(OpenApi::Validatable)
        end
        unless (_p24 = p24).nil?
          _p24.validate if _p24.is_a?(OpenApi::Validatable)
        end
        unless (_paynow = paynow).nil?
          _paynow.validate if _paynow.is_a?(OpenApi::Validatable)
        end
        unless (_paypal = paypal).nil?
          _paypal.validate if _paypal.is_a?(OpenApi::Validatable)
        end
        unless (_promptpay = promptpay).nil?
          _promptpay.validate if _promptpay.is_a?(OpenApi::Validatable)
        end
        unless (_revolut_pay = revolut_pay).nil?
          _revolut_pay.validate if _revolut_pay.is_a?(OpenApi::Validatable)
        end
        unless (_sepa_debit = sepa_debit).nil?
          _sepa_debit.validate if _sepa_debit.is_a?(OpenApi::Validatable)
        end
        unless (_sofort = sofort).nil?
          _sofort.validate if _sofort.is_a?(OpenApi::Validatable)
        end
        unless (_swish = swish).nil?
          _swish.validate if _swish.is_a?(OpenApi::Validatable)
        end
        unless (_twint = twint).nil?
          _twint.validate if _twint.is_a?(OpenApi::Validatable)
        end
        unless (_us_bank_account = us_bank_account).nil?
          _us_bank_account.validate if _us_bank_account.is_a?(OpenApi::Validatable)
        end
        unless (_wechat_pay = wechat_pay).nil?
          _wechat_pay.validate if _wechat_pay.is_a?(OpenApi::Validatable)
        end
        unless (_zip = zip).nil?
          _zip.validate if _zip.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_method_configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(acss_debit.to_json), "acss_debit")) if !acss_debit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("active", active.to_s) if !active.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(affirm.to_json), "affirm")) if !affirm.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(afterpay_clearpay.to_json), "afterpay_clearpay")) if !afterpay_clearpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(alipay.to_json), "alipay")) if !alipay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(amazon_pay.to_json), "amazon_pay")) if !amazon_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(apple_pay.to_json), "apple_pay")) if !apple_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(apple_pay_later.to_json), "apple_pay_later")) if !apple_pay_later.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(au_becs_debit.to_json), "au_becs_debit")) if !au_becs_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bacs_debit.to_json), "bacs_debit")) if !bacs_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bancontact.to_json), "bancontact")) if !bancontact.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(blik.to_json), "blik")) if !blik.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(boleto.to_json), "boleto")) if !boleto.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(card.to_json), "card")) if !card.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cartes_bancaires.to_json), "cartes_bancaires")) if !cartes_bancaires.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cashapp.to_json), "cashapp")) if !cashapp.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(customer_balance.to_json), "customer_balance")) if !customer_balance.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(eps.to_json), "eps")) if !eps.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(fpx.to_json), "fpx")) if !fpx.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(giropay.to_json), "giropay")) if !giropay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(google_pay.to_json), "google_pay")) if !google_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(grabpay.to_json), "grabpay")) if !grabpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(ideal.to_json), "ideal")) if !ideal.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(jcb.to_json), "jcb")) if !jcb.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(klarna.to_json), "klarna")) if !klarna.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(konbini.to_json), "konbini")) if !konbini.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(link.to_json), "link")) if !link.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(mobilepay.to_json), "mobilepay")) if !mobilepay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(multibanco.to_json), "multibanco")) if !multibanco.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(oxxo.to_json), "oxxo")) if !oxxo.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(p24.to_json), "p24")) if !p24.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(paynow.to_json), "paynow")) if !paynow.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(paypal.to_json), "paypal")) if !paypal.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(promptpay.to_json), "promptpay")) if !promptpay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(revolut_pay.to_json), "revolut_pay")) if !revolut_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(sepa_debit.to_json), "sepa_debit")) if !sepa_debit.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(sofort.to_json), "sofort")) if !sofort.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(swish.to_json), "swish")) if !swish.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(twint.to_json), "twint")) if !twint.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(us_bank_account.to_json), "us_bank_account")) if !us_bank_account.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(wechat_pay.to_json), "wechat_pay")) if !wechat_pay.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(zip.to_json), "zip")) if !zip.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentMethodConfigurationsApi.post_payment_method_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
