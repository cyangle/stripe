#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class SubscriptionSchedulesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieves the list of your subscription schedules.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return subscription schedules for the given customer.
    # @optional @param completed_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that completed during the given date interval.
    # @optional @param scheduled [Bool?] Only return subscription schedules that have not started yet.
    # @optional @param canceled_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were created canceled the given date interval.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were created during the given date interval.
    # @optional @param released_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were released during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SubscriptionSchedulesResourceScheduleList]
    def get_subscription_schedules(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      completed_at : Stripe::GetAccountsCreatedParameter? = nil,
      scheduled : Bool? = nil,
      canceled_at : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      released_at : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SubscriptionSchedulesResourceScheduleList
      data, _status_code, _headers = get_subscription_schedules_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, completed_at: completed_at, scheduled: scheduled, canceled_at: canceled_at, created: created, released_at: released_at, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the list of your subscription schedules.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return subscription schedules for the given customer.
    # @optional @param completed_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that completed during the given date interval.
    # @optional @param scheduled [Bool?] Only return subscription schedules that have not started yet.
    # @optional @param canceled_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were created canceled the given date interval.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were created during the given date interval.
    # @optional @param released_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were released during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SubscriptionSchedulesResourceScheduleList, Integer, Hash)] Stripe::SubscriptionSchedulesResourceScheduleList, response status code and response headers
    def get_subscription_schedules_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      completed_at : Stripe::GetAccountsCreatedParameter? = nil,
      scheduled : Bool? = nil,
      canceled_at : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      released_at : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SubscriptionSchedulesResourceScheduleList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_subscription_schedules(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, completed_at: completed_at, scheduled: scheduled, canceled_at: canceled_at, created: created, released_at: released_at, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubscriptionSchedulesApi#get_subscription_schedules\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SubscriptionSchedulesResourceScheduleList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the list of your subscription schedules.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return subscription schedules for the given customer.
    # @optional @param completed_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that completed during the given date interval.
    # @optional @param scheduled [Bool?] Only return subscription schedules that have not started yet.
    # @optional @param canceled_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were created canceled the given date interval.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were created during the given date interval.
    # @optional @param released_at [Stripe::GetAccountsCreatedParameter?] Only return subscription schedules that were released during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_subscription_schedules(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      completed_at : Stripe::GetAccountsCreatedParameter? = nil,
      scheduled : Bool? = nil,
      canceled_at : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      released_at : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_subscription_schedules(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, completed_at: completed_at, scheduled: scheduled, canceled_at: canceled_at, created: created, released_at: released_at, expand: expand).execute(&block)
    end

    GET_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_CUSTOMER       = 5000

    # @return Crest::Request
    def build_api_request_for_get_subscription_schedules(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      completed_at : Stripe::GetAccountsCreatedParameter? = nil,
      scheduled : Bool? = nil,
      canceled_at : Stripe::GetAccountsCreatedParameter? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      released_at : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubscriptionSchedulesApi.get_subscription_schedules ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_completed_at = completed_at).nil?
          _completed_at.validate if _completed_at.is_a?(OpenApi::Validatable)
        end

        unless (_canceled_at = canceled_at).nil?
          _canceled_at.validate if _canceled_at.is_a?(OpenApi::Validatable)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_released_at = released_at).nil?
          _released_at.validate if _released_at.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/subscription_schedules"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["completed_at"] = completed_at.to_s if !completed_at.nil?
      query_params["scheduled"] = scheduled.to_s if !scheduled.nil?
      query_params["canceled_at"] = canceled_at.to_s if !canceled_at.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["released_at"] = released_at.to_s if !released_at.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SubscriptionSchedulesApi.get_subscription_schedules",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
    # @required @param schedule [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SubscriptionSchedule]
    def get_subscription_schedules_schedule(
      *,
      schedule : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SubscriptionSchedule
      data, _status_code, _headers = get_subscription_schedules_schedule_with_http_info(schedule: schedule, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SubscriptionSchedule, Integer, Hash)] Stripe::SubscriptionSchedule, response status code and response headers
    def get_subscription_schedules_schedule_with_http_info(
      *,
      schedule : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SubscriptionSchedule, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_subscription_schedules_schedule(schedule: schedule, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubscriptionSchedulesApi#get_subscription_schedules_schedule\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SubscriptionSchedule.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_subscription_schedules_schedule(
      *,
      schedule : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_subscription_schedules_schedule(schedule: schedule, expand: expand).execute(&block)
    end

    GET_SUBSCRIPTION_SCHEDULES_SCHEDULE_MAX_LENGTH_FOR_SCHEDULE = 5000

    # @return Crest::Request
    def build_api_request_for_get_subscription_schedules_schedule(
      *,
      schedule : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubscriptionSchedulesApi.get_subscription_schedules_schedule ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"schedule\" is required and cannot be null") if schedule.nil?
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, GET_SUBSCRIPTION_SCHEDULES_SCHEDULE_MAX_LENGTH_FOR_SCHEDULE)
        end
      end

      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SubscriptionSchedulesApi.get_subscription_schedules_schedule",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
    # @optional @param customer [String?] The identifier of the customer to create the subscription schedule for.
    # @optional @param default_settings [Stripe::DefaultSettingsParams?]
    # @optional @param end_behavior [String?] Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param from_subscription [String?] Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param phases [Array(Stripe::PhaseConfigurationParams)?] List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
    # @optional @param start_date [Stripe::PostSubscriptionSchedulesRequestStartDate?]
    # @return [Stripe::SubscriptionSchedule]
    def post_subscription_schedules(
      *,
      customer : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      from_subscription : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      start_date : Stripe::PostSubscriptionSchedulesRequestStartDate? = nil
    ) : Stripe::SubscriptionSchedule
      data, _status_code, _headers = post_subscription_schedules_with_http_info(customer: customer, default_settings: default_settings, end_behavior: end_behavior, expand: expand, from_subscription: from_subscription, metadata: metadata, phases: phases, start_date: start_date)
      data
    end

    # &lt;p&gt;Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;
    # @optional @param customer [String?] The identifier of the customer to create the subscription schedule for.
    # @optional @param default_settings [Stripe::DefaultSettingsParams?]
    # @optional @param end_behavior [String?] Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param from_subscription [String?] Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param phases [Array(Stripe::PhaseConfigurationParams)?] List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
    # @optional @param start_date [Stripe::PostSubscriptionSchedulesRequestStartDate?]
    # @return [Tuple(Stripe::SubscriptionSchedule, Integer, Hash)] Stripe::SubscriptionSchedule, response status code and response headers
    def post_subscription_schedules_with_http_info(
      *,
      customer : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      from_subscription : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      start_date : Stripe::PostSubscriptionSchedulesRequestStartDate? = nil
    ) : Tuple(Stripe::SubscriptionSchedule, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_subscription_schedules(customer: customer, default_settings: default_settings, end_behavior: end_behavior, expand: expand, from_subscription: from_subscription, metadata: metadata, phases: phases, start_date: start_date)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubscriptionSchedulesApi#post_subscription_schedules\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SubscriptionSchedule.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;
    # @optional @param customer [String?] The identifier of the customer to create the subscription schedule for.
    # @optional @param default_settings [Stripe::DefaultSettingsParams?]
    # @optional @param end_behavior [String?] Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param from_subscription [String?] Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param phases [Array(Stripe::PhaseConfigurationParams)?] List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
    # @optional @param start_date [Stripe::PostSubscriptionSchedulesRequestStartDate?]
    # @return nil
    def post_subscription_schedules(
      *,
      customer : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      from_subscription : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      start_date : Stripe::PostSubscriptionSchedulesRequestStartDate? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_subscription_schedules(customer: customer, default_settings: default_settings, end_behavior: end_behavior, expand: expand, from_subscription: from_subscription, metadata: metadata, phases: phases, start_date: start_date).execute(&block)
    end

    POST_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_CUSTOMER          = 5000
    POST_SUBSCRIPTION_SCHEDULES_VALID_VALUES_FOR_END_BEHAVIOR    = String.static_array("cancel", "none", "release", "renew")
    POST_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_FROM_SUBSCRIPTION = 5000

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules(
      *,
      customer : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      from_subscription : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      start_date : Stripe::PostSubscriptionSchedulesRequestStartDate? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubscriptionSchedulesApi.post_subscription_schedules ..." }
      end

      if client_side_validation
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_default_settings = default_settings).nil?
          _default_settings.validate if _default_settings.is_a?(OpenApi::Validatable)
        end
        unless (_end_behavior = end_behavior).nil?
          OpenApi::EnumValidator.validate("end_behavior", _end_behavior, POST_SUBSCRIPTION_SCHEDULES_VALID_VALUES_FOR_END_BEHAVIOR)
        end

        unless (_from_subscription = from_subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("from_subscription", from_subscription.to_s.size, POST_SUBSCRIPTION_SCHEDULES_MAX_LENGTH_FOR_FROM_SUBSCRIPTION)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_phases = phases).nil?
          OpenApi::ContainerValidator.validate(container: _phases) if _phases.is_a?(Array)
        end
        unless (_start_date = start_date).nil?
          _start_date.validate if _start_date.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/subscription_schedules"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["default_settings"] = default_settings.to_s if !default_settings.nil?
      form_params["end_behavior"] = end_behavior.to_s if !end_behavior.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["from_subscription"] = from_subscription.to_s if !from_subscription.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["phases"] = @api_client.build_collection_param(phases, "csv") if !phases.nil? && !phases.empty?
      form_params["start_date"] = start_date.to_s if !start_date.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SubscriptionSchedulesApi.post_subscription_schedules",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing subscription schedule.</p>
    # @required @param schedule [String?]
    # @optional @param default_settings [Stripe::DefaultSettingsParams?]
    # @optional @param end_behavior [String?] Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param phases [Array(Stripe::PhaseConfigurationParams)?] List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
    # @optional @param proration_behavior [String?] If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.
    # @return [Stripe::SubscriptionSchedule]
    def post_subscription_schedules_schedule(
      *,
      schedule : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      proration_behavior : String? = nil
    ) : Stripe::SubscriptionSchedule
      data, _status_code, _headers = post_subscription_schedules_schedule_with_http_info(schedule: schedule, default_settings: default_settings, end_behavior: end_behavior, expand: expand, metadata: metadata, phases: phases, proration_behavior: proration_behavior)
      data
    end

    # &lt;p&gt;Updates an existing subscription schedule.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param default_settings [Stripe::DefaultSettingsParams?]
    # @optional @param end_behavior [String?] Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param phases [Array(Stripe::PhaseConfigurationParams)?] List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
    # @optional @param proration_behavior [String?] If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.
    # @return [Tuple(Stripe::SubscriptionSchedule, Integer, Hash)] Stripe::SubscriptionSchedule, response status code and response headers
    def post_subscription_schedules_schedule_with_http_info(
      *,
      schedule : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      proration_behavior : String? = nil
    ) : Tuple(Stripe::SubscriptionSchedule, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_subscription_schedules_schedule(schedule: schedule, default_settings: default_settings, end_behavior: end_behavior, expand: expand, metadata: metadata, phases: phases, proration_behavior: proration_behavior)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubscriptionSchedulesApi#post_subscription_schedules_schedule\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SubscriptionSchedule.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing subscription schedule.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param default_settings [Stripe::DefaultSettingsParams?]
    # @optional @param end_behavior [String?] Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param phases [Array(Stripe::PhaseConfigurationParams)?] List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
    # @optional @param proration_behavior [String?] If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.
    # @return nil
    def post_subscription_schedules_schedule(
      *,
      schedule : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      proration_behavior : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_subscription_schedules_schedule(schedule: schedule, default_settings: default_settings, end_behavior: end_behavior, expand: expand, metadata: metadata, phases: phases, proration_behavior: proration_behavior).execute(&block)
    end

    POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_MAX_LENGTH_FOR_SCHEDULE             = 5000
    POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_VALID_VALUES_FOR_END_BEHAVIOR       = String.static_array("cancel", "none", "release", "renew")
    POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_VALID_VALUES_FOR_PRORATION_BEHAVIOR = String.static_array("always_invoice", "create_prorations", "none")

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules_schedule(
      *,
      schedule : String? = nil,
      default_settings : Stripe::DefaultSettingsParams? = nil,
      end_behavior : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      proration_behavior : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubscriptionSchedulesApi.post_subscription_schedules_schedule ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"schedule\" is required and cannot be null") if schedule.nil?
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_MAX_LENGTH_FOR_SCHEDULE)
        end
        unless (_default_settings = default_settings).nil?
          _default_settings.validate if _default_settings.is_a?(OpenApi::Validatable)
        end
        unless (_end_behavior = end_behavior).nil?
          OpenApi::EnumValidator.validate("end_behavior", _end_behavior, POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_VALID_VALUES_FOR_END_BEHAVIOR)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_phases = phases).nil?
          OpenApi::ContainerValidator.validate(container: _phases) if _phases.is_a?(Array)
        end
        unless (_proration_behavior = proration_behavior).nil?
          OpenApi::EnumValidator.validate("proration_behavior", _proration_behavior, POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_VALID_VALUES_FOR_PRORATION_BEHAVIOR)
        end
      end

      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["default_settings"] = default_settings.to_s if !default_settings.nil?
      form_params["end_behavior"] = end_behavior.to_s if !end_behavior.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["phases"] = @api_client.build_collection_param(phases, "csv") if !phases.nil? && !phases.empty?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SubscriptionSchedulesApi.post_subscription_schedules_schedule",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
    # @required @param schedule [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_now [Bool?] If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
    # @optional @param prorate [Bool?] If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`.
    # @return [Stripe::SubscriptionSchedule]
    def post_subscription_schedules_schedule_cancel(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil
    ) : Stripe::SubscriptionSchedule
      data, _status_code, _headers = post_subscription_schedules_schedule_cancel_with_http_info(schedule: schedule, expand: expand, invoice_now: invoice_now, prorate: prorate)
      data
    end

    # &lt;p&gt;Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_now [Bool?] If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
    # @optional @param prorate [Bool?] If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`.
    # @return [Tuple(Stripe::SubscriptionSchedule, Integer, Hash)] Stripe::SubscriptionSchedule, response status code and response headers
    def post_subscription_schedules_schedule_cancel_with_http_info(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil
    ) : Tuple(Stripe::SubscriptionSchedule, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_subscription_schedules_schedule_cancel(schedule: schedule, expand: expand, invoice_now: invoice_now, prorate: prorate)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubscriptionSchedulesApi#post_subscription_schedules_schedule_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SubscriptionSchedule.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_now [Bool?] If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
    # @optional @param prorate [Bool?] If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`.
    # @return nil
    def post_subscription_schedules_schedule_cancel(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_subscription_schedules_schedule_cancel(schedule: schedule, expand: expand, invoice_now: invoice_now, prorate: prorate).execute(&block)
    end

    POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_CANCEL_MAX_LENGTH_FOR_SCHEDULE = 5000

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules_schedule_cancel(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubscriptionSchedulesApi.post_subscription_schedules_schedule_cancel ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"schedule\" is required and cannot be null") if schedule.nil?
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_CANCEL_MAX_LENGTH_FOR_SCHEDULE)
        end
      end

      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}/cancel".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice_now"] = invoice_now.to_s if !invoice_now.nil?
      form_params["prorate"] = prorate.to_s if !prorate.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SubscriptionSchedulesApi.post_subscription_schedules_schedule_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
    # @required @param schedule [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param preserve_cancel_date [Bool?] Keep any cancellation on the subscription that the schedule has set
    # @return [Stripe::SubscriptionSchedule]
    def post_subscription_schedules_schedule_release(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      preserve_cancel_date : Bool? = nil
    ) : Stripe::SubscriptionSchedule
      data, _status_code, _headers = post_subscription_schedules_schedule_release_with_http_info(schedule: schedule, expand: expand, preserve_cancel_date: preserve_cancel_date)
      data
    end

    # &lt;p&gt;Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;. If the subscription schedule is currently associated with a subscription, releasing it will remove its &lt;code&gt;subscription&lt;/code&gt; property and set the subscription’s ID to the &lt;code&gt;released_subscription&lt;/code&gt; property.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param preserve_cancel_date [Bool?] Keep any cancellation on the subscription that the schedule has set
    # @return [Tuple(Stripe::SubscriptionSchedule, Integer, Hash)] Stripe::SubscriptionSchedule, response status code and response headers
    def post_subscription_schedules_schedule_release_with_http_info(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      preserve_cancel_date : Bool? = nil
    ) : Tuple(Stripe::SubscriptionSchedule, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_subscription_schedules_schedule_release(schedule: schedule, expand: expand, preserve_cancel_date: preserve_cancel_date)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubscriptionSchedulesApi#post_subscription_schedules_schedule_release\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SubscriptionSchedule.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;. If the subscription schedule is currently associated with a subscription, releasing it will remove its &lt;code&gt;subscription&lt;/code&gt; property and set the subscription’s ID to the &lt;code&gt;released_subscription&lt;/code&gt; property.&lt;/p&gt;
    # @required @param schedule [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param preserve_cancel_date [Bool?] Keep any cancellation on the subscription that the schedule has set
    # @return nil
    def post_subscription_schedules_schedule_release(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      preserve_cancel_date : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_subscription_schedules_schedule_release(schedule: schedule, expand: expand, preserve_cancel_date: preserve_cancel_date).execute(&block)
    end

    POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_RELEASE_MAX_LENGTH_FOR_SCHEDULE = 5000

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules_schedule_release(
      *,
      schedule : String? = nil,
      expand : Array(String)? = nil,
      preserve_cancel_date : Bool? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubscriptionSchedulesApi.post_subscription_schedules_schedule_release ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"schedule\" is required and cannot be null") if schedule.nil?
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, POST_SUBSCRIPTION_SCHEDULES_SCHEDULE_RELEASE_MAX_LENGTH_FOR_SCHEDULE)
        end
      end

      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}/release".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["preserve_cancel_date"] = preserve_cancel_date.to_s if !preserve_cancel_date.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SubscriptionSchedulesApi.post_subscription_schedules_schedule_release",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
