#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class TransfersApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param destination [String?] Only return transfers for the destination specified by this account ID.
    # @optional @param transfer_group [String?] Only return transfers with the specified transfer group.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::TransferList]
    def get_transfers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      destination : String? = nil,
      transfer_group : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::TransferList
      data, _status_code, _headers = get_transfers_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, destination: destination, transfer_group: transfer_group, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param destination [String?] Only return transfers for the destination specified by this account ID.
    # @optional @param transfer_group [String?] Only return transfers with the specified transfer group.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::TransferList, Integer, Hash)] Stripe::TransferList, response status code and response headers
    def get_transfers_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      destination : String? = nil,
      transfer_group : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::TransferList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_transfers(ending_before: ending_before, starting_after: starting_after, limit: limit, destination: destination, transfer_group: transfer_group, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#get_transfers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TransferList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param destination [String?] Only return transfers for the destination specified by this account ID.
    # @optional @param transfer_group [String?] Only return transfers with the specified transfer group.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_transfers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      destination : String? = nil,
      transfer_group : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_transfers(ending_before: ending_before, starting_after: starting_after, limit: limit, destination: destination, transfer_group: transfer_group, expand: expand, created: created).execute(&block)
    end

    GET_TRANSFERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TRANSFERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TRANSFERS_MAX_LENGTH_FOR_DESTINATION    = 5000
    GET_TRANSFERS_MAX_LENGTH_FOR_TRANSFER_GROUP = 5000

    # @return Crest::Request
    def build_api_request_for_get_transfers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      destination : String? = nil,
      transfer_group : String? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.get_transfers ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TRANSFERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TRANSFERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_destination = destination).nil?
          OpenApi::PrimitiveValidator.validate_max_length("destination", destination.to_s.size, GET_TRANSFERS_MAX_LENGTH_FOR_DESTINATION)
        end
        unless (_transfer_group = transfer_group).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transfer_group", transfer_group.to_s.size, GET_TRANSFERS_MAX_LENGTH_FOR_TRANSFER_GROUP)
        end

        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/transfers"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["destination"] = destination.to_s if !destination.nil?
      query_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TransfersApi.get_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
    # @required @param id [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TransferReversalList]
    def get_transfers_id_reversals(
      *,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TransferReversalList
      data, _status_code, _headers = get_transfers_id_reversals_with_http_info(id: id, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional reversals.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TransferReversalList, Integer, Hash)] Stripe::TransferReversalList, response status code and response headers
    def get_transfers_id_reversals_with_http_info(
      *,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TransferReversalList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_transfers_id_reversals(id: id, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#get_transfers_id_reversals\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TransferReversalList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional reversals.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_transfers_id_reversals(
      *,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_transfers_id_reversals(id: id, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_ID             = 5000
    GET_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_transfers_id_reversals(
      *,
      id : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.get_transfers_id_reversals ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_ID)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/transfers/{id}/reversals".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TransfersApi.get_transfers_id_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
    # @required @param transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Transfer]
    def get_transfers_transfer(
      *,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Transfer
      data, _status_code, _headers = get_transfers_transfer_with_http_info(transfer: transfer, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.&lt;/p&gt;
    # @required @param transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Transfer, Integer, Hash)] Stripe::Transfer, response status code and response headers
    def get_transfers_transfer_with_http_info(
      *,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Transfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_transfers_transfer(transfer: transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#get_transfers_transfer\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Transfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.&lt;/p&gt;
    # @required @param transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_transfers_transfer(
      *,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_transfers_transfer(transfer: transfer, expand: expand).execute(&block)
    end

    GET_TRANSFERS_TRANSFER_MAX_LENGTH_FOR_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_get_transfers_transfer(
      *,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.get_transfers_transfer ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"transfer\" is required and cannot be null") if transfer.nil?
        unless (_transfer = transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transfer", transfer.to_s.size, GET_TRANSFERS_TRANSFER_MAX_LENGTH_FOR_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}".sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TransfersApi.get_transfers_transfer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
    # @required @param id [String?]
    # @required @param transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TransferReversal]
    def get_transfers_transfer_reversals_id(
      *,
      id : String? = nil,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TransferReversal
      data, _status_code, _headers = get_transfers_transfer_reversals_id_with_http_info(id: id, transfer: transfer, expand: expand)
      data
    end

    # &lt;p&gt;By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.&lt;/p&gt;
    # @required @param id [String?]
    # @required @param transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TransferReversal, Integer, Hash)] Stripe::TransferReversal, response status code and response headers
    def get_transfers_transfer_reversals_id_with_http_info(
      *,
      id : String? = nil,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TransferReversal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_transfers_transfer_reversals_id(id: id, transfer: transfer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#get_transfers_transfer_reversals_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TransferReversal.from_json(body), status_code, headers)
    end

    # &lt;p&gt;By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.&lt;/p&gt;
    # @required @param id [String?]
    # @required @param transfer [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_transfers_transfer_reversals_id(
      *,
      id : String? = nil,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_transfers_transfer_reversals_id(id: id, transfer: transfer, expand: expand).execute(&block)
    end

    GET_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_ID       = 5000
    GET_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_get_transfers_transfer_reversals_id(
      *,
      id : String? = nil,
      transfer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.get_transfers_transfer_reversals_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_ID)
        end
        raise ArgumentError.new("\"transfer\" is required and cannot be null") if transfer.nil?
        unless (_transfer = transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transfer", transfer.to_s.size, GET_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_TRANSFER)
        end
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}/reversals/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TransfersApi.get_transfers_transfer_reversals_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href=\"#balance\">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
    # @required @param post_transfers_request [Stripe::PostTransfersRequest?]
    # @return [Stripe::Transfer]
    def post_transfers(
      *,
      post_transfers_request : Stripe::PostTransfersRequest? = nil
    ) : Stripe::Transfer
      data, _status_code, _headers = post_transfers_with_http_info(post_transfers_request: post_transfers_request)
      data
    end

    # &lt;p&gt;To send funds from your Stripe account to a connected account, you create a new transfer object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;
    # @required @param post_transfers_request [Stripe::PostTransfersRequest?]
    # @return [Tuple(Stripe::Transfer, Integer, Hash)] Stripe::Transfer, response status code and response headers
    def post_transfers_with_http_info(
      *,
      post_transfers_request : Stripe::PostTransfersRequest? = nil
    ) : Tuple(Stripe::Transfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_transfers(post_transfers_request: post_transfers_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#post_transfers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Transfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;To send funds from your Stripe account to a connected account, you create a new transfer object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;
    # @required @param post_transfers_request [Stripe::PostTransfersRequest?]
    # @return nil
    def post_transfers(
      *,
      post_transfers_request : Stripe::PostTransfersRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_transfers(post_transfers_request: post_transfers_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_transfers(
      *,
      post_transfers_request : Stripe::PostTransfersRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.post_transfers ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_transfers_request\" is required and cannot be null") if post_transfers_request.nil?
        unless (_post_transfers_request = post_transfers_request).nil?
          _post_transfers_request.validate if _post_transfers_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/transfers"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_transfers_request, content_type: header_params["Content-Type"]?) if !post_transfers_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TransfersApi.post_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you create a new reversal, you must specify a transfer to create it on.</p>  <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>  <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
    # @required @param id [String?]
    # @optional @param post_transfers_id_reversals_request [Stripe::PostTransfersIdReversalsRequest?]
    # @return [Stripe::TransferReversal]
    def post_transfers_id_reversals(
      *,
      id : String? = nil,
      post_transfers_id_reversals_request : Stripe::PostTransfersIdReversalsRequest? = nil
    ) : Stripe::TransferReversal
      data, _status_code, _headers = post_transfers_id_reversals_with_http_info(id: id, post_transfers_id_reversals_request: post_transfers_id_reversals_request)
      data
    end

    # &lt;p&gt;When you create a new reversal, you must specify a transfer to create it on.&lt;/p&gt;  &lt;p&gt;When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.&lt;/p&gt;  &lt;p&gt;Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param post_transfers_id_reversals_request [Stripe::PostTransfersIdReversalsRequest?]
    # @return [Tuple(Stripe::TransferReversal, Integer, Hash)] Stripe::TransferReversal, response status code and response headers
    def post_transfers_id_reversals_with_http_info(
      *,
      id : String? = nil,
      post_transfers_id_reversals_request : Stripe::PostTransfersIdReversalsRequest? = nil
    ) : Tuple(Stripe::TransferReversal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_transfers_id_reversals(id: id, post_transfers_id_reversals_request: post_transfers_id_reversals_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#post_transfers_id_reversals\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TransferReversal.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When you create a new reversal, you must specify a transfer to create it on.&lt;/p&gt;  &lt;p&gt;When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.&lt;/p&gt;  &lt;p&gt;Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param post_transfers_id_reversals_request [Stripe::PostTransfersIdReversalsRequest?]
    # @return nil
    def post_transfers_id_reversals(
      *,
      id : String? = nil,
      post_transfers_id_reversals_request : Stripe::PostTransfersIdReversalsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_transfers_id_reversals(id: id, post_transfers_id_reversals_request: post_transfers_id_reversals_request).execute(&block)
    end

    POST_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_transfers_id_reversals(
      *,
      id : String? = nil,
      post_transfers_id_reversals_request : Stripe::PostTransfersIdReversalsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.post_transfers_id_reversals ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TRANSFERS_ID_REVERSALS_MAX_LENGTH_FOR_ID)
        end
        unless (_post_transfers_id_reversals_request = post_transfers_id_reversals_request).nil?
          _post_transfers_id_reversals_request.validate if _post_transfers_id_reversals_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/transfers/{id}/reversals".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_transfers_id_reversals_request, content_type: header_params["Content-Type"]?) if !post_transfers_id_reversals_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TransfersApi.post_transfers_id_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request accepts only metadata as an argument.</p>
    # @required @param transfer [String?]
    # @optional @param post_topups_topup_request [Stripe::PostTopupsTopupRequest?]
    # @return [Stripe::Transfer]
    def post_transfers_transfer(
      *,
      transfer : String? = nil,
      post_topups_topup_request : Stripe::PostTopupsTopupRequest? = nil
    ) : Stripe::Transfer
      data, _status_code, _headers = post_transfers_transfer_with_http_info(transfer: transfer, post_topups_topup_request: post_topups_topup_request)
      data
    end

    # &lt;p&gt;Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts only metadata as an argument.&lt;/p&gt;
    # @required @param transfer [String?]
    # @optional @param post_topups_topup_request [Stripe::PostTopupsTopupRequest?]
    # @return [Tuple(Stripe::Transfer, Integer, Hash)] Stripe::Transfer, response status code and response headers
    def post_transfers_transfer_with_http_info(
      *,
      transfer : String? = nil,
      post_topups_topup_request : Stripe::PostTopupsTopupRequest? = nil
    ) : Tuple(Stripe::Transfer, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_transfers_transfer(transfer: transfer, post_topups_topup_request: post_topups_topup_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#post_transfers_transfer\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Transfer.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts only metadata as an argument.&lt;/p&gt;
    # @required @param transfer [String?]
    # @optional @param post_topups_topup_request [Stripe::PostTopupsTopupRequest?]
    # @return nil
    def post_transfers_transfer(
      *,
      transfer : String? = nil,
      post_topups_topup_request : Stripe::PostTopupsTopupRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_transfers_transfer(transfer: transfer, post_topups_topup_request: post_topups_topup_request).execute(&block)
    end

    POST_TRANSFERS_TRANSFER_MAX_LENGTH_FOR_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_transfers_transfer(
      *,
      transfer : String? = nil,
      post_topups_topup_request : Stripe::PostTopupsTopupRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.post_transfers_transfer ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"transfer\" is required and cannot be null") if transfer.nil?
        unless (_transfer = transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transfer", transfer.to_s.size, POST_TRANSFERS_TRANSFER_MAX_LENGTH_FOR_TRANSFER)
        end
        unless (_post_topups_topup_request = post_topups_topup_request).nil?
          _post_topups_topup_request.validate if _post_topups_topup_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}".sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_topups_topup_request, content_type: header_params["Content-Type"]?) if !post_topups_topup_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TransfersApi.post_transfers_transfer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request only accepts metadata and description as arguments.</p>
    # @required @param id [String?]
    # @required @param transfer [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Stripe::TransferReversal]
    def post_transfers_transfer_reversals_id(
      *,
      id : String? = nil,
      transfer : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Stripe::TransferReversal
      data, _status_code, _headers = post_transfers_transfer_reversals_id_with_http_info(id: id, transfer: transfer, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)
      data
    end

    # &lt;p&gt;Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata and description as arguments.&lt;/p&gt;
    # @required @param id [String?]
    # @required @param transfer [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return [Tuple(Stripe::TransferReversal, Integer, Hash)] Stripe::TransferReversal, response status code and response headers
    def post_transfers_transfer_reversals_id_with_http_info(
      *,
      id : String? = nil,
      transfer : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Tuple(Stripe::TransferReversal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_transfers_transfer_reversals_id(id: id, transfer: transfer, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TransfersApi#post_transfers_transfer_reversals_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TransferReversal.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata and description as arguments.&lt;/p&gt;
    # @required @param id [String?]
    # @required @param transfer [String?]
    # @optional @param post_application_fees_fee_refunds_id_request [Stripe::PostApplicationFeesFeeRefundsIdRequest?]
    # @return nil
    def post_transfers_transfer_reversals_id(
      *,
      id : String? = nil,
      transfer : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_transfers_transfer_reversals_id(id: id, transfer: transfer, post_application_fees_fee_refunds_id_request: post_application_fees_fee_refunds_id_request).execute(&block)
    end

    POST_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_ID       = 5000
    POST_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_TRANSFER = 5000

    # @return Crest::Request
    def build_api_request_for_post_transfers_transfer_reversals_id(
      *,
      id : String? = nil,
      transfer : String? = nil,
      post_application_fees_fee_refunds_id_request : Stripe::PostApplicationFeesFeeRefundsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TransfersApi.post_transfers_transfer_reversals_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_ID)
        end
        raise ArgumentError.new("\"transfer\" is required and cannot be null") if transfer.nil?
        unless (_transfer = transfer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transfer", transfer.to_s.size, POST_TRANSFERS_TRANSFER_REVERSALS_ID_MAX_LENGTH_FOR_TRANSFER)
        end
        unless (_post_application_fees_fee_refunds_id_request = post_application_fees_fee_refunds_id_request).nil?
          _post_application_fees_fee_refunds_id_request.validate if _post_application_fees_fee_refunds_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}/reversals/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_application_fees_fee_refunds_id_request, content_type: header_params["Content-Type"]?) if !post_application_fees_fee_refunds_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TransfersApi.post_transfers_transfer_reversals_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
