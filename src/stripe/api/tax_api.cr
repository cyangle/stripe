#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/calculation_line_item"
require "../models/country_options"
require "../models/customer_details"
require "../models/defaults_param"
require "../models/error"
require "../models/head_office_param"

require "../models/post_tax_registrations_id_request_active_from"
require "../models/post_tax_registrations_id_request_expires_at"
require "../models/post_tax_registrations_request_active_from"
require "../models/ship_from_details"
require "../models/shipping_cost"
require "../models/tax_calculation"
require "../models/tax_product_registrations_resource_tax_registration_list"
require "../models/tax_product_resource_tax_calculation_line_item_list"
require "../models/tax_product_resource_tax_transaction_line_item_list"
require "../models/tax_registration"
require "../models/tax_settings"
require "../models/tax_transaction"
require "../models/transaction_line_item_reversal"
require "../models/transaction_shipping_cost_reversal"

module Stripe
  class TaxApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.</p>
    # @required @param calculation [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TaxProductResourceTaxCalculationLineItemList]
    def get_tax_calculations_calculation_line_items(
      *,
      calculation : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TaxProductResourceTaxCalculationLineItemList
      data, _status_code, _headers = get_tax_calculations_calculation_line_items_with_http_info(calculation: calculation, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.&lt;/p&gt;
    # @required @param calculation [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TaxProductResourceTaxCalculationLineItemList, Integer, Hash)] Stripe::TaxProductResourceTaxCalculationLineItemList, response status code and response headers
    def get_tax_calculations_calculation_line_items_with_http_info(
      *,
      calculation : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TaxProductResourceTaxCalculationLineItemList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_calculations_calculation_line_items(calculation: calculation, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#get_tax_calculations_calculation_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxProductResourceTaxCalculationLineItemList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.&lt;/p&gt;
    # @required @param calculation [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tax_calculations_calculation_line_items(
      *,
      calculation : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_calculations_calculation_line_items(calculation: calculation, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_TAX_CALCULATIONS_CALCULATION_LINE_ITEMS_MAX_LENGTH_FOR_CALCULATION    = 5000
    GET_TAX_CALCULATIONS_CALCULATION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  =  500
    GET_TAX_CALCULATIONS_CALCULATION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER =  500

    # @return Crest::Request
    def build_api_request_for_get_tax_calculations_calculation_line_items(
      *,
      calculation : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.get_tax_calculations_calculation_line_items ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"calculation\" is required and cannot be null") if calculation.nil?
        unless (_calculation = calculation).nil?
          OpenApi::PrimitiveValidator.validate_max_length("calculation", calculation.to_s.size, GET_TAX_CALCULATIONS_CALCULATION_LINE_ITEMS_MAX_LENGTH_FOR_CALCULATION)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TAX_CALCULATIONS_CALCULATION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TAX_CALCULATIONS_CALCULATION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/tax/calculations/{calculation}/line_items".sub("{" + "calculation" + "}", URI.encode_path(calculation.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxApi.get_tax_calculations_calculation_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Tax <code>Registration</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param status [String?] The status of the Tax Registration.
    # @return [Stripe::TaxProductRegistrationsResourceTaxRegistrationList]
    def get_tax_registrations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      status : String? = nil
    ) : Stripe::TaxProductRegistrationsResourceTaxRegistrationList
      data, _status_code, _headers = get_tax_registrations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, status: status)
      data
    end

    # &lt;p&gt;Returns a list of Tax &lt;code&gt;Registration&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param status [String?] The status of the Tax Registration.
    # @return [Tuple(Stripe::TaxProductRegistrationsResourceTaxRegistrationList, Integer, Hash)] Stripe::TaxProductRegistrationsResourceTaxRegistrationList, response status code and response headers
    def get_tax_registrations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      status : String? = nil
    ) : Tuple(Stripe::TaxProductRegistrationsResourceTaxRegistrationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_registrations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#get_tax_registrations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxProductRegistrationsResourceTaxRegistrationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of Tax &lt;code&gt;Registration&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param status [String?] The status of the Tax Registration.
    # @return nil
    def get_tax_registrations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      status : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_registrations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, status: status).execute(&block)
    end

    GET_TAX_REGISTRATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TAX_REGISTRATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TAX_REGISTRATIONS_VALID_VALUES_FOR_STATUS       = String.static_array("active", "all", "expired", "scheduled")

    # @return Crest::Request
    def build_api_request_for_get_tax_registrations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      status : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.get_tax_registrations ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TAX_REGISTRATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TAX_REGISTRATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TAX_REGISTRATIONS_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/tax/registrations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["status"] = status.to_s if !status.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxApi.get_tax_registrations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a Tax <code>Registration</code> object.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TaxRegistration]
    def get_tax_registrations_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TaxRegistration
      data, _status_code, _headers = get_tax_registrations_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Returns a Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TaxRegistration, Integer, Hash)] Stripe::TaxRegistration, response status code and response headers
    def get_tax_registrations_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TaxRegistration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_registrations_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#get_tax_registrations_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxRegistration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tax_registrations_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_registrations_id(id: id, expand: expand).execute(&block)
    end

    GET_TAX_REGISTRATIONS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_tax_registrations_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.get_tax_registrations_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_TAX_REGISTRATIONS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/tax/registrations/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxApi.get_tax_registrations_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TaxSettings]
    def get_tax_settings(
      *,
      expand : Array(Array(String))? = nil
    ) : Stripe::TaxSettings
      data, _status_code, _headers = get_tax_settings_with_http_info(expand: expand)
      data
    end

    # &lt;p&gt;Retrieves Tax &lt;code&gt;Settings&lt;/code&gt; for a merchant.&lt;/p&gt;
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TaxSettings, Integer, Hash)] Stripe::TaxSettings, response status code and response headers
    def get_tax_settings_with_http_info(
      *,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TaxSettings, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_settings(expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#get_tax_settings\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxSettings.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves Tax &lt;code&gt;Settings&lt;/code&gt; for a merchant.&lt;/p&gt;
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tax_settings(
      *,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_settings(expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_tax_settings(
      *,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.get_tax_settings ..." }
      end

      # resource path
      local_var_path = "/v1/tax/settings"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxApi.get_tax_settings",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a Tax <code>Transaction</code> object.</p>
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TaxTransaction]
    def get_tax_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TaxTransaction
      data, _status_code, _headers = get_tax_transactions_transaction_with_http_info(transaction: transaction, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a Tax &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TaxTransaction, Integer, Hash)] Stripe::TaxTransaction, response status code and response headers
    def get_tax_transactions_transaction_with_http_info(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TaxTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_transactions_transaction(transaction: transaction, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#get_tax_transactions_transaction\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a Tax &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tax_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_transactions_transaction(transaction: transaction, expand: expand).execute(&block)
    end

    GET_TAX_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION = 5000

    # @return Crest::Request
    def build_api_request_for_get_tax_transactions_transaction(
      *,
      transaction : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.get_tax_transactions_transaction ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transaction\" is required and cannot be null") if transaction.nil?
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, GET_TAX_TRANSACTIONS_TRANSACTION_MAX_LENGTH_FOR_TRANSACTION)
        end
      end

      # resource path
      local_var_path = "/v1/tax/transactions/{transaction}".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxApi.get_tax_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
    # @required @param transaction [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TaxProductResourceTaxTransactionLineItemList]
    def get_tax_transactions_transaction_line_items(
      *,
      transaction : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TaxProductResourceTaxTransactionLineItemList
      data, _status_code, _headers = get_tax_transactions_transaction_line_items_with_http_info(transaction: transaction, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the line items of a committed standalone transaction as a collection.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TaxProductResourceTaxTransactionLineItemList, Integer, Hash)] Stripe::TaxProductResourceTaxTransactionLineItemList, response status code and response headers
    def get_tax_transactions_transaction_line_items_with_http_info(
      *,
      transaction : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TaxProductResourceTaxTransactionLineItemList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_tax_transactions_transaction_line_items(transaction: transaction, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#get_tax_transactions_transaction_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxProductResourceTaxTransactionLineItemList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the line items of a committed standalone transaction as a collection.&lt;/p&gt;
    # @required @param transaction [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_tax_transactions_transaction_line_items(
      *,
      transaction : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_tax_transactions_transaction_line_items(transaction: transaction, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_TAX_TRANSACTIONS_TRANSACTION_LINE_ITEMS_MAX_LENGTH_FOR_TRANSACTION    = 5000
    GET_TAX_TRANSACTIONS_TRANSACTION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  =  500
    GET_TAX_TRANSACTIONS_TRANSACTION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER =  500

    # @return Crest::Request
    def build_api_request_for_get_tax_transactions_transaction_line_items(
      *,
      transaction : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.get_tax_transactions_transaction_line_items ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transaction\" is required and cannot be null") if transaction.nil?
        unless (_transaction = transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("transaction", transaction.to_s.size, GET_TAX_TRANSACTIONS_TRANSACTION_LINE_ITEMS_MAX_LENGTH_FOR_TRANSACTION)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TAX_TRANSACTIONS_TRANSACTION_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TAX_TRANSACTIONS_TRANSACTION_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/tax/transactions/{transaction}/line_items".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TaxApi.get_tax_transactions_transaction_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Calculates tax based on the input and returns a Tax <code>Calculation</code> object.</p>
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param line_items [Array(Stripe::CalculationLineItem)?] A list of items the customer is purchasing.
    # @optional @param customer [String?] The ID of an existing customer to use for this calculation. If provided, the customer's address and tax IDs are copied to `customer_details`.
    # @optional @param customer_details [Stripe::CustomerDetails?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param ship_from_details [Stripe::ShipFromDetails?]
    # @optional @param shipping_cost [Stripe::ShippingCost?]
    # @optional @param tax_date [Int32?] Timestamp of date at which the tax rules and rates in effect applies for the calculation. Measured in seconds since the Unix epoch. Can be up to 48 hours in the past, and up to 48 hours in the future.
    # @return [Stripe::TaxCalculation]
    def post_tax_calculations(
      *,
      currency : String? = nil,
      line_items : Array(Stripe::CalculationLineItem)? = nil,
      customer : String? = nil,
      customer_details : Stripe::CustomerDetails? = nil,
      expand : Array(String)? = nil,
      ship_from_details : Stripe::ShipFromDetails? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      tax_date : Int64? = nil
    ) : Stripe::TaxCalculation
      data, _status_code, _headers = post_tax_calculations_with_http_info(currency: currency, line_items: line_items, customer: customer, customer_details: customer_details, expand: expand, ship_from_details: ship_from_details, shipping_cost: shipping_cost, tax_date: tax_date)
      data
    end

    # &lt;p&gt;Calculates tax based on the input and returns a Tax &lt;code&gt;Calculation&lt;/code&gt; object.&lt;/p&gt;
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param line_items [Array(Stripe::CalculationLineItem)?] A list of items the customer is purchasing.
    # @optional @param customer [String?] The ID of an existing customer to use for this calculation. If provided, the customer's address and tax IDs are copied to `customer_details`.
    # @optional @param customer_details [Stripe::CustomerDetails?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param ship_from_details [Stripe::ShipFromDetails?]
    # @optional @param shipping_cost [Stripe::ShippingCost?]
    # @optional @param tax_date [Int32?] Timestamp of date at which the tax rules and rates in effect applies for the calculation. Measured in seconds since the Unix epoch. Can be up to 48 hours in the past, and up to 48 hours in the future.
    # @return [Tuple(Stripe::TaxCalculation, Integer, Hash)] Stripe::TaxCalculation, response status code and response headers
    def post_tax_calculations_with_http_info(
      *,
      currency : String? = nil,
      line_items : Array(Stripe::CalculationLineItem)? = nil,
      customer : String? = nil,
      customer_details : Stripe::CustomerDetails? = nil,
      expand : Array(String)? = nil,
      ship_from_details : Stripe::ShipFromDetails? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      tax_date : Int64? = nil
    ) : Tuple(Stripe::TaxCalculation, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_calculations(currency: currency, line_items: line_items, customer: customer, customer_details: customer_details, expand: expand, ship_from_details: ship_from_details, shipping_cost: shipping_cost, tax_date: tax_date)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#post_tax_calculations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxCalculation.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Calculates tax based on the input and returns a Tax &lt;code&gt;Calculation&lt;/code&gt; object.&lt;/p&gt;
    # @required @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @required @param line_items [Array(Stripe::CalculationLineItem)?] A list of items the customer is purchasing.
    # @optional @param customer [String?] The ID of an existing customer to use for this calculation. If provided, the customer's address and tax IDs are copied to `customer_details`.
    # @optional @param customer_details [Stripe::CustomerDetails?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param ship_from_details [Stripe::ShipFromDetails?]
    # @optional @param shipping_cost [Stripe::ShippingCost?]
    # @optional @param tax_date [Int32?] Timestamp of date at which the tax rules and rates in effect applies for the calculation. Measured in seconds since the Unix epoch. Can be up to 48 hours in the past, and up to 48 hours in the future.
    # @return nil
    def post_tax_calculations(
      *,
      currency : String? = nil,
      line_items : Array(Stripe::CalculationLineItem)? = nil,
      customer : String? = nil,
      customer_details : Stripe::CustomerDetails? = nil,
      expand : Array(String)? = nil,
      ship_from_details : Stripe::ShipFromDetails? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      tax_date : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_calculations(currency: currency, line_items: line_items, customer: customer, customer_details: customer_details, expand: expand, ship_from_details: ship_from_details, shipping_cost: shipping_cost, tax_date: tax_date).execute(&block)
    end

    POST_TAX_CALCULATIONS_MAX_LENGTH_FOR_CUSTOMER = 5000

    # @return Crest::Request
    def build_api_request_for_post_tax_calculations(
      *,
      currency : String? = nil,
      line_items : Array(Stripe::CalculationLineItem)? = nil,
      customer : String? = nil,
      customer_details : Stripe::CustomerDetails? = nil,
      expand : Array(String)? = nil,
      ship_from_details : Stripe::ShipFromDetails? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      tax_date : Int64? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.post_tax_calculations ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"currency\" is required and cannot be null") if currency.nil?

        raise ArgumentError.new("\"line_items\" is required and cannot be null") if line_items.nil?
        unless (_line_items = line_items).nil?
          OpenApi::ContainerValidator.validate(container: _line_items) if _line_items.is_a?(Array)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_TAX_CALCULATIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_customer_details = customer_details).nil?
          _customer_details.validate if _customer_details.is_a?(OpenApi::Validatable)
        end

        unless (_ship_from_details = ship_from_details).nil?
          _ship_from_details.validate if _ship_from_details.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_cost = shipping_cost).nil?
          _shipping_cost.validate if _shipping_cost.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tax/calculations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(customer_details.to_json), "customer_details")) if !customer_details.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(line_items.to_json), "line_items")) if !line_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(ship_from_details.to_json), "ship_from_details")) if !ship_from_details.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_cost.to_json), "shipping_cost")) if !shipping_cost.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("tax_date", tax_date.to_s) if !tax_date.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxApi.post_tax_calculations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new Tax <code>Registration</code> object.</p>
    # @required @param active_from [Stripe::PostTaxRegistrationsRequestActiveFrom?]
    # @required @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @required @param country_options [Stripe::CountryOptions?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.
    # @return [Stripe::TaxRegistration]
    def post_tax_registrations(
      *,
      active_from : Stripe::PostTaxRegistrationsRequestActiveFrom? = nil,
      country : String? = nil,
      country_options : Stripe::CountryOptions? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil
    ) : Stripe::TaxRegistration
      data, _status_code, _headers = post_tax_registrations_with_http_info(active_from: active_from, country: country, country_options: country_options, expand: expand, expires_at: expires_at)
      data
    end

    # &lt;p&gt;Creates a new Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param active_from [Stripe::PostTaxRegistrationsRequestActiveFrom?]
    # @required @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @required @param country_options [Stripe::CountryOptions?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.
    # @return [Tuple(Stripe::TaxRegistration, Integer, Hash)] Stripe::TaxRegistration, response status code and response headers
    def post_tax_registrations_with_http_info(
      *,
      active_from : Stripe::PostTaxRegistrationsRequestActiveFrom? = nil,
      country : String? = nil,
      country_options : Stripe::CountryOptions? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil
    ) : Tuple(Stripe::TaxRegistration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_registrations(active_from: active_from, country: country, country_options: country_options, expand: expand, expires_at: expires_at)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#post_tax_registrations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxRegistration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param active_from [Stripe::PostTaxRegistrationsRequestActiveFrom?]
    # @required @param country [String?] Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    # @required @param country_options [Stripe::CountryOptions?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.
    # @return nil
    def post_tax_registrations(
      *,
      active_from : Stripe::PostTaxRegistrationsRequestActiveFrom? = nil,
      country : String? = nil,
      country_options : Stripe::CountryOptions? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_registrations(active_from: active_from, country: country, country_options: country_options, expand: expand, expires_at: expires_at).execute(&block)
    end

    POST_TAX_REGISTRATIONS_MAX_LENGTH_FOR_COUNTRY = 5000

    # @return Crest::Request
    def build_api_request_for_post_tax_registrations(
      *,
      active_from : Stripe::PostTaxRegistrationsRequestActiveFrom? = nil,
      country : String? = nil,
      country_options : Stripe::CountryOptions? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.post_tax_registrations ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"active_from\" is required and cannot be null") if active_from.nil?
        unless (_active_from = active_from).nil?
          _active_from.validate if _active_from.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"country\" is required and cannot be null") if country.nil?
        unless (_country = country).nil?
          OpenApi::PrimitiveValidator.validate_max_length("country", country.to_s.size, POST_TAX_REGISTRATIONS_MAX_LENGTH_FOR_COUNTRY)
        end
        raise ArgumentError.new("\"country_options\" is required and cannot be null") if country_options.nil?
        unless (_country_options = country_options).nil?
          _country_options.validate if _country_options.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tax/registrations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(active_from.to_json), "active_from")) if !active_from.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("country", country.to_s) if !country.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(country_options.to_json), "country_options")) if !country_options.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("expires_at", expires_at.to_s) if !expires_at.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxApi.post_tax_registrations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing Tax <code>Registration</code> object.</p>  <p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
    # @required @param id [String?]
    # @optional @param active_from [Stripe::PostTaxRegistrationsIdRequestActiveFrom?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Stripe::PostTaxRegistrationsIdRequestExpiresAt?]
    # @return [Stripe::TaxRegistration]
    def post_tax_registrations_id(
      *,
      id : String? = nil,
      active_from : Stripe::PostTaxRegistrationsIdRequestActiveFrom? = nil,
      expand : Array(String)? = nil,
      expires_at : Stripe::PostTaxRegistrationsIdRequestExpiresAt? = nil
    ) : Stripe::TaxRegistration
      data, _status_code, _headers = post_tax_registrations_id_with_http_info(id: id, active_from: active_from, expand: expand, expires_at: expires_at)
      data
    end

    # &lt;p&gt;Updates an existing Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;  &lt;p&gt;A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting &lt;code&gt;expires_at&lt;/code&gt;.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active_from [Stripe::PostTaxRegistrationsIdRequestActiveFrom?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Stripe::PostTaxRegistrationsIdRequestExpiresAt?]
    # @return [Tuple(Stripe::TaxRegistration, Integer, Hash)] Stripe::TaxRegistration, response status code and response headers
    def post_tax_registrations_id_with_http_info(
      *,
      id : String? = nil,
      active_from : Stripe::PostTaxRegistrationsIdRequestActiveFrom? = nil,
      expand : Array(String)? = nil,
      expires_at : Stripe::PostTaxRegistrationsIdRequestExpiresAt? = nil
    ) : Tuple(Stripe::TaxRegistration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_registrations_id(id: id, active_from: active_from, expand: expand, expires_at: expires_at)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#post_tax_registrations_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxRegistration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;  &lt;p&gt;A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting &lt;code&gt;expires_at&lt;/code&gt;.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param active_from [Stripe::PostTaxRegistrationsIdRequestActiveFrom?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Stripe::PostTaxRegistrationsIdRequestExpiresAt?]
    # @return nil
    def post_tax_registrations_id(
      *,
      id : String? = nil,
      active_from : Stripe::PostTaxRegistrationsIdRequestActiveFrom? = nil,
      expand : Array(String)? = nil,
      expires_at : Stripe::PostTaxRegistrationsIdRequestExpiresAt? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_registrations_id(id: id, active_from: active_from, expand: expand, expires_at: expires_at).execute(&block)
    end

    POST_TAX_REGISTRATIONS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_tax_registrations_id(
      *,
      id : String? = nil,
      active_from : Stripe::PostTaxRegistrationsIdRequestActiveFrom? = nil,
      expand : Array(String)? = nil,
      expires_at : Stripe::PostTaxRegistrationsIdRequestExpiresAt? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.post_tax_registrations_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_TAX_REGISTRATIONS_ID_MAX_LENGTH_FOR_ID)
        end
        unless (_active_from = active_from).nil?
          _active_from.validate if _active_from.is_a?(OpenApi::Validatable)
        end

        unless (_expires_at = expires_at).nil?
          _expires_at.validate if _expires_at.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tax/registrations/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(active_from.to_json), "active_from")) if !active_from.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expires_at.to_json), "expires_at")) if !expires_at.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxApi.post_tax_registrations_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>
    # @optional @param defaults [Stripe::DefaultsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param head_office [Stripe::HeadOfficeParam?]
    # @return [Stripe::TaxSettings]
    def post_tax_settings(
      *,
      defaults : Stripe::DefaultsParam? = nil,
      expand : Array(String)? = nil,
      head_office : Stripe::HeadOfficeParam? = nil
    ) : Stripe::TaxSettings
      data, _status_code, _headers = post_tax_settings_with_http_info(defaults: defaults, expand: expand, head_office: head_office)
      data
    end

    # &lt;p&gt;Updates Tax &lt;code&gt;Settings&lt;/code&gt; parameters used in tax calculations. All parameters are editable but none can be removed once set.&lt;/p&gt;
    # @optional @param defaults [Stripe::DefaultsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param head_office [Stripe::HeadOfficeParam?]
    # @return [Tuple(Stripe::TaxSettings, Integer, Hash)] Stripe::TaxSettings, response status code and response headers
    def post_tax_settings_with_http_info(
      *,
      defaults : Stripe::DefaultsParam? = nil,
      expand : Array(String)? = nil,
      head_office : Stripe::HeadOfficeParam? = nil
    ) : Tuple(Stripe::TaxSettings, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_settings(defaults: defaults, expand: expand, head_office: head_office)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#post_tax_settings\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxSettings.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates Tax &lt;code&gt;Settings&lt;/code&gt; parameters used in tax calculations. All parameters are editable but none can be removed once set.&lt;/p&gt;
    # @optional @param defaults [Stripe::DefaultsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param head_office [Stripe::HeadOfficeParam?]
    # @return nil
    def post_tax_settings(
      *,
      defaults : Stripe::DefaultsParam? = nil,
      expand : Array(String)? = nil,
      head_office : Stripe::HeadOfficeParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_settings(defaults: defaults, expand: expand, head_office: head_office).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_tax_settings(
      *,
      defaults : Stripe::DefaultsParam? = nil,
      expand : Array(String)? = nil,
      head_office : Stripe::HeadOfficeParam? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.post_tax_settings ..." }
      end

      if client_side_validation?
        unless (_defaults = defaults).nil?
          _defaults.validate if _defaults.is_a?(OpenApi::Validatable)
        end

        unless (_head_office = head_office).nil?
          _head_office.validate if _head_office.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tax/settings"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(defaults.to_json), "defaults")) if !defaults.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(head_office.to_json), "head_office")) if !head_office.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxApi.post_tax_settings",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.</p>
    # @required @param calculation [String?] Tax Calculation ID to be used as input when creating the transaction.
    # @required @param reference [String?] A custom order or sale identifier, such as 'myOrder_123'. Must be unique across all transactions, including reversals.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param posted_at [Int32?] The Unix timestamp representing when the tax liability is assumed or reduced, which determines the liability posting period and handling in tax liability reports. The timestamp must fall within the `tax_date` and the current time, unless the `tax_date` is scheduled in advance. Defaults to the current time.
    # @return [Stripe::TaxTransaction]
    def post_tax_transactions_create_from_calculation(
      *,
      calculation : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      posted_at : Int64? = nil
    ) : Stripe::TaxTransaction
      data, _status_code, _headers = post_tax_transactions_create_from_calculation_with_http_info(calculation: calculation, reference: reference, expand: expand, metadata: metadata, posted_at: posted_at)
      data
    end

    # &lt;p&gt;Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.&lt;/p&gt;
    # @required @param calculation [String?] Tax Calculation ID to be used as input when creating the transaction.
    # @required @param reference [String?] A custom order or sale identifier, such as 'myOrder_123'. Must be unique across all transactions, including reversals.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param posted_at [Int32?] The Unix timestamp representing when the tax liability is assumed or reduced, which determines the liability posting period and handling in tax liability reports. The timestamp must fall within the `tax_date` and the current time, unless the `tax_date` is scheduled in advance. Defaults to the current time.
    # @return [Tuple(Stripe::TaxTransaction, Integer, Hash)] Stripe::TaxTransaction, response status code and response headers
    def post_tax_transactions_create_from_calculation_with_http_info(
      *,
      calculation : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      posted_at : Int64? = nil
    ) : Tuple(Stripe::TaxTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_transactions_create_from_calculation(calculation: calculation, reference: reference, expand: expand, metadata: metadata, posted_at: posted_at)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#post_tax_transactions_create_from_calculation\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.&lt;/p&gt;
    # @required @param calculation [String?] Tax Calculation ID to be used as input when creating the transaction.
    # @required @param reference [String?] A custom order or sale identifier, such as 'myOrder_123'. Must be unique across all transactions, including reversals.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param posted_at [Int32?] The Unix timestamp representing when the tax liability is assumed or reduced, which determines the liability posting period and handling in tax liability reports. The timestamp must fall within the `tax_date` and the current time, unless the `tax_date` is scheduled in advance. Defaults to the current time.
    # @return nil
    def post_tax_transactions_create_from_calculation(
      *,
      calculation : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      posted_at : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_transactions_create_from_calculation(calculation: calculation, reference: reference, expand: expand, metadata: metadata, posted_at: posted_at).execute(&block)
    end

    POST_TAX_TRANSACTIONS_CREATE_FROM_CALCULATION_MAX_LENGTH_FOR_CALCULATION = 5000
    POST_TAX_TRANSACTIONS_CREATE_FROM_CALCULATION_MAX_LENGTH_FOR_REFERENCE   =  500

    # @return Crest::Request
    def build_api_request_for_post_tax_transactions_create_from_calculation(
      *,
      calculation : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      metadata : Hash(String, String)? = nil,
      posted_at : Int64? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.post_tax_transactions_create_from_calculation ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"calculation\" is required and cannot be null") if calculation.nil?
        unless (_calculation = calculation).nil?
          OpenApi::PrimitiveValidator.validate_max_length("calculation", calculation.to_s.size, POST_TAX_TRANSACTIONS_CREATE_FROM_CALCULATION_MAX_LENGTH_FOR_CALCULATION)
        end
        raise ArgumentError.new("\"reference\" is required and cannot be null") if reference.nil?
        unless (_reference = reference).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference", reference.to_s.size, POST_TAX_TRANSACTIONS_CREATE_FROM_CALCULATION_MAX_LENGTH_FOR_REFERENCE)
        end
      end

      # resource path
      local_var_path = "/v1/tax/transactions/create_from_calculation"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("calculation", calculation.to_s) if !calculation.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("posted_at", posted_at.to_s) if !posted_at.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("reference", reference.to_s) if !reference.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxApi.post_tax_transactions_create_from_calculation",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
    # @required @param mode [String?] If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.
    # @required @param original_transaction [String?] The ID of the Transaction to partially or fully reverse.
    # @required @param reference [String?] A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://stripe.com/docs/tax/reports).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flat_amount [Int32?] A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes.
    # @optional @param line_items [Array(Stripe::TransactionLineItemReversal)?] The line item amounts to reverse.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param shipping_cost [Stripe::TransactionShippingCostReversal?]
    # @return [Stripe::TaxTransaction]
    def post_tax_transactions_create_reversal(
      *,
      mode : String? = nil,
      original_transaction : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      flat_amount : Int64? = nil,
      line_items : Array(Stripe::TransactionLineItemReversal)? = nil,
      metadata : Hash(String, String)? = nil,
      shipping_cost : Stripe::TransactionShippingCostReversal? = nil
    ) : Stripe::TaxTransaction
      data, _status_code, _headers = post_tax_transactions_create_reversal_with_http_info(mode: mode, original_transaction: original_transaction, reference: reference, expand: expand, flat_amount: flat_amount, line_items: line_items, metadata: metadata, shipping_cost: shipping_cost)
      data
    end

    # &lt;p&gt;Partially or fully reverses a previously created &lt;code&gt;Transaction&lt;/code&gt;.&lt;/p&gt;
    # @required @param mode [String?] If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.
    # @required @param original_transaction [String?] The ID of the Transaction to partially or fully reverse.
    # @required @param reference [String?] A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://stripe.com/docs/tax/reports).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flat_amount [Int32?] A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes.
    # @optional @param line_items [Array(Stripe::TransactionLineItemReversal)?] The line item amounts to reverse.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param shipping_cost [Stripe::TransactionShippingCostReversal?]
    # @return [Tuple(Stripe::TaxTransaction, Integer, Hash)] Stripe::TaxTransaction, response status code and response headers
    def post_tax_transactions_create_reversal_with_http_info(
      *,
      mode : String? = nil,
      original_transaction : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      flat_amount : Int64? = nil,
      line_items : Array(Stripe::TransactionLineItemReversal)? = nil,
      metadata : Hash(String, String)? = nil,
      shipping_cost : Stripe::TransactionShippingCostReversal? = nil
    ) : Tuple(Stripe::TaxTransaction, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_tax_transactions_create_reversal(mode: mode, original_transaction: original_transaction, reference: reference, expand: expand, flat_amount: flat_amount, line_items: line_items, metadata: metadata, shipping_cost: shipping_cost)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TaxApi#post_tax_transactions_create_reversal\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TaxTransaction.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Partially or fully reverses a previously created &lt;code&gt;Transaction&lt;/code&gt;.&lt;/p&gt;
    # @required @param mode [String?] If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.
    # @required @param original_transaction [String?] The ID of the Transaction to partially or fully reverse.
    # @required @param reference [String?] A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://stripe.com/docs/tax/reports).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param flat_amount [Int32?] A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes.
    # @optional @param line_items [Array(Stripe::TransactionLineItemReversal)?] The line item amounts to reverse.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param shipping_cost [Stripe::TransactionShippingCostReversal?]
    # @return nil
    def post_tax_transactions_create_reversal(
      *,
      mode : String? = nil,
      original_transaction : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      flat_amount : Int64? = nil,
      line_items : Array(Stripe::TransactionLineItemReversal)? = nil,
      metadata : Hash(String, String)? = nil,
      shipping_cost : Stripe::TransactionShippingCostReversal? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_tax_transactions_create_reversal(mode: mode, original_transaction: original_transaction, reference: reference, expand: expand, flat_amount: flat_amount, line_items: line_items, metadata: metadata, shipping_cost: shipping_cost).execute(&block)
    end

    POST_TAX_TRANSACTIONS_CREATE_REVERSAL_VALID_VALUES_FOR_MODE               = String.static_array("full", "partial")
    POST_TAX_TRANSACTIONS_CREATE_REVERSAL_MAX_LENGTH_FOR_ORIGINAL_TRANSACTION = 5000
    POST_TAX_TRANSACTIONS_CREATE_REVERSAL_MAX_LENGTH_FOR_REFERENCE            =  500

    # @return Crest::Request
    def build_api_request_for_post_tax_transactions_create_reversal(
      *,
      mode : String? = nil,
      original_transaction : String? = nil,
      reference : String? = nil,
      expand : Array(String)? = nil,
      flat_amount : Int64? = nil,
      line_items : Array(Stripe::TransactionLineItemReversal)? = nil,
      metadata : Hash(String, String)? = nil,
      shipping_cost : Stripe::TransactionShippingCostReversal? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TaxApi.post_tax_transactions_create_reversal ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"mode\" is required and cannot be null") if mode.nil?
        unless (_mode = mode).nil?
          OpenApi::EnumValidator.validate("mode", _mode, POST_TAX_TRANSACTIONS_CREATE_REVERSAL_VALID_VALUES_FOR_MODE)
        end
        raise ArgumentError.new("\"original_transaction\" is required and cannot be null") if original_transaction.nil?
        unless (_original_transaction = original_transaction).nil?
          OpenApi::PrimitiveValidator.validate_max_length("original_transaction", original_transaction.to_s.size, POST_TAX_TRANSACTIONS_CREATE_REVERSAL_MAX_LENGTH_FOR_ORIGINAL_TRANSACTION)
        end
        raise ArgumentError.new("\"reference\" is required and cannot be null") if reference.nil?
        unless (_reference = reference).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference", reference.to_s.size, POST_TAX_TRANSACTIONS_CREATE_REVERSAL_MAX_LENGTH_FOR_REFERENCE)
        end

        unless (_line_items = line_items).nil?
          OpenApi::ContainerValidator.validate(container: _line_items) if _line_items.is_a?(Array)
        end

        unless (_shipping_cost = shipping_cost).nil?
          _shipping_cost.validate if _shipping_cost.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/tax/transactions/create_reversal"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("flat_amount", flat_amount.to_s) if !flat_amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(line_items.to_json), "line_items")) if !line_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("mode", mode.to_s) if !mode.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("original_transaction", original_transaction.to_s) if !original_transaction.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("reference", reference.to_s) if !reference.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_cost.to_json), "shipping_cost")) if !shipping_cost.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TaxApi.post_tax_transactions_create_reversal",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
