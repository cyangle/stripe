#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class AccountsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>With <a href=\"/docs/connect\">Connect</a>, you can delete accounts you manage.</p>  <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>  <p>If you want to delete your own account, use the <a href=\"https://dashboard.stripe.com/account\">account information tab in your account settings</a> instead.</p>
    # @required @param account [String?]
    # @return [Stripe::DeletedAccount]
    def delete_accounts_account(
      *,
      account : String? = nil
    ) : Stripe::DeletedAccount
      data, _status_code, _headers = delete_accounts_account_with_http_info(account: account)
      data
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param account [String?]
    # @return [Tuple(Stripe::DeletedAccount, Integer, Hash)] Stripe::DeletedAccount, response status code and response headers
    def delete_accounts_account_with_http_info(
      *,
      account : String? = nil
    ) : Tuple(Stripe::DeletedAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_accounts_account(account: account)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#delete_accounts_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param account [String?]
    # @return nil
    def delete_accounts_account(
      *,
      account : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_accounts_account(account: account).execute(&block)
    end

    DELETE_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account(
      *,
      account : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.delete_accounts_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, DELETE_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "AccountsApi.delete_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified external account for a given account.</p>
    # @required @param account [String?]
    # @required @param id [String?]
    # @return [Stripe::DeletedExternalAccount]
    def delete_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil
    ) : Stripe::DeletedExternalAccount
      data, _status_code, _headers = delete_accounts_account_external_accounts_id_with_http_info(account: account, id: id)
      data
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param id [String?]
    # @return [Tuple(Stripe::DeletedExternalAccount, Integer, Hash)] Stripe::DeletedExternalAccount, response status code and response headers
    def delete_accounts_account_external_accounts_id_with_http_info(
      *,
      account : String? = nil,
      id : String? = nil
    ) : Tuple(Stripe::DeletedExternalAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_accounts_account_external_accounts_id(account: account, id: id)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#delete_accounts_account_external_accounts_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedExternalAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param id [String?]
    # @return nil
    def delete_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_accounts_account_external_accounts_id(account: account, id: id).execute(&block)
    end

    DELETE_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_ID_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.delete_accounts_account_external_accounts_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, DELETE_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_ID_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "AccountsApi.delete_accounts_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
    # @required @param account [String?]
    # @required @param person [String?]
    # @return [Stripe::DeletedPerson]
    def delete_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil
    ) : Stripe::DeletedPerson
      data, _status_code, _headers = delete_accounts_account_persons_person_with_http_info(account: account, person: person)
      data
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param person [String?]
    # @return [Tuple(Stripe::DeletedPerson, Integer, Hash)] Stripe::DeletedPerson, response status code and response headers
    def delete_accounts_account_persons_person_with_http_info(
      *,
      account : String? = nil,
      person : String? = nil
    ) : Tuple(Stripe::DeletedPerson, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_accounts_account_persons_person(account: account, person: person)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#delete_accounts_account_persons_person\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedPerson.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param person [String?]
    # @return nil
    def delete_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_accounts_account_persons_person(account: account, person: person).execute(&block)
    end

    DELETE_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_ACCOUNT = 5000
    DELETE_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_PERSON  = 5000

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.delete_accounts_account_persons_person ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, DELETE_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"person\" is required and cannot be null") if person.nil?
        unless (_person = person).nil?
          OpenApi::PrimitiveValidator.validate_max_length("person", person.to_s.size, DELETE_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_PERSON)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "AccountsApi.delete_accounts_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of accounts connected to your platform via <a href=\"/docs/connect\">Connect</a>. If you’re not a platform, the list is empty.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::AccountList]
    def get_accounts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::AccountList
      data, _status_code, _headers = get_accounts_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, created: created)
      data
    end

    # &lt;p&gt;Returns a list of accounts connected to your platform via &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;. If you’re not a platform, the list is empty.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::AccountList, Integer, Hash)] Stripe::AccountList, response status code and response headers
    def get_accounts_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::AccountList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, created: created)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::AccountList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of accounts connected to your platform via &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;. If you’re not a platform, the list is empty.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_accounts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, created: created).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts ..." }
      end

      if client_side_validation
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["created"] = created.to_s if !created.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an account.</p>
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Account]
    def get_accounts_account(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Account
      data, _status_code, _headers = get_accounts_account_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Account, Integer, Hash)] Stripe::Account, response status code and response headers
    def get_accounts_account_with_http_info(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts_account(account: account, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Account.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_accounts_account(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts_account(account: account, expand: expand).execute(&block)
    end

    GET_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_accounts_account(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ListAccountCapability]
    def get_accounts_account_capabilities(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ListAccountCapability
      data, _status_code, _headers = get_accounts_account_capabilities_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ListAccountCapability, Integer, Hash)] Stripe::ListAccountCapability, response status code and response headers
    def get_accounts_account_capabilities_with_http_info(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ListAccountCapability, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts_account_capabilities(account: account, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts_account_capabilities\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ListAccountCapability.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_accounts_account_capabilities(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts_account_capabilities(account: account, expand: expand).execute(&block)
    end

    GET_ACCOUNTS_ACCOUNT_CAPABILITIES_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_capabilities(
      *,
      account : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts_account_capabilities ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_ACCOUNTS_ACCOUNT_CAPABILITIES_MAX_LENGTH_FOR_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/capabilities".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts_account_capabilities",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves information about the specified Account Capability.</p>
    # @required @param account [String?]
    # @required @param capability [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Capability]
    def get_accounts_account_capabilities_capability(
      *,
      account : String? = nil,
      capability : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Capability
      data, _status_code, _headers = get_accounts_account_capabilities_capability_with_http_info(account: account, capability: capability, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param capability [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Capability, Integer, Hash)] Stripe::Capability, response status code and response headers
    def get_accounts_account_capabilities_capability_with_http_info(
      *,
      account : String? = nil,
      capability : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Capability, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts_account_capabilities_capability(account: account, capability: capability, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts_account_capabilities_capability\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Capability.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param capability [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_accounts_account_capabilities_capability(
      *,
      account : String? = nil,
      capability : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts_account_capabilities_capability(account: account, capability: capability, expand: expand).execute(&block)
    end

    GET_ACCOUNTS_ACCOUNT_CAPABILITIES_CAPABILITY_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_capabilities_capability(
      *,
      account : String? = nil,
      capability : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts_account_capabilities_capability ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_ACCOUNTS_ACCOUNT_CAPABILITIES_CAPABILITY_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"capability\" is required and cannot be null") if capability.nil?
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/capabilities/{capability}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "capability" + "}", URI.encode_path(capability.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts_account_capabilities_capability",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List external accounts for an account.</p>
    # @required @param account [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ExternalAccountList]
    def get_accounts_account_external_accounts(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ExternalAccountList
      data, _status_code, _headers = get_accounts_account_external_accounts_with_http_info(account: account, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;List external accounts for an account.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ExternalAccountList, Integer, Hash)] Stripe::ExternalAccountList, response status code and response headers
    def get_accounts_account_external_accounts_with_http_info(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ExternalAccountList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts_account_external_accounts(account: account, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts_account_external_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ExternalAccountList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;List external accounts for an account.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_accounts_account_external_accounts(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts_account_external_accounts(account: account, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_external_accounts(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts_account_external_accounts ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_MAX_LENGTH_FOR_ACCOUNT)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts_account_external_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a specified external account for a given account.</p>
    # @required @param account [String?]
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ExternalAccount]
    def get_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ExternalAccount
      data, _status_code, _headers = get_accounts_account_external_accounts_id_with_http_info(account: account, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ExternalAccount, Integer, Hash)] Stripe::ExternalAccount, response status code and response headers
    def get_accounts_account_external_accounts_id_with_http_info(
      *,
      account : String? = nil,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ExternalAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts_account_external_accounts_id(account: account, id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts_account_external_accounts_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ExternalAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts_account_external_accounts_id(account: account, id: id, expand: expand).execute(&block)
    end

    GET_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_ID_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts_account_external_accounts_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_ID_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
    # @required @param account [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param relationship [Stripe::AllPeopleRelationshipSpecs?] Filters on the list of people returned based on the person's relationship to the account's company.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PersonList]
    def get_accounts_account_persons(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      relationship : Stripe::AllPeopleRelationshipSpecs? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PersonList
      data, _status_code, _headers = get_accounts_account_persons_with_http_info(account: account, ending_before: ending_before, starting_after: starting_after, limit: limit, relationship: relationship, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param relationship [Stripe::AllPeopleRelationshipSpecs?] Filters on the list of people returned based on the person's relationship to the account's company.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PersonList, Integer, Hash)] Stripe::PersonList, response status code and response headers
    def get_accounts_account_persons_with_http_info(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      relationship : Stripe::AllPeopleRelationshipSpecs? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PersonList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts_account_persons(account: account, ending_before: ending_before, starting_after: starting_after, limit: limit, relationship: relationship, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts_account_persons\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PersonList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param relationship [Stripe::AllPeopleRelationshipSpecs?] Filters on the list of people returned based on the person's relationship to the account's company.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_accounts_account_persons(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      relationship : Stripe::AllPeopleRelationshipSpecs? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts_account_persons(account: account, ending_before: ending_before, starting_after: starting_after, limit: limit, relationship: relationship, expand: expand).execute(&block)
    end

    GET_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_ACCOUNT        = 5000
    GET_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_persons(
      *,
      account : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      relationship : Stripe::AllPeopleRelationshipSpecs? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts_account_persons ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_ACCOUNT)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_relationship = relationship).nil?
          _relationship.validate if _relationship.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["relationship"] = relationship.to_s if !relationship.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts_account_persons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing person.</p>
    # @required @param account [String?]
    # @required @param person [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Person]
    def get_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Person
      data, _status_code, _headers = get_accounts_account_persons_person_with_http_info(account: account, person: person, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param person [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Person, Integer, Hash)] Stripe::Person, response status code and response headers
    def get_accounts_account_persons_person_with_http_info(
      *,
      account : String? = nil,
      person : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Person, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_accounts_account_persons_person(account: account, person: person, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#get_accounts_account_persons_person\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Person.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param person [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_accounts_account_persons_person(account: account, person: person, expand: expand).execute(&block)
    end

    GET_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_ACCOUNT = 5000
    GET_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_PERSON  = 5000

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.get_accounts_account_persons_person ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, GET_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"person\" is required and cannot be null") if person.nil?
        unless (_person = person).nil?
          OpenApi::PrimitiveValidator.validate_max_length("person", person.to_s.size, GET_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_PERSON)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AccountsApi.get_accounts_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>With <a href=\"/docs/connect\">Connect</a>, you can create Stripe accounts for your users. To do this, you’ll first need to <a href=\"https://dashboard.stripe.com/account/applications/settings\">register your platform</a>.</p>
    # @optional @param post_accounts_request [Stripe::PostAccountsRequest?]
    # @return [Stripe::Account]
    def post_accounts(
      *,
      post_accounts_request : Stripe::PostAccountsRequest? = nil
    ) : Stripe::Account
      data, _status_code, _headers = post_accounts_with_http_info(post_accounts_request: post_accounts_request)
      data
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can create Stripe accounts for your users. To do this, you’ll first need to &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/applications/settings\&quot;&gt;register your platform&lt;/a&gt;.&lt;/p&gt;
    # @optional @param post_accounts_request [Stripe::PostAccountsRequest?]
    # @return [Tuple(Stripe::Account, Integer, Hash)] Stripe::Account, response status code and response headers
    def post_accounts_with_http_info(
      *,
      post_accounts_request : Stripe::PostAccountsRequest? = nil
    ) : Tuple(Stripe::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts(post_accounts_request: post_accounts_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Account.from_json(body), status_code, headers)
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can create Stripe accounts for your users. To do this, you’ll first need to &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/applications/settings\&quot;&gt;register your platform&lt;/a&gt;.&lt;/p&gt;
    # @optional @param post_accounts_request [Stripe::PostAccountsRequest?]
    # @return nil
    def post_accounts(
      *,
      post_accounts_request : Stripe::PostAccountsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts(post_accounts_request: post_accounts_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts(
      *,
      post_accounts_request : Stripe::PostAccountsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts ..." }
      end

      if client_side_validation
        unless (_post_accounts_request = post_accounts_request).nil?
          _post_accounts_request.validate if _post_accounts_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_request, content_type: header_params["Content-Type"]?) if !post_accounts_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <a href=\"/docs/connect/accounts\">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>  <p>To update your own account, use the <a href=\"https://dashboard.stripe.com/account\">Dashboard</a>. Refer to our <a href=\"/docs/connect/updating-accounts\">Connect</a> documentation to learn more about updating accounts.</p>
    # @required @param account [String?]
    # @optional @param post_accounts_account_request [Stripe::PostAccountsAccountRequest?]
    # @return [Stripe::Account]
    def post_accounts_account(
      *,
      account : String? = nil,
      post_accounts_account_request : Stripe::PostAccountsAccountRequest? = nil
    ) : Stripe::Account
      data, _status_code, _headers = post_accounts_account_with_http_info(account: account, post_accounts_account_request: post_accounts_account_request)
      data
    end

    # &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/docs/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked &lt;strong&gt;Custom Only&lt;/strong&gt; below.) Parameters marked &lt;strong&gt;Custom and Express&lt;/strong&gt; are not supported for Standard accounts.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_request [Stripe::PostAccountsAccountRequest?]
    # @return [Tuple(Stripe::Account, Integer, Hash)] Stripe::Account, response status code and response headers
    def post_accounts_account_with_http_info(
      *,
      account : String? = nil,
      post_accounts_account_request : Stripe::PostAccountsAccountRequest? = nil
    ) : Tuple(Stripe::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account(account: account, post_accounts_account_request: post_accounts_account_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Account.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/docs/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked &lt;strong&gt;Custom Only&lt;/strong&gt; below.) Parameters marked &lt;strong&gt;Custom and Express&lt;/strong&gt; are not supported for Standard accounts.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_request [Stripe::PostAccountsAccountRequest?]
    # @return nil
    def post_accounts_account(
      *,
      account : String? = nil,
      post_accounts_account_request : Stripe::PostAccountsAccountRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account(account: account, post_accounts_account_request: post_accounts_account_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account(
      *,
      account : String? = nil,
      post_accounts_account_request : Stripe::PostAccountsAccountRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_MAX_LENGTH_FOR_ACCOUNT)
        end
        unless (_post_accounts_account_request = post_accounts_account_request).nil?
          _post_accounts_account_request.validate if _post_accounts_account_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing Account Capability.</p>
    # @required @param account [String?]
    # @required @param capability [String?]
    # @optional @param post_accounts_account_capabilities_capability_request [Stripe::PostAccountsAccountCapabilitiesCapabilityRequest?]
    # @return [Stripe::Capability]
    def post_accounts_account_capabilities_capability(
      *,
      account : String? = nil,
      capability : String? = nil,
      post_accounts_account_capabilities_capability_request : Stripe::PostAccountsAccountCapabilitiesCapabilityRequest? = nil
    ) : Stripe::Capability
      data, _status_code, _headers = post_accounts_account_capabilities_capability_with_http_info(account: account, capability: capability, post_accounts_account_capabilities_capability_request: post_accounts_account_capabilities_capability_request)
      data
    end

    # &lt;p&gt;Updates an existing Account Capability.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param capability [String?]
    # @optional @param post_accounts_account_capabilities_capability_request [Stripe::PostAccountsAccountCapabilitiesCapabilityRequest?]
    # @return [Tuple(Stripe::Capability, Integer, Hash)] Stripe::Capability, response status code and response headers
    def post_accounts_account_capabilities_capability_with_http_info(
      *,
      account : String? = nil,
      capability : String? = nil,
      post_accounts_account_capabilities_capability_request : Stripe::PostAccountsAccountCapabilitiesCapabilityRequest? = nil
    ) : Tuple(Stripe::Capability, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account_capabilities_capability(account: account, capability: capability, post_accounts_account_capabilities_capability_request: post_accounts_account_capabilities_capability_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account_capabilities_capability\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Capability.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing Account Capability.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param capability [String?]
    # @optional @param post_accounts_account_capabilities_capability_request [Stripe::PostAccountsAccountCapabilitiesCapabilityRequest?]
    # @return nil
    def post_accounts_account_capabilities_capability(
      *,
      account : String? = nil,
      capability : String? = nil,
      post_accounts_account_capabilities_capability_request : Stripe::PostAccountsAccountCapabilitiesCapabilityRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account_capabilities_capability(account: account, capability: capability, post_accounts_account_capabilities_capability_request: post_accounts_account_capabilities_capability_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_CAPABILITIES_CAPABILITY_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_capabilities_capability(
      *,
      account : String? = nil,
      capability : String? = nil,
      post_accounts_account_capabilities_capability_request : Stripe::PostAccountsAccountCapabilitiesCapabilityRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account_capabilities_capability ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_CAPABILITIES_CAPABILITY_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"capability\" is required and cannot be null") if capability.nil?

        unless (_post_accounts_account_capabilities_capability_request = post_accounts_account_capabilities_capability_request).nil?
          _post_accounts_account_capabilities_capability_request.validate if _post_accounts_account_capabilities_capability_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/capabilities/{capability}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "capability" + "}", URI.encode_path(capability.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_capabilities_capability_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_capabilities_capability_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account_capabilities_capability",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create an external account for a given account.</p>
    # @required @param account [String?]
    # @optional @param post_accounts_account_external_accounts_request [Stripe::PostAccountsAccountExternalAccountsRequest?]
    # @return [Stripe::ExternalAccount]
    def post_accounts_account_external_accounts(
      *,
      account : String? = nil,
      post_accounts_account_external_accounts_request : Stripe::PostAccountsAccountExternalAccountsRequest? = nil
    ) : Stripe::ExternalAccount
      data, _status_code, _headers = post_accounts_account_external_accounts_with_http_info(account: account, post_accounts_account_external_accounts_request: post_accounts_account_external_accounts_request)
      data
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_external_accounts_request [Stripe::PostAccountsAccountExternalAccountsRequest?]
    # @return [Tuple(Stripe::ExternalAccount, Integer, Hash)] Stripe::ExternalAccount, response status code and response headers
    def post_accounts_account_external_accounts_with_http_info(
      *,
      account : String? = nil,
      post_accounts_account_external_accounts_request : Stripe::PostAccountsAccountExternalAccountsRequest? = nil
    ) : Tuple(Stripe::ExternalAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account_external_accounts(account: account, post_accounts_account_external_accounts_request: post_accounts_account_external_accounts_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account_external_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ExternalAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_external_accounts_request [Stripe::PostAccountsAccountExternalAccountsRequest?]
    # @return nil
    def post_accounts_account_external_accounts(
      *,
      account : String? = nil,
      post_accounts_account_external_accounts_request : Stripe::PostAccountsAccountExternalAccountsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account_external_accounts(account: account, post_accounts_account_external_accounts_request: post_accounts_account_external_accounts_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_external_accounts(
      *,
      account : String? = nil,
      post_accounts_account_external_accounts_request : Stripe::PostAccountsAccountExternalAccountsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account_external_accounts ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_MAX_LENGTH_FOR_ACCOUNT)
        end
        unless (_post_accounts_account_external_accounts_request = post_accounts_account_external_accounts_request).nil?
          _post_accounts_account_external_accounts_request.validate if _post_accounts_account_external_accounts_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_external_accounts_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_external_accounts_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account_external_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
    # @required @param account [String?]
    # @required @param id [String?]
    # @optional @param post_accounts_account_external_accounts_id_request [Stripe::PostAccountsAccountExternalAccountsIdRequest?]
    # @return [Stripe::ExternalAccount]
    def post_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil,
      post_accounts_account_external_accounts_id_request : Stripe::PostAccountsAccountExternalAccountsIdRequest? = nil
    ) : Stripe::ExternalAccount
      data, _status_code, _headers = post_accounts_account_external_accounts_id_with_http_info(account: account, id: id, post_accounts_account_external_accounts_id_request: post_accounts_account_external_accounts_id_request)
      data
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param id [String?]
    # @optional @param post_accounts_account_external_accounts_id_request [Stripe::PostAccountsAccountExternalAccountsIdRequest?]
    # @return [Tuple(Stripe::ExternalAccount, Integer, Hash)] Stripe::ExternalAccount, response status code and response headers
    def post_accounts_account_external_accounts_id_with_http_info(
      *,
      account : String? = nil,
      id : String? = nil,
      post_accounts_account_external_accounts_id_request : Stripe::PostAccountsAccountExternalAccountsIdRequest? = nil
    ) : Tuple(Stripe::ExternalAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account_external_accounts_id(account: account, id: id, post_accounts_account_external_accounts_id_request: post_accounts_account_external_accounts_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account_external_accounts_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ExternalAccount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param id [String?]
    # @optional @param post_accounts_account_external_accounts_id_request [Stripe::PostAccountsAccountExternalAccountsIdRequest?]
    # @return nil
    def post_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil,
      post_accounts_account_external_accounts_id_request : Stripe::PostAccountsAccountExternalAccountsIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account_external_accounts_id(account: account, id: id, post_accounts_account_external_accounts_id_request: post_accounts_account_external_accounts_id_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_ID_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_external_accounts_id(
      *,
      account : String? = nil,
      id : String? = nil,
      post_accounts_account_external_accounts_id_request : Stripe::PostAccountsAccountExternalAccountsIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account_external_accounts_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_EXTERNAL_ACCOUNTS_ID_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?

        unless (_post_accounts_account_external_accounts_id_request = post_accounts_account_external_accounts_id_request).nil?
          _post_accounts_account_external_accounts_id_request.validate if _post_accounts_account_external_accounts_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_external_accounts_id_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_external_accounts_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>  <p><strong>You may only create login links for <a href=\"/docs/connect/express-accounts\">Express accounts</a> connected to your platform</strong>.</p>
    # @required @param account [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::LoginLink]
    def post_accounts_account_login_links(
      *,
      account : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::LoginLink
      data, _status_code, _headers = post_accounts_account_login_links_with_http_info(account: account, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;Creates a single-use login link for an Express account to access their Stripe dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You may only create login links for &lt;a href&#x3D;\&quot;/docs/connect/express-accounts\&quot;&gt;Express accounts&lt;/a&gt; connected to your platform&lt;/strong&gt;.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::LoginLink, Integer, Hash)] Stripe::LoginLink, response status code and response headers
    def post_accounts_account_login_links_with_http_info(
      *,
      account : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::LoginLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account_login_links(account: account, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account_login_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::LoginLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a single-use login link for an Express account to access their Stripe dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You may only create login links for &lt;a href&#x3D;\&quot;/docs/connect/express-accounts\&quot;&gt;Express accounts&lt;/a&gt; connected to your platform&lt;/strong&gt;.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_accounts_account_login_links(
      *,
      account : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account_login_links(account: account, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_LOGIN_LINKS_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_login_links(
      *,
      account : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account_login_links ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_LOGIN_LINKS_MAX_LENGTH_FOR_ACCOUNT)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/login_links".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account_login_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new person.</p>
    # @required @param account [String?]
    # @optional @param post_accounts_account_persons_request [Stripe::PostAccountsAccountPersonsRequest?]
    # @return [Stripe::Person]
    def post_accounts_account_persons(
      *,
      account : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil
    ) : Stripe::Person
      data, _status_code, _headers = post_accounts_account_persons_with_http_info(account: account, post_accounts_account_persons_request: post_accounts_account_persons_request)
      data
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_persons_request [Stripe::PostAccountsAccountPersonsRequest?]
    # @return [Tuple(Stripe::Person, Integer, Hash)] Stripe::Person, response status code and response headers
    def post_accounts_account_persons_with_http_info(
      *,
      account : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil
    ) : Tuple(Stripe::Person, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account_persons(account: account, post_accounts_account_persons_request: post_accounts_account_persons_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account_persons\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Person.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @required @param account [String?]
    # @optional @param post_accounts_account_persons_request [Stripe::PostAccountsAccountPersonsRequest?]
    # @return nil
    def post_accounts_account_persons(
      *,
      account : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account_persons(account: account, post_accounts_account_persons_request: post_accounts_account_persons_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_persons(
      *,
      account : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account_persons ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_PERSONS_MAX_LENGTH_FOR_ACCOUNT)
        end
        unless (_post_accounts_account_persons_request = post_accounts_account_persons_request).nil?
          _post_accounts_account_persons_request.validate if _post_accounts_account_persons_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_persons_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_persons_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account_persons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing person.</p>
    # @required @param account [String?]
    # @required @param person [String?]
    # @optional @param post_accounts_account_persons_request [Stripe::PostAccountsAccountPersonsRequest?]
    # @return [Stripe::Person]
    def post_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil
    ) : Stripe::Person
      data, _status_code, _headers = post_accounts_account_persons_person_with_http_info(account: account, person: person, post_accounts_account_persons_request: post_accounts_account_persons_request)
      data
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param person [String?]
    # @optional @param post_accounts_account_persons_request [Stripe::PostAccountsAccountPersonsRequest?]
    # @return [Tuple(Stripe::Person, Integer, Hash)] Stripe::Person, response status code and response headers
    def post_accounts_account_persons_person_with_http_info(
      *,
      account : String? = nil,
      person : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil
    ) : Tuple(Stripe::Person, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account_persons_person(account: account, person: person, post_accounts_account_persons_request: post_accounts_account_persons_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account_persons_person\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Person.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param person [String?]
    # @optional @param post_accounts_account_persons_request [Stripe::PostAccountsAccountPersonsRequest?]
    # @return nil
    def post_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account_persons_person(account: account, person: person, post_accounts_account_persons_request: post_accounts_account_persons_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_ACCOUNT = 5000
    POST_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_PERSON  = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_persons_person(
      *,
      account : String? = nil,
      person : String? = nil,
      post_accounts_account_persons_request : Stripe::PostAccountsAccountPersonsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account_persons_person ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"person\" is required and cannot be null") if person.nil?
        unless (_person = person).nil?
          OpenApi::PrimitiveValidator.validate_max_length("person", person.to_s.size, POST_ACCOUNTS_ACCOUNT_PERSONS_PERSON_MAX_LENGTH_FOR_PERSON)
        end
        unless (_post_accounts_account_persons_request = post_accounts_account_persons_request).nil?
          _post_accounts_account_persons_request.validate if _post_accounts_account_persons_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_persons_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_persons_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>With <a href=\"/docs/connect\">Connect</a>, you may flag accounts as suspicious.</p>  <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
    # @required @param account [String?]
    # @required @param post_accounts_account_reject_request [Stripe::PostAccountsAccountRejectRequest?]
    # @return [Stripe::Account]
    def post_accounts_account_reject(
      *,
      account : String? = nil,
      post_accounts_account_reject_request : Stripe::PostAccountsAccountRejectRequest? = nil
    ) : Stripe::Account
      data, _status_code, _headers = post_accounts_account_reject_with_http_info(account: account, post_accounts_account_reject_request: post_accounts_account_reject_request)
      data
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you may flag accounts as suspicious.&lt;/p&gt;  &lt;p&gt;Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param post_accounts_account_reject_request [Stripe::PostAccountsAccountRejectRequest?]
    # @return [Tuple(Stripe::Account, Integer, Hash)] Stripe::Account, response status code and response headers
    def post_accounts_account_reject_with_http_info(
      *,
      account : String? = nil,
      post_accounts_account_reject_request : Stripe::PostAccountsAccountRejectRequest? = nil
    ) : Tuple(Stripe::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_accounts_account_reject(account: account, post_accounts_account_reject_request: post_accounts_account_reject_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: AccountsApi#post_accounts_account_reject\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Account.from_json(body), status_code, headers)
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you may flag accounts as suspicious.&lt;/p&gt;  &lt;p&gt;Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.&lt;/p&gt;
    # @required @param account [String?]
    # @required @param post_accounts_account_reject_request [Stripe::PostAccountsAccountRejectRequest?]
    # @return nil
    def post_accounts_account_reject(
      *,
      account : String? = nil,
      post_accounts_account_reject_request : Stripe::PostAccountsAccountRejectRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_accounts_account_reject(account: account, post_accounts_account_reject_request: post_accounts_account_reject_request).execute(&block)
    end

    POST_ACCOUNTS_ACCOUNT_REJECT_MAX_LENGTH_FOR_ACCOUNT = 5000

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_reject(
      *,
      account : String? = nil,
      post_accounts_account_reject_request : Stripe::PostAccountsAccountRejectRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: AccountsApi.post_accounts_account_reject ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account\" is required and cannot be null") if account.nil?
        unless (_account = account).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account", account.to_s.size, POST_ACCOUNTS_ACCOUNT_REJECT_MAX_LENGTH_FOR_ACCOUNT)
        end
        raise ArgumentError.new("\"post_accounts_account_reject_request\" is required and cannot be null") if post_accounts_account_reject_request.nil?
        unless (_post_accounts_account_reject_request = post_accounts_account_reject_request).nil?
          _post_accounts_account_reject_request.validate if _post_accounts_account_reject_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/reject".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_reject_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_reject_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AccountsApi.post_accounts_account_reject",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
