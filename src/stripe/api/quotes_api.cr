#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/automatic_tax_param"
require "../models/error"
require "../models/from_quote_params"

require "../models/line_item_create_params"
require "../models/line_item_update_params"
require "../models/post_quotes_request_application_fee_amount"
require "../models/post_quotes_request_application_fee_percent"
require "../models/post_quotes_request_default_tax_rates"
require "../models/post_quotes_request_discounts"
require "../models/post_quotes_request_transfer_data"
require "../models/quote"
require "../models/quote_param"
require "../models/quotes_resource_list_line_items"
require "../models/quotes_resource_quote_list"
require "../models/subscription_data_create_params"
require "../models/subscription_data_update_params"

module Stripe
  class QuotesApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your quotes.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param test_clock [String?] Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose quotes will be retrieved.
    # @optional @param status [String?] The status of the quote.
    # @return [Stripe::QuotesResourceQuoteList]
    def get_quotes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      status : String? = nil
    ) : Stripe::QuotesResourceQuoteList
      data, _status_code, _headers = get_quotes_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, test_clock: test_clock, expand: expand, customer: customer, status: status)
      data
    end

    # &lt;p&gt;Returns a list of your quotes.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param test_clock [String?] Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose quotes will be retrieved.
    # @optional @param status [String?] The status of the quote.
    # @return [Tuple(Stripe::QuotesResourceQuoteList, Integer, Hash)] Stripe::QuotesResourceQuoteList, response status code and response headers
    def get_quotes_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      status : String? = nil
    ) : Tuple(Stripe::QuotesResourceQuoteList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_quotes(ending_before: ending_before, starting_after: starting_after, limit: limit, test_clock: test_clock, expand: expand, customer: customer, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#get_quotes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::QuotesResourceQuoteList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your quotes.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param test_clock [String?] Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose quotes will be retrieved.
    # @optional @param status [String?] The status of the quote.
    # @return nil
    def get_quotes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      status : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_quotes(ending_before: ending_before, starting_after: starting_after, limit: limit, test_clock: test_clock, expand: expand, customer: customer, status: status).execute(&block)
    end

    GET_QUOTES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_QUOTES_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_QUOTES_MAX_LENGTH_FOR_TEST_CLOCK     = 5000
    GET_QUOTES_MAX_LENGTH_FOR_CUSTOMER       = 5000
    GET_QUOTES_VALID_VALUES_FOR_STATUS       = String.static_array("accepted", "canceled", "draft", "open")

    # @return Crest::Request
    def build_api_request_for_get_quotes(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      status : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.get_quotes ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_QUOTES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_QUOTES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, GET_QUOTES_MAX_LENGTH_FOR_TEST_CLOCK)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_QUOTES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_QUOTES_VALID_VALUES_FOR_STATUS)
        end
      end

      # resource path
      local_var_path = "/v1/quotes"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["test_clock"] = test_clock.to_s if !test_clock.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["status"] = status.to_s if !status.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QuotesApi.get_quotes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the quote with the given ID.</p>
    # @required @param quote [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Quote]
    def get_quotes_quote(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Quote
      data, _status_code, _headers = get_quotes_quote_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the quote with the given ID.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Quote, Integer, Hash)] Stripe::Quote, response status code and response headers
    def get_quotes_quote_with_http_info(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Quote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_quotes_quote(quote: quote, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#get_quotes_quote\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Quote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the quote with the given ID.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_quotes_quote(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_quotes_quote(quote: quote, expand: expand).execute(&block)
    end

    GET_QUOTES_QUOTE_MAX_LENGTH_FOR_QUOTE = 5000

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.get_quotes_quote ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, GET_QUOTES_QUOTE_MAX_LENGTH_FOR_QUOTE)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QuotesApi.get_quotes_quote",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a quote, there is an includable <a href=\"https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
    # @required @param quote [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::QuotesResourceListLineItems]
    def get_quotes_quote_computed_upfront_line_items(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::QuotesResourceListLineItems
      data, _status_code, _headers = get_quotes_quote_computed_upfront_line_items_with_http_info(quote: quote, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;a href&#x3D;\&quot;https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\&quot;&gt;&lt;strong&gt;computed.upfront.line_items&lt;/strong&gt;&lt;/a&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::QuotesResourceListLineItems, Integer, Hash)] Stripe::QuotesResourceListLineItems, response status code and response headers
    def get_quotes_quote_computed_upfront_line_items_with_http_info(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::QuotesResourceListLineItems, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_quotes_quote_computed_upfront_line_items(quote: quote, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#get_quotes_quote_computed_upfront_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::QuotesResourceListLineItems.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;a href&#x3D;\&quot;https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\&quot;&gt;&lt;strong&gt;computed.upfront.line_items&lt;/strong&gt;&lt;/a&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_quotes_quote_computed_upfront_line_items(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_quotes_quote_computed_upfront_line_items(quote: quote, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_QUOTES_QUOTE_COMPUTED_UPFRONT_LINE_ITEMS_MAX_LENGTH_FOR_QUOTE          = 5000
    GET_QUOTES_QUOTE_COMPUTED_UPFRONT_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_QUOTES_QUOTE_COMPUTED_UPFRONT_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote_computed_upfront_line_items(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.get_quotes_quote_computed_upfront_line_items ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, GET_QUOTES_QUOTE_COMPUTED_UPFRONT_LINE_ITEMS_MAX_LENGTH_FOR_QUOTE)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_QUOTES_QUOTE_COMPUTED_UPFRONT_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_QUOTES_QUOTE_COMPUTED_UPFRONT_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/computed_upfront_line_items".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QuotesApi.get_quotes_quote_computed_upfront_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param quote [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::QuotesResourceListLineItems]
    def get_quotes_quote_line_items(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::QuotesResourceListLineItems
      data, _status_code, _headers = get_quotes_quote_line_items_with_http_info(quote: quote, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::QuotesResourceListLineItems, Integer, Hash)] Stripe::QuotesResourceListLineItems, response status code and response headers
    def get_quotes_quote_line_items_with_http_info(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::QuotesResourceListLineItems, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_quotes_quote_line_items(quote: quote, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#get_quotes_quote_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::QuotesResourceListLineItems.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_quotes_quote_line_items(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_quotes_quote_line_items(quote: quote, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_QUOTES_QUOTE_LINE_ITEMS_MAX_LENGTH_FOR_QUOTE          = 5000
    GET_QUOTES_QUOTE_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_QUOTES_QUOTE_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote_line_items(
      *,
      quote : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.get_quotes_quote_line_items ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, GET_QUOTES_QUOTE_LINE_ITEMS_MAX_LENGTH_FOR_QUOTE)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_QUOTES_QUOTE_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_QUOTES_QUOTE_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/line_items".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QuotesApi.get_quotes_quote_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href=\"https://docs.stripe.com/quotes/overview#quote_pdf\">here</a></p>
    # @required @param quote [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [::File]
    def get_quotes_quote_pdf(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil
    ) : ::File
      data, _status_code, _headers = get_quotes_quote_pdf_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Download the PDF for a finalized quote. Explanation for special handling can be found &lt;a href&#x3D;\&quot;https://docs.stripe.com/quotes/overview#quote_pdf\&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(::File, Integer, Hash)] ::File, response status code and response headers
    def get_quotes_quote_pdf_with_http_info(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(::File, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_quotes_quote_pdf(quote: quote, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#get_quotes_quote_pdf\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(::File.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Download the PDF for a finalized quote. Explanation for special handling can be found &lt;a href&#x3D;\&quot;https://docs.stripe.com/quotes/overview#quote_pdf\&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_quotes_quote_pdf(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_quotes_quote_pdf(quote: quote, expand: expand).execute(&block)
    end

    GET_QUOTES_QUOTE_PDF_MAX_LENGTH_FOR_QUOTE = 5000

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote_pdf(
      *,
      quote : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.get_quotes_quote_pdf ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, GET_QUOTES_QUOTE_PDF_MAX_LENGTH_FOR_QUOTE)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/pdf".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/pdf", "application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QuotesApi.get_quotes_quote_pdf",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href=\"https://dashboard.stripe.com/settings/billing/quote\">quote template</a>.</p>
    # @optional @param application_fee_amount [Stripe::PostQuotesRequestApplicationFeeAmount?]
    # @optional @param application_fee_percent [Stripe::PostQuotesRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param customer [String?] The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    # @optional @param default_tax_rates [Stripe::PostQuotesRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostQuotesRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
    # @optional @param footer [String?]
    # @optional @param from_quote [Stripe::FromQuoteParams?]
    # @optional @param header [String?]
    # @optional @param invoice_settings [Stripe::QuoteParam?]
    # @optional @param line_items [Array(Stripe::LineItemCreateParams)?] A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?]
    # @optional @param subscription_data [Stripe::SubscriptionDataCreateParams?]
    # @optional @param test_clock [String?] ID of the test clock to attach to the quote.
    # @optional @param transfer_data [Stripe::PostQuotesRequestTransferData?]
    # @return [Stripe::Quote]
    def post_quotes(
      *,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      from_quote : Stripe::FromQuoteParams? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemCreateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataCreateParams? = nil,
      test_clock : String? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil
    ) : Stripe::Quote
      data, _status_code, _headers = post_quotes_with_http_info(application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, from_quote: from_quote, header: header, invoice_settings: invoice_settings, line_items: line_items, metadata: metadata, on_behalf_of: on_behalf_of, subscription_data: subscription_data, test_clock: test_clock, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;A quote models prices and services for a customer. Default options for &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;expires_at&lt;/code&gt; can be set in the dashboard via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/billing/quote\&quot;&gt;quote template&lt;/a&gt;.&lt;/p&gt;
    # @optional @param application_fee_amount [Stripe::PostQuotesRequestApplicationFeeAmount?]
    # @optional @param application_fee_percent [Stripe::PostQuotesRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param customer [String?] The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    # @optional @param default_tax_rates [Stripe::PostQuotesRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostQuotesRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
    # @optional @param footer [String?]
    # @optional @param from_quote [Stripe::FromQuoteParams?]
    # @optional @param header [String?]
    # @optional @param invoice_settings [Stripe::QuoteParam?]
    # @optional @param line_items [Array(Stripe::LineItemCreateParams)?] A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?]
    # @optional @param subscription_data [Stripe::SubscriptionDataCreateParams?]
    # @optional @param test_clock [String?] ID of the test clock to attach to the quote.
    # @optional @param transfer_data [Stripe::PostQuotesRequestTransferData?]
    # @return [Tuple(Stripe::Quote, Integer, Hash)] Stripe::Quote, response status code and response headers
    def post_quotes_with_http_info(
      *,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      from_quote : Stripe::FromQuoteParams? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemCreateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataCreateParams? = nil,
      test_clock : String? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil
    ) : Tuple(Stripe::Quote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_quotes(application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, from_quote: from_quote, header: header, invoice_settings: invoice_settings, line_items: line_items, metadata: metadata, on_behalf_of: on_behalf_of, subscription_data: subscription_data, test_clock: test_clock, transfer_data: transfer_data)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#post_quotes\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Quote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A quote models prices and services for a customer. Default options for &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;expires_at&lt;/code&gt; can be set in the dashboard via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/billing/quote\&quot;&gt;quote template&lt;/a&gt;.&lt;/p&gt;
    # @optional @param application_fee_amount [Stripe::PostQuotesRequestApplicationFeeAmount?]
    # @optional @param application_fee_percent [Stripe::PostQuotesRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param customer [String?] The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    # @optional @param default_tax_rates [Stripe::PostQuotesRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostQuotesRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
    # @optional @param footer [String?]
    # @optional @param from_quote [Stripe::FromQuoteParams?]
    # @optional @param header [String?]
    # @optional @param invoice_settings [Stripe::QuoteParam?]
    # @optional @param line_items [Array(Stripe::LineItemCreateParams)?] A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?]
    # @optional @param subscription_data [Stripe::SubscriptionDataCreateParams?]
    # @optional @param test_clock [String?] ID of the test clock to attach to the quote.
    # @optional @param transfer_data [Stripe::PostQuotesRequestTransferData?]
    # @return nil
    def post_quotes(
      *,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      from_quote : Stripe::FromQuoteParams? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemCreateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataCreateParams? = nil,
      test_clock : String? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_quotes(application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, from_quote: from_quote, header: header, invoice_settings: invoice_settings, line_items: line_items, metadata: metadata, on_behalf_of: on_behalf_of, subscription_data: subscription_data, test_clock: test_clock, transfer_data: transfer_data).execute(&block)
    end

    POST_QUOTES_VALID_VALUES_FOR_COLLECTION_METHOD = String.static_array("charge_automatically", "send_invoice")
    POST_QUOTES_MAX_LENGTH_FOR_CUSTOMER            = 5000
    POST_QUOTES_VALID_VALUES_FOR_DESCRIPTION       = String.static_array("")
    POST_QUOTES_VALID_VALUES_FOR_FOOTER            = String.static_array("")
    POST_QUOTES_VALID_VALUES_FOR_HEADER            = String.static_array("")
    POST_QUOTES_VALID_VALUES_FOR_ON_BEHALF_OF      = String.static_array("")
    POST_QUOTES_MAX_LENGTH_FOR_TEST_CLOCK          = 5000

    # @return Crest::Request
    def build_api_request_for_post_quotes(
      *,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      from_quote : Stripe::FromQuoteParams? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemCreateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataCreateParams? = nil,
      test_clock : String? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.post_quotes ..." }
      end

      if client_side_validation?
        unless (_application_fee_amount = application_fee_amount).nil?
          _application_fee_amount.validate if _application_fee_amount.is_a?(OpenApi::Validatable)
        end
        unless (_application_fee_percent = application_fee_percent).nil?
          _application_fee_percent.validate if _application_fee_percent.is_a?(OpenApi::Validatable)
        end
        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, POST_QUOTES_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_QUOTES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_default_tax_rates = default_tax_rates).nil?
          _default_tax_rates.validate if _default_tax_rates.is_a?(OpenApi::Validatable)
        end
        unless (_description = description).nil?
          OpenApi::EnumValidator.validate("description", _description, POST_QUOTES_VALID_VALUES_FOR_DESCRIPTION)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_footer = footer).nil?
          OpenApi::EnumValidator.validate("footer", _footer, POST_QUOTES_VALID_VALUES_FOR_FOOTER)
        end
        unless (_from_quote = from_quote).nil?
          _from_quote.validate if _from_quote.is_a?(OpenApi::Validatable)
        end
        unless (_header = header).nil?
          OpenApi::EnumValidator.validate("header", _header, POST_QUOTES_VALID_VALUES_FOR_HEADER)
        end
        unless (_invoice_settings = invoice_settings).nil?
          _invoice_settings.validate if _invoice_settings.is_a?(OpenApi::Validatable)
        end
        unless (_line_items = line_items).nil?
          OpenApi::ContainerValidator.validate(container: _line_items) if _line_items.is_a?(Array)
        end

        unless (_on_behalf_of = on_behalf_of).nil?
          OpenApi::EnumValidator.validate("on_behalf_of", _on_behalf_of, POST_QUOTES_VALID_VALUES_FOR_ON_BEHALF_OF)
        end
        unless (_subscription_data = subscription_data).nil?
          _subscription_data.validate if _subscription_data.is_a?(OpenApi::Validatable)
        end
        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, POST_QUOTES_MAX_LENGTH_FOR_TEST_CLOCK)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/quotes"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(application_fee_amount.to_json), "application_fee_amount")) if !application_fee_amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(application_fee_percent.to_json), "application_fee_percent")) if !application_fee_percent.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("collection_method", collection_method.to_s) if !collection_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_tax_rates.to_json), "default_tax_rates")) if !default_tax_rates.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(discounts.to_json), "discounts")) if !discounts.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("expires_at", expires_at.to_s) if !expires_at.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("footer", footer.to_s) if !footer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(from_quote.to_json), "from_quote")) if !from_quote.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("header", header.to_s) if !header.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(invoice_settings.to_json), "invoice_settings")) if !invoice_settings.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(line_items.to_json), "line_items")) if !line_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(subscription_data.to_json), "subscription_data")) if !subscription_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("test_clock", test_clock.to_s) if !test_clock.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QuotesApi.post_quotes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A quote models prices and services for a customer.</p>
    # @required @param quote [String?]
    # @optional @param application_fee_amount [Stripe::PostQuotesRequestApplicationFeeAmount?]
    # @optional @param application_fee_percent [Stripe::PostQuotesRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param customer [String?] The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    # @optional @param default_tax_rates [Stripe::PostQuotesRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostQuotesRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    # @optional @param footer [String?]
    # @optional @param header [String?]
    # @optional @param invoice_settings [Stripe::QuoteParam?]
    # @optional @param line_items [Array(Stripe::LineItemUpdateParams)?] A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?]
    # @optional @param subscription_data [Stripe::SubscriptionDataUpdateParams?]
    # @optional @param transfer_data [Stripe::PostQuotesRequestTransferData?]
    # @return [Stripe::Quote]
    def post_quotes_quote(
      *,
      quote : String? = nil,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil
    ) : Stripe::Quote
      data, _status_code, _headers = post_quotes_quote_with_http_info(quote: quote, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, header: header, invoice_settings: invoice_settings, line_items: line_items, metadata: metadata, on_behalf_of: on_behalf_of, subscription_data: subscription_data, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;A quote models prices and services for a customer.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param application_fee_amount [Stripe::PostQuotesRequestApplicationFeeAmount?]
    # @optional @param application_fee_percent [Stripe::PostQuotesRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param customer [String?] The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    # @optional @param default_tax_rates [Stripe::PostQuotesRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostQuotesRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    # @optional @param footer [String?]
    # @optional @param header [String?]
    # @optional @param invoice_settings [Stripe::QuoteParam?]
    # @optional @param line_items [Array(Stripe::LineItemUpdateParams)?] A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?]
    # @optional @param subscription_data [Stripe::SubscriptionDataUpdateParams?]
    # @optional @param transfer_data [Stripe::PostQuotesRequestTransferData?]
    # @return [Tuple(Stripe::Quote, Integer, Hash)] Stripe::Quote, response status code and response headers
    def post_quotes_quote_with_http_info(
      *,
      quote : String? = nil,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil
    ) : Tuple(Stripe::Quote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_quotes_quote(quote: quote, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, header: header, invoice_settings: invoice_settings, line_items: line_items, metadata: metadata, on_behalf_of: on_behalf_of, subscription_data: subscription_data, transfer_data: transfer_data)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#post_quotes_quote\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Quote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;A quote models prices and services for a customer.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param application_fee_amount [Stripe::PostQuotesRequestApplicationFeeAmount?]
    # @optional @param application_fee_percent [Stripe::PostQuotesRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param customer [String?] The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    # @optional @param default_tax_rates [Stripe::PostQuotesRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostQuotesRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    # @optional @param footer [String?]
    # @optional @param header [String?]
    # @optional @param invoice_settings [Stripe::QuoteParam?]
    # @optional @param line_items [Array(Stripe::LineItemUpdateParams)?] A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?]
    # @optional @param subscription_data [Stripe::SubscriptionDataUpdateParams?]
    # @optional @param transfer_data [Stripe::PostQuotesRequestTransferData?]
    # @return nil
    def post_quotes_quote(
      *,
      quote : String? = nil,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_quotes_quote(quote: quote, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, header: header, invoice_settings: invoice_settings, line_items: line_items, metadata: metadata, on_behalf_of: on_behalf_of, subscription_data: subscription_data, transfer_data: transfer_data).execute(&block)
    end

    POST_QUOTES_QUOTE_MAX_LENGTH_FOR_QUOTE               = 5000
    POST_QUOTES_QUOTE_VALID_VALUES_FOR_COLLECTION_METHOD = String.static_array("charge_automatically", "send_invoice")
    POST_QUOTES_QUOTE_MAX_LENGTH_FOR_CUSTOMER            = 5000
    POST_QUOTES_QUOTE_VALID_VALUES_FOR_DESCRIPTION       = String.static_array("")
    POST_QUOTES_QUOTE_VALID_VALUES_FOR_FOOTER            = String.static_array("")
    POST_QUOTES_QUOTE_VALID_VALUES_FOR_HEADER            = String.static_array("")
    POST_QUOTES_QUOTE_VALID_VALUES_FOR_ON_BEHALF_OF      = String.static_array("")

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote(
      *,
      quote : String? = nil,
      application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      customer : String? = nil,
      default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      footer : String? = nil,
      header : String? = nil,
      invoice_settings : Stripe::QuoteParam? = nil,
      line_items : Array(Stripe::LineItemUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      transfer_data : Stripe::PostQuotesRequestTransferData? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.post_quotes_quote ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, POST_QUOTES_QUOTE_MAX_LENGTH_FOR_QUOTE)
        end
        unless (_application_fee_amount = application_fee_amount).nil?
          _application_fee_amount.validate if _application_fee_amount.is_a?(OpenApi::Validatable)
        end
        unless (_application_fee_percent = application_fee_percent).nil?
          _application_fee_percent.validate if _application_fee_percent.is_a?(OpenApi::Validatable)
        end
        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, POST_QUOTES_QUOTE_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_QUOTES_QUOTE_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_default_tax_rates = default_tax_rates).nil?
          _default_tax_rates.validate if _default_tax_rates.is_a?(OpenApi::Validatable)
        end
        unless (_description = description).nil?
          OpenApi::EnumValidator.validate("description", _description, POST_QUOTES_QUOTE_VALID_VALUES_FOR_DESCRIPTION)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_footer = footer).nil?
          OpenApi::EnumValidator.validate("footer", _footer, POST_QUOTES_QUOTE_VALID_VALUES_FOR_FOOTER)
        end
        unless (_header = header).nil?
          OpenApi::EnumValidator.validate("header", _header, POST_QUOTES_QUOTE_VALID_VALUES_FOR_HEADER)
        end
        unless (_invoice_settings = invoice_settings).nil?
          _invoice_settings.validate if _invoice_settings.is_a?(OpenApi::Validatable)
        end
        unless (_line_items = line_items).nil?
          OpenApi::ContainerValidator.validate(container: _line_items) if _line_items.is_a?(Array)
        end

        unless (_on_behalf_of = on_behalf_of).nil?
          OpenApi::EnumValidator.validate("on_behalf_of", _on_behalf_of, POST_QUOTES_QUOTE_VALID_VALUES_FOR_ON_BEHALF_OF)
        end
        unless (_subscription_data = subscription_data).nil?
          _subscription_data.validate if _subscription_data.is_a?(OpenApi::Validatable)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(application_fee_amount.to_json), "application_fee_amount")) if !application_fee_amount.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(application_fee_percent.to_json), "application_fee_percent")) if !application_fee_percent.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("collection_method", collection_method.to_s) if !collection_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_tax_rates.to_json), "default_tax_rates")) if !default_tax_rates.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(discounts.to_json), "discounts")) if !discounts.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("expires_at", expires_at.to_s) if !expires_at.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("footer", footer.to_s) if !footer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("header", header.to_s) if !header.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(invoice_settings.to_json), "invoice_settings")) if !invoice_settings.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(line_items.to_json), "line_items")) if !line_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(subscription_data.to_json), "subscription_data")) if !subscription_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QuotesApi.post_quotes_quote",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Accepts the specified quote.</p>
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Quote]
    def post_quotes_quote_accept(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Quote
      data, _status_code, _headers = post_quotes_quote_accept_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Accepts the specified quote.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Quote, Integer, Hash)] Stripe::Quote, response status code and response headers
    def post_quotes_quote_accept_with_http_info(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Quote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_quotes_quote_accept(quote: quote, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#post_quotes_quote_accept\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Quote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Accepts the specified quote.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_quotes_quote_accept(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_quotes_quote_accept(quote: quote, expand: expand).execute(&block)
    end

    POST_QUOTES_QUOTE_ACCEPT_MAX_LENGTH_FOR_QUOTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote_accept(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.post_quotes_quote_accept ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, POST_QUOTES_QUOTE_ACCEPT_MAX_LENGTH_FOR_QUOTE)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/accept".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QuotesApi.post_quotes_quote_accept",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels the quote.</p>
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Quote]
    def post_quotes_quote_cancel(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Quote
      data, _status_code, _headers = post_quotes_quote_cancel_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Cancels the quote.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Quote, Integer, Hash)] Stripe::Quote, response status code and response headers
    def post_quotes_quote_cancel_with_http_info(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Quote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_quotes_quote_cancel(quote: quote, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#post_quotes_quote_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Quote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels the quote.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_quotes_quote_cancel(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_quotes_quote_cancel(quote: quote, expand: expand).execute(&block)
    end

    POST_QUOTES_QUOTE_CANCEL_MAX_LENGTH_FOR_QUOTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote_cancel(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.post_quotes_quote_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, POST_QUOTES_QUOTE_CANCEL_MAX_LENGTH_FOR_QUOTE)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/cancel".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QuotesApi.post_quotes_quote_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Finalizes the quote.</p>
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    # @return [Stripe::Quote]
    def post_quotes_quote_finalize(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil
    ) : Stripe::Quote
      data, _status_code, _headers = post_quotes_quote_finalize_with_http_info(quote: quote, expand: expand, expires_at: expires_at)
      data
    end

    # &lt;p&gt;Finalizes the quote.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    # @return [Tuple(Stripe::Quote, Integer, Hash)] Stripe::Quote, response status code and response headers
    def post_quotes_quote_finalize_with_http_info(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil
    ) : Tuple(Stripe::Quote, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_quotes_quote_finalize(quote: quote, expand: expand, expires_at: expires_at)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: QuotesApi#post_quotes_quote_finalize\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Quote.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Finalizes the quote.&lt;/p&gt;
    # @required @param quote [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param expires_at [Int32?] A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    # @return nil
    def post_quotes_quote_finalize(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_quotes_quote_finalize(quote: quote, expand: expand, expires_at: expires_at).execute(&block)
    end

    POST_QUOTES_QUOTE_FINALIZE_MAX_LENGTH_FOR_QUOTE = 5000

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote_finalize(
      *,
      quote : String? = nil,
      expand : Array(String)? = nil,
      expires_at : Int64? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: QuotesApi.post_quotes_quote_finalize ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"quote\" is required and cannot be null") if quote.nil?
        unless (_quote = quote).nil?
          OpenApi::PrimitiveValidator.validate_max_length("quote", quote.to_s.size, POST_QUOTES_QUOTE_FINALIZE_MAX_LENGTH_FOR_QUOTE)
        end
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/finalize".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("expires_at", expires_at.to_s) if !expires_at.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QuotesApi.post_quotes_quote_finalize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
