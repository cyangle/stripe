#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/confirmation_token"
require "../models/error"

module Stripe
  class ConfirmationTokensApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieves an existing ConfirmationToken object</p>
    # @required @param confirmation_token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ConfirmationToken]
    def get_confirmation_tokens_confirmation_token(
      *,
      confirmation_token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ConfirmationToken
      data, _status_code, _headers = get_confirmation_tokens_confirmation_token_with_http_info(confirmation_token: confirmation_token, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing ConfirmationToken object&lt;/p&gt;
    # @required @param confirmation_token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ConfirmationToken, Integer, Hash)] Stripe::ConfirmationToken, response status code and response headers
    def get_confirmation_tokens_confirmation_token_with_http_info(
      *,
      confirmation_token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ConfirmationToken, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_confirmation_tokens_confirmation_token(confirmation_token: confirmation_token, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConfirmationTokensApi#get_confirmation_tokens_confirmation_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ConfirmationToken.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an existing ConfirmationToken object&lt;/p&gt;
    # @required @param confirmation_token [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_confirmation_tokens_confirmation_token(
      *,
      confirmation_token : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_confirmation_tokens_confirmation_token(confirmation_token: confirmation_token, expand: expand).execute(&block)
    end

    GET_CONFIRMATION_TOKENS_CONFIRMATION_TOKEN_MAX_LENGTH_FOR_CONFIRMATION_TOKEN = 5000

    # @return Crest::Request
    def build_api_request_for_get_confirmation_tokens_confirmation_token(
      *,
      confirmation_token : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConfirmationTokensApi.get_confirmation_tokens_confirmation_token ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"confirmation_token\" is required and cannot be null") if confirmation_token.nil?
        unless (_confirmation_token = confirmation_token).nil?
          OpenApi::PrimitiveValidator.validate_max_length("confirmation_token", confirmation_token.to_s.size, GET_CONFIRMATION_TOKENS_CONFIRMATION_TOKEN_MAX_LENGTH_FOR_CONFIRMATION_TOKEN)
        end
      end

      # resource path
      local_var_path = "/v1/confirmation_tokens/{confirmation_token}".sub("{" + "confirmation_token" + "}", URI.encode_path(confirmation_token.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ConfirmationTokensApi.get_confirmation_tokens_confirmation_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
