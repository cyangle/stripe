#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/created_param"
require "../models/error"
require "../models/forwarding_request"
require "../models/forwarding_request_list"

require "../models/request_param"

module Stripe
  class ForwardingApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Lists all ForwardingRequest objects.</p>
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param starting_after [String?] A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.
    # @optional @param ending_before [String?] A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.
    # @optional @param created [Stripe::CreatedParam?] Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ForwardingRequestList]
    def get_forwarding_requests(
      *,
      limit : Int64? = nil,
      starting_after : String? = nil,
      ending_before : String? = nil,
      created : Stripe::CreatedParam? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ForwardingRequestList
      data, _status_code, _headers = get_forwarding_requests_with_http_info(limit: limit, starting_after: starting_after, ending_before: ending_before, created: created, expand: expand)
      data
    end

    # &lt;p&gt;Lists all ForwardingRequest objects.&lt;/p&gt;
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param starting_after [String?] A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.
    # @optional @param ending_before [String?] A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.
    # @optional @param created [Stripe::CreatedParam?] Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ForwardingRequestList, Integer, Hash)] Stripe::ForwardingRequestList, response status code and response headers
    def get_forwarding_requests_with_http_info(
      *,
      limit : Int64? = nil,
      starting_after : String? = nil,
      ending_before : String? = nil,
      created : Stripe::CreatedParam? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ForwardingRequestList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_forwarding_requests(limit: limit, starting_after: starting_after, ending_before: ending_before, created: created, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ForwardingApi#get_forwarding_requests\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ForwardingRequestList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Lists all ForwardingRequest objects.&lt;/p&gt;
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param starting_after [String?] A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.
    # @optional @param ending_before [String?] A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.
    # @optional @param created [Stripe::CreatedParam?] Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_forwarding_requests(
      *,
      limit : Int64? = nil,
      starting_after : String? = nil,
      ending_before : String? = nil,
      created : Stripe::CreatedParam? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_forwarding_requests(limit: limit, starting_after: starting_after, ending_before: ending_before, created: created, expand: expand).execute(&block)
    end

    GET_FORWARDING_REQUESTS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_FORWARDING_REQUESTS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_forwarding_requests(
      *,
      limit : Int64? = nil,
      starting_after : String? = nil,
      ending_before : String? = nil,
      created : Stripe::CreatedParam? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ForwardingApi.get_forwarding_requests ..." }
      end

      if client_side_validation?
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_FORWARDING_REQUESTS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_FORWARDING_REQUESTS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/forwarding/requests"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ForwardingApi.get_forwarding_requests",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a ForwardingRequest object.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::ForwardingRequest]
    def get_forwarding_requests_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::ForwardingRequest
      data, _status_code, _headers = get_forwarding_requests_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a ForwardingRequest object.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::ForwardingRequest, Integer, Hash)] Stripe::ForwardingRequest, response status code and response headers
    def get_forwarding_requests_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::ForwardingRequest, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_forwarding_requests_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ForwardingApi#get_forwarding_requests_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ForwardingRequest.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a ForwardingRequest object.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_forwarding_requests_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_forwarding_requests_id(id: id, expand: expand).execute(&block)
    end

    GET_FORWARDING_REQUESTS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_forwarding_requests_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ForwardingApi.get_forwarding_requests_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_FORWARDING_REQUESTS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/forwarding/requests/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ForwardingApi.get_forwarding_requests_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a ForwardingRequest object.</p>
    # @required @param payment_method [String?] The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
    # @required @param replacements [Array(String)?] The field kinds to be replaced in the forwarded request.
    # @required @param url [String?] The destination URL for the forwarded request. Must be supported by the config.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param request [Stripe::RequestParam?]
    # @return [Stripe::ForwardingRequest]
    def post_forwarding_requests(
      *,
      payment_method : String? = nil,
      replacements : Array(String)? = nil,
      url : String? = nil,
      expand : Array(String)? = nil,
      request : Stripe::RequestParam? = nil
    ) : Stripe::ForwardingRequest
      data, _status_code, _headers = post_forwarding_requests_with_http_info(payment_method: payment_method, replacements: replacements, url: url, expand: expand, request: request)
      data
    end

    # &lt;p&gt;Creates a ForwardingRequest object.&lt;/p&gt;
    # @required @param payment_method [String?] The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
    # @required @param replacements [Array(String)?] The field kinds to be replaced in the forwarded request.
    # @required @param url [String?] The destination URL for the forwarded request. Must be supported by the config.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param request [Stripe::RequestParam?]
    # @return [Tuple(Stripe::ForwardingRequest, Integer, Hash)] Stripe::ForwardingRequest, response status code and response headers
    def post_forwarding_requests_with_http_info(
      *,
      payment_method : String? = nil,
      replacements : Array(String)? = nil,
      url : String? = nil,
      expand : Array(String)? = nil,
      request : Stripe::RequestParam? = nil
    ) : Tuple(Stripe::ForwardingRequest, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_forwarding_requests(payment_method: payment_method, replacements: replacements, url: url, expand: expand, request: request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ForwardingApi#post_forwarding_requests\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::ForwardingRequest.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a ForwardingRequest object.&lt;/p&gt;
    # @required @param payment_method [String?] The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
    # @required @param replacements [Array(String)?] The field kinds to be replaced in the forwarded request.
    # @required @param url [String?] The destination URL for the forwarded request. Must be supported by the config.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param request [Stripe::RequestParam?]
    # @return nil
    def post_forwarding_requests(
      *,
      payment_method : String? = nil,
      replacements : Array(String)? = nil,
      url : String? = nil,
      expand : Array(String)? = nil,
      request : Stripe::RequestParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_forwarding_requests(payment_method: payment_method, replacements: replacements, url: url, expand: expand, request: request).execute(&block)
    end

    POST_FORWARDING_REQUESTS_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000
    POST_FORWARDING_REQUESTS_VALID_VALUES_FOR_REPLACEMENTS = String.static_array("card_cvc", "card_expiry", "card_number", "cardholder_name")
    POST_FORWARDING_REQUESTS_MAX_LENGTH_FOR_URL            = 5000

    # @return Crest::Request
    def build_api_request_for_post_forwarding_requests(
      *,
      payment_method : String? = nil,
      replacements : Array(String)? = nil,
      url : String? = nil,
      expand : Array(String)? = nil,
      request : Stripe::RequestParam? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ForwardingApi.post_forwarding_requests ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_method\" is required and cannot be null") if payment_method.nil?
        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_FORWARDING_REQUESTS_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        raise ArgumentError.new("\"replacements\" is required and cannot be null") if replacements.nil?
        unless (_replacements = replacements).nil?
          OpenApi::EnumValidator.validate("replacements", _replacements, POST_FORWARDING_REQUESTS_VALID_VALUES_FOR_REPLACEMENTS)
        end
        raise ArgumentError.new("\"url\" is required and cannot be null") if url.nil?
        unless (_url = url).nil?
          OpenApi::PrimitiveValidator.validate_max_length("url", url.to_s.size, POST_FORWARDING_REQUESTS_MAX_LENGTH_FOR_URL)
        end

        unless (_request = request).nil?
          _request.validate if _request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/forwarding/requests"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method", payment_method.to_s) if !payment_method.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(replacements.to_json), "replacements")) if !replacements.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(request.to_json), "request")) if !request.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("url", url.to_s) if !url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ForwardingApi.post_forwarding_requests",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
