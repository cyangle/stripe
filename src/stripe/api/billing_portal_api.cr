#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class BillingPortalApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).
    # @optional @param is_default [Bool?] Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PortalConfigurationList]
    def get_billing_portal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      is_default : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PortalConfigurationList
      data, _status_code, _headers = get_billing_portal_configurations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, is_default: is_default, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of configurations that describe the functionality of the customer portal.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).
    # @optional @param is_default [Bool?] Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PortalConfigurationList, Integer, Hash)] Stripe::PortalConfigurationList, response status code and response headers
    def get_billing_portal_configurations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      is_default : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PortalConfigurationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_billing_portal_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, is_default: is_default, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: BillingPortalApi#get_billing_portal_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PortalConfigurationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of configurations that describe the functionality of the customer portal.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).
    # @optional @param is_default [Bool?] Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_billing_portal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      is_default : Bool? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_billing_portal_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, is_default: is_default, expand: expand).execute(&block)
    end

    GET_BILLING_PORTAL_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_BILLING_PORTAL_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_billing_portal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      is_default : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: BillingPortalApi.get_billing_portal_configurations ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_BILLING_PORTAL_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_BILLING_PORTAL_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/billing_portal/configurations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["is_default"] = is_default.to_s if !is_default.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BillingPortalApi.get_billing_portal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::BillingPortalConfiguration]
    def get_billing_portal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::BillingPortalConfiguration
      data, _status_code, _headers = get_billing_portal_configurations_configuration_with_http_info(configuration: configuration, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::BillingPortalConfiguration, Integer, Hash)] Stripe::BillingPortalConfiguration, response status code and response headers
    def get_billing_portal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::BillingPortalConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_billing_portal_configurations_configuration(configuration: configuration, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: BillingPortalApi#get_billing_portal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingPortalConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_billing_portal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_billing_portal_configurations_configuration(configuration: configuration, expand: expand).execute(&block)
    end

    GET_BILLING_PORTAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_billing_portal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: BillingPortalApi.get_billing_portal_configurations_configuration ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, GET_BILLING_PORTAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
      end

      # resource path
      local_var_path = "/v1/billing_portal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BillingPortalApi.get_billing_portal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
    # @required @param business_profile [Stripe::BusinessProfileCreateParam?]
    # @required @param features [Stripe::FeaturesCreationParam?]
    # @optional @param default_return_url [Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param login_page [Stripe::LoginPageCreateParam?]
    # @return [Stripe::BillingPortalConfiguration]
    def post_billing_portal_configurations(
      *,
      business_profile : Stripe::BusinessProfileCreateParam? = nil,
      features : Stripe::FeaturesCreationParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      login_page : Stripe::LoginPageCreateParam? = nil
    ) : Stripe::BillingPortalConfiguration
      data, _status_code, _headers = post_billing_portal_configurations_with_http_info(business_profile: business_profile, features: features, default_return_url: default_return_url, expand: expand, login_page: login_page)
      data
    end

    # &lt;p&gt;Creates a configuration that describes the functionality and behavior of a PortalSession&lt;/p&gt;
    # @required @param business_profile [Stripe::BusinessProfileCreateParam?]
    # @required @param features [Stripe::FeaturesCreationParam?]
    # @optional @param default_return_url [Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param login_page [Stripe::LoginPageCreateParam?]
    # @return [Tuple(Stripe::BillingPortalConfiguration, Integer, Hash)] Stripe::BillingPortalConfiguration, response status code and response headers
    def post_billing_portal_configurations_with_http_info(
      *,
      business_profile : Stripe::BusinessProfileCreateParam? = nil,
      features : Stripe::FeaturesCreationParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      login_page : Stripe::LoginPageCreateParam? = nil
    ) : Tuple(Stripe::BillingPortalConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_portal_configurations(business_profile: business_profile, features: features, default_return_url: default_return_url, expand: expand, login_page: login_page)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: BillingPortalApi#post_billing_portal_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingPortalConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a configuration that describes the functionality and behavior of a PortalSession&lt;/p&gt;
    # @required @param business_profile [Stripe::BusinessProfileCreateParam?]
    # @required @param features [Stripe::FeaturesCreationParam?]
    # @optional @param default_return_url [Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param login_page [Stripe::LoginPageCreateParam?]
    # @return nil
    def post_billing_portal_configurations(
      *,
      business_profile : Stripe::BusinessProfileCreateParam? = nil,
      features : Stripe::FeaturesCreationParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      login_page : Stripe::LoginPageCreateParam? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_portal_configurations(business_profile: business_profile, features: features, default_return_url: default_return_url, expand: expand, login_page: login_page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_billing_portal_configurations(
      *,
      business_profile : Stripe::BusinessProfileCreateParam? = nil,
      features : Stripe::FeaturesCreationParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      login_page : Stripe::LoginPageCreateParam? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: BillingPortalApi.post_billing_portal_configurations ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"business_profile\" is required and cannot be null") if business_profile.nil?
        unless (_business_profile = business_profile).nil?
          _business_profile.validate if _business_profile.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"features\" is required and cannot be null") if features.nil?
        unless (_features = features).nil?
          _features.validate if _features.is_a?(OpenApi::Validatable)
        end
        unless (_default_return_url = default_return_url).nil?
          _default_return_url.validate if _default_return_url.is_a?(OpenApi::Validatable)
        end

        unless (_login_page = login_page).nil?
          _login_page.validate if _login_page.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/billing_portal/configurations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["business_profile"] = business_profile.to_s if !business_profile.nil?
      form_params["default_return_url"] = default_return_url.to_s if !default_return_url.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?
      form_params["login_page"] = login_page.to_s if !login_page.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingPortalApi.post_billing_portal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a configuration that describes the functionality of the customer portal.</p>
    # @required @param configuration [String?]
    # @optional @param active [Bool?] Whether the configuration is active and can be used to create portal sessions.
    # @optional @param business_profile [Stripe::BusinessProfileUpdateParam?]
    # @optional @param default_return_url [Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeaturesUpdatingParam?]
    # @optional @param login_page [Stripe::LoginPageUpdateParam?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::BillingPortalConfiguration]
    def post_billing_portal_configurations_configuration(
      *,
      configuration : String? = nil,
      active : Bool? = nil,
      business_profile : Stripe::BusinessProfileUpdateParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      features : Stripe::FeaturesUpdatingParam? = nil,
      login_page : Stripe::LoginPageUpdateParam? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::BillingPortalConfiguration
      data, _status_code, _headers = post_billing_portal_configurations_configuration_with_http_info(configuration: configuration, active: active, business_profile: business_profile, default_return_url: default_return_url, expand: expand, features: features, login_page: login_page, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param active [Bool?] Whether the configuration is active and can be used to create portal sessions.
    # @optional @param business_profile [Stripe::BusinessProfileUpdateParam?]
    # @optional @param default_return_url [Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeaturesUpdatingParam?]
    # @optional @param login_page [Stripe::LoginPageUpdateParam?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::BillingPortalConfiguration, Integer, Hash)] Stripe::BillingPortalConfiguration, response status code and response headers
    def post_billing_portal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      active : Bool? = nil,
      business_profile : Stripe::BusinessProfileUpdateParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      features : Stripe::FeaturesUpdatingParam? = nil,
      login_page : Stripe::LoginPageUpdateParam? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::BillingPortalConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_portal_configurations_configuration(configuration: configuration, active: active, business_profile: business_profile, default_return_url: default_return_url, expand: expand, features: features, login_page: login_page, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: BillingPortalApi#post_billing_portal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingPortalConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param active [Bool?] Whether the configuration is active and can be used to create portal sessions.
    # @optional @param business_profile [Stripe::BusinessProfileUpdateParam?]
    # @optional @param default_return_url [Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param features [Stripe::FeaturesUpdatingParam?]
    # @optional @param login_page [Stripe::LoginPageUpdateParam?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_billing_portal_configurations_configuration(
      *,
      configuration : String? = nil,
      active : Bool? = nil,
      business_profile : Stripe::BusinessProfileUpdateParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      features : Stripe::FeaturesUpdatingParam? = nil,
      login_page : Stripe::LoginPageUpdateParam? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_portal_configurations_configuration(configuration: configuration, active: active, business_profile: business_profile, default_return_url: default_return_url, expand: expand, features: features, login_page: login_page, metadata: metadata).execute(&block)
    end

    POST_BILLING_PORTAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_billing_portal_configurations_configuration(
      *,
      configuration : String? = nil,
      active : Bool? = nil,
      business_profile : Stripe::BusinessProfileUpdateParam? = nil,
      default_return_url : Stripe::PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil,
      expand : Array(String)? = nil,
      features : Stripe::FeaturesUpdatingParam? = nil,
      login_page : Stripe::LoginPageUpdateParam? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: BillingPortalApi.post_billing_portal_configurations_configuration ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, POST_BILLING_PORTAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end

        unless (_business_profile = business_profile).nil?
          _business_profile.validate if _business_profile.is_a?(OpenApi::Validatable)
        end
        unless (_default_return_url = default_return_url).nil?
          _default_return_url.validate if _default_return_url.is_a?(OpenApi::Validatable)
        end

        unless (_features = features).nil?
          _features.validate if _features.is_a?(OpenApi::Validatable)
        end
        unless (_login_page = login_page).nil?
          _login_page.validate if _login_page.is_a?(OpenApi::Validatable)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/billing_portal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["business_profile"] = business_profile.to_s if !business_profile.nil?
      form_params["default_return_url"] = default_return_url.to_s if !default_return_url.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?
      form_params["login_page"] = login_page.to_s if !login_page.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingPortalApi.post_billing_portal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a session of the customer portal.</p>
    # @required @param customer [String?] The ID of an existing customer.
    # @optional @param configuration [String?] The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param locale [String?] The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
    # @optional @param on_behalf_of [String?] The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
    # @optional @param return_url [String?] The default URL to redirect customers to when they click on the portal's link to return to your website.
    # @return [Stripe::BillingPortalSession]
    def post_billing_portal_sessions(
      *,
      customer : String? = nil,
      configuration : String? = nil,
      expand : Array(String)? = nil,
      locale : String? = nil,
      on_behalf_of : String? = nil,
      return_url : String? = nil
    ) : Stripe::BillingPortalSession
      data, _status_code, _headers = post_billing_portal_sessions_with_http_info(customer: customer, configuration: configuration, expand: expand, locale: locale, on_behalf_of: on_behalf_of, return_url: return_url)
      data
    end

    # &lt;p&gt;Creates a session of the customer portal.&lt;/p&gt;
    # @required @param customer [String?] The ID of an existing customer.
    # @optional @param configuration [String?] The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param locale [String?] The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
    # @optional @param on_behalf_of [String?] The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
    # @optional @param return_url [String?] The default URL to redirect customers to when they click on the portal's link to return to your website.
    # @return [Tuple(Stripe::BillingPortalSession, Integer, Hash)] Stripe::BillingPortalSession, response status code and response headers
    def post_billing_portal_sessions_with_http_info(
      *,
      customer : String? = nil,
      configuration : String? = nil,
      expand : Array(String)? = nil,
      locale : String? = nil,
      on_behalf_of : String? = nil,
      return_url : String? = nil
    ) : Tuple(Stripe::BillingPortalSession, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_billing_portal_sessions(customer: customer, configuration: configuration, expand: expand, locale: locale, on_behalf_of: on_behalf_of, return_url: return_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: BillingPortalApi#post_billing_portal_sessions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::BillingPortalSession.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a session of the customer portal.&lt;/p&gt;
    # @required @param customer [String?] The ID of an existing customer.
    # @optional @param configuration [String?] The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param locale [String?] The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
    # @optional @param on_behalf_of [String?] The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
    # @optional @param return_url [String?] The default URL to redirect customers to when they click on the portal's link to return to your website.
    # @return nil
    def post_billing_portal_sessions(
      *,
      customer : String? = nil,
      configuration : String? = nil,
      expand : Array(String)? = nil,
      locale : String? = nil,
      on_behalf_of : String? = nil,
      return_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_billing_portal_sessions(customer: customer, configuration: configuration, expand: expand, locale: locale, on_behalf_of: on_behalf_of, return_url: return_url).execute(&block)
    end

    POST_BILLING_PORTAL_SESSIONS_MAX_LENGTH_FOR_CUSTOMER      = 5000
    POST_BILLING_PORTAL_SESSIONS_MAX_LENGTH_FOR_CONFIGURATION = 5000
    POST_BILLING_PORTAL_SESSIONS_VALID_VALUES_FOR_LOCALE      = String.static_array("auto", "bg", "cs", "da", "de", "el", "en", "en-AU", "en-CA", "en-GB", "en-IE", "en-IN", "en-NZ", "en-SG", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW")

    # @return Crest::Request
    def build_api_request_for_post_billing_portal_sessions(
      *,
      customer : String? = nil,
      configuration : String? = nil,
      expand : Array(String)? = nil,
      locale : String? = nil,
      on_behalf_of : String? = nil,
      return_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: BillingPortalApi.post_billing_portal_sessions ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"customer\" is required and cannot be null") if customer.nil?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_BILLING_PORTAL_SESSIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, POST_BILLING_PORTAL_SESSIONS_MAX_LENGTH_FOR_CONFIGURATION)
        end

        unless (_locale = locale).nil?
          OpenApi::EnumValidator.validate("locale", _locale, POST_BILLING_PORTAL_SESSIONS_VALID_VALUES_FOR_LOCALE)
        end
      end

      # resource path
      local_var_path = "/v1/billing_portal/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["configuration"] = configuration.to_s if !configuration.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["locale"] = locale.to_s if !locale.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BillingPortalApi.post_billing_portal_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
