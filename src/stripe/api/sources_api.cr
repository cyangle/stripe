#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class SourcesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
    # @required @param source [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the source. Required if a publishable key is used to retrieve the source.
    # @return [Stripe::Source]
    def get_sources_source(
      *,
      source : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Stripe::Source
      data, _status_code, _headers = get_sources_source_with_http_info(source: source, expand: expand, client_secret: client_secret)
      data
    end

    # &lt;p&gt;Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
    # @required @param source [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the source. Required if a publishable key is used to retrieve the source.
    # @return [Tuple(Stripe::Source, Integer, Hash)] Stripe::Source, response status code and response headers
    def get_sources_source_with_http_info(
      *,
      source : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Tuple(Stripe::Source, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_sources_source(source: source, expand: expand, client_secret: client_secret)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SourcesApi#get_sources_source\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Source.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
    # @required @param source [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param client_secret [String?] The client secret of the source. Required if a publishable key is used to retrieve the source.
    # @return nil
    def get_sources_source(
      *,
      source : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_sources_source(source: source, expand: expand, client_secret: client_secret).execute(&block)
    end

    GET_SOURCES_SOURCE_MAX_LENGTH_FOR_SOURCE        = 5000
    GET_SOURCES_SOURCE_MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # @return Crest::Request
    def build_api_request_for_get_sources_source(
      *,
      source : String? = nil,
      expand : Array(Array(String))? = nil,
      client_secret : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SourcesApi.get_sources_source ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"source\" is required and cannot be null") if source.nil?
        unless (_source = source).nil?
          OpenApi::PrimitiveValidator.validate_max_length("source", source.to_s.size, GET_SOURCES_SOURCE_MAX_LENGTH_FOR_SOURCE)
        end

        unless (_client_secret = client_secret).nil?
          OpenApi::PrimitiveValidator.validate_max_length("client_secret", client_secret.to_s.size, GET_SOURCES_SOURCE_MAX_LENGTH_FOR_CLIENT_SECRET)
        end
      end

      # resource path
      local_var_path = "/v1/sources/{source}".sub("{" + "source" + "}", URI.encode_path(source.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SourcesApi.get_sources_source",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new source object.</p>
    # @optional @param post_sources_request [Stripe::PostSourcesRequest?]
    # @return [Stripe::Source]
    def post_sources(
      *,
      post_sources_request : Stripe::PostSourcesRequest? = nil
    ) : Stripe::Source
      data, _status_code, _headers = post_sources_with_http_info(post_sources_request: post_sources_request)
      data
    end

    # &lt;p&gt;Creates a new source object.&lt;/p&gt;
    # @optional @param post_sources_request [Stripe::PostSourcesRequest?]
    # @return [Tuple(Stripe::Source, Integer, Hash)] Stripe::Source, response status code and response headers
    def post_sources_with_http_info(
      *,
      post_sources_request : Stripe::PostSourcesRequest? = nil
    ) : Tuple(Stripe::Source, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_sources(post_sources_request: post_sources_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SourcesApi#post_sources\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Source.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new source object.&lt;/p&gt;
    # @optional @param post_sources_request [Stripe::PostSourcesRequest?]
    # @return nil
    def post_sources(
      *,
      post_sources_request : Stripe::PostSourcesRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_sources(post_sources_request: post_sources_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_sources(
      *,
      post_sources_request : Stripe::PostSourcesRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SourcesApi.post_sources ..." }
      end

      if client_side_validation
        unless (_post_sources_request = post_sources_request).nil?
          _post_sources_request.validate if _post_sources_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/sources"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_sources_request, content_type: header_params["Content-Type"]?) if !post_sources_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SourcesApi.post_sources",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href=\"/docs/sources\">payment method guides</a> for more detail.</p>
    # @required @param source [String?]
    # @optional @param post_sources_source_request [Stripe::PostSourcesSourceRequest?]
    # @return [Stripe::Source]
    def post_sources_source(
      *,
      source : String? = nil,
      post_sources_source_request : Stripe::PostSourcesSourceRequest? = nil
    ) : Stripe::Source
      data, _status_code, _headers = post_sources_source_with_http_info(source: source, post_sources_source_request: post_sources_source_request)
      data
    end

    # &lt;p&gt;Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts the &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;owner&lt;/code&gt; as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our &lt;a href&#x3D;\&quot;/docs/sources\&quot;&gt;payment method guides&lt;/a&gt; for more detail.&lt;/p&gt;
    # @required @param source [String?]
    # @optional @param post_sources_source_request [Stripe::PostSourcesSourceRequest?]
    # @return [Tuple(Stripe::Source, Integer, Hash)] Stripe::Source, response status code and response headers
    def post_sources_source_with_http_info(
      *,
      source : String? = nil,
      post_sources_source_request : Stripe::PostSourcesSourceRequest? = nil
    ) : Tuple(Stripe::Source, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_sources_source(source: source, post_sources_source_request: post_sources_source_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SourcesApi#post_sources_source\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Source.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts the &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;owner&lt;/code&gt; as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our &lt;a href&#x3D;\&quot;/docs/sources\&quot;&gt;payment method guides&lt;/a&gt; for more detail.&lt;/p&gt;
    # @required @param source [String?]
    # @optional @param post_sources_source_request [Stripe::PostSourcesSourceRequest?]
    # @return nil
    def post_sources_source(
      *,
      source : String? = nil,
      post_sources_source_request : Stripe::PostSourcesSourceRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_sources_source(source: source, post_sources_source_request: post_sources_source_request).execute(&block)
    end

    POST_SOURCES_SOURCE_MAX_LENGTH_FOR_SOURCE = 5000

    # @return Crest::Request
    def build_api_request_for_post_sources_source(
      *,
      source : String? = nil,
      post_sources_source_request : Stripe::PostSourcesSourceRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SourcesApi.post_sources_source ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"source\" is required and cannot be null") if source.nil?
        unless (_source = source).nil?
          OpenApi::PrimitiveValidator.validate_max_length("source", source.to_s.size, POST_SOURCES_SOURCE_MAX_LENGTH_FOR_SOURCE)
        end
        unless (_post_sources_source_request = post_sources_source_request).nil?
          _post_sources_source_request.validate if _post_sources_source_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/sources/{source}".sub("{" + "source" + "}", URI.encode_path(source.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_sources_source_request, content_type: header_params["Content-Type"]?) if !post_sources_source_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SourcesApi.post_sources_source",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
