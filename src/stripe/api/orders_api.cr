#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class OrdersApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return orders for the given customer.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::OrdersV2ResourceOrderList]
    def get_orders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::OrdersV2ResourceOrderList
      data, _status_code, _headers = get_orders_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return orders for the given customer.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::OrdersV2ResourceOrderList, Integer, Hash)] Stripe::OrdersV2ResourceOrderList, response status code and response headers
    def get_orders_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::OrdersV2ResourceOrderList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_orders(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: OrdersApi#get_orders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::OrdersV2ResourceOrderList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return orders for the given customer.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_orders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_orders(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, expand: expand).execute(&block)
    end

    GET_ORDERS_MAX_LENGTH_FOR_CUSTOMER = 5000

    # @return Crest::Request
    def build_api_request_for_get_orders(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: OrdersApi.get_orders ..." }
      end

      if client_side_validation
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_ORDERS_MAX_LENGTH_FOR_CUSTOMER)
        end
      end

      # resource path
      local_var_path = "/v1/orders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "OrdersApi.get_orders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Order]
    def get_orders_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Order
      data, _status_code, _headers = get_orders_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Order, Integer, Hash)] Stripe::Order, response status code and response headers
    def get_orders_id_with_http_info(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Order, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_orders_id(id: id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: OrdersApi#get_orders_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Order.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_orders_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_orders_id(id: id, expand: expand).execute(&block)
    end

    GET_ORDERS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_orders_id(
      *,
      id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: OrdersApi.get_orders_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, GET_ORDERS_ID_MAX_LENGTH_FOR_ID)
        end
      end

      # resource path
      local_var_path = "/v1/orders/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "OrdersApi.get_orders_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>open</code> order object.</p>
    # @required @param post_orders_request [Stripe::PostOrdersRequest?]
    # @return [Stripe::Order]
    def post_orders(
      *,
      post_orders_request : Stripe::PostOrdersRequest? = nil
    ) : Stripe::Order
      data, _status_code, _headers = post_orders_with_http_info(post_orders_request: post_orders_request)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;open&lt;/code&gt; order object.&lt;/p&gt;
    # @required @param post_orders_request [Stripe::PostOrdersRequest?]
    # @return [Tuple(Stripe::Order, Integer, Hash)] Stripe::Order, response status code and response headers
    def post_orders_with_http_info(
      *,
      post_orders_request : Stripe::PostOrdersRequest? = nil
    ) : Tuple(Stripe::Order, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_orders(post_orders_request: post_orders_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: OrdersApi#post_orders\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Order.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;open&lt;/code&gt; order object.&lt;/p&gt;
    # @required @param post_orders_request [Stripe::PostOrdersRequest?]
    # @return nil
    def post_orders(
      *,
      post_orders_request : Stripe::PostOrdersRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_orders(post_orders_request: post_orders_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_orders(
      *,
      post_orders_request : Stripe::PostOrdersRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: OrdersApi.post_orders ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_orders_request\" is required and cannot be null") if post_orders_request.nil?
        unless (_post_orders_request = post_orders_request).nil?
          _post_orders_request.validate if _post_orders_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/orders"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_orders_request, content_type: header_params["Content-Type"]?) if !post_orders_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "OrdersApi.post_orders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param id [String?]
    # @optional @param post_orders_id_request [Stripe::PostOrdersIdRequest?]
    # @return [Stripe::Order]
    def post_orders_id(
      *,
      id : String? = nil,
      post_orders_id_request : Stripe::PostOrdersIdRequest? = nil
    ) : Stripe::Order
      data, _status_code, _headers = post_orders_id_with_http_info(id: id, post_orders_id_request: post_orders_id_request)
      data
    end

    # &lt;p&gt;Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param post_orders_id_request [Stripe::PostOrdersIdRequest?]
    # @return [Tuple(Stripe::Order, Integer, Hash)] Stripe::Order, response status code and response headers
    def post_orders_id_with_http_info(
      *,
      id : String? = nil,
      post_orders_id_request : Stripe::PostOrdersIdRequest? = nil
    ) : Tuple(Stripe::Order, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_orders_id(id: id, post_orders_id_request: post_orders_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: OrdersApi#post_orders_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Order.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param id [String?]
    # @optional @param post_orders_id_request [Stripe::PostOrdersIdRequest?]
    # @return nil
    def post_orders_id(
      *,
      id : String? = nil,
      post_orders_id_request : Stripe::PostOrdersIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_orders_id(id: id, post_orders_id_request: post_orders_id_request).execute(&block)
    end

    POST_ORDERS_ID_MAX_LENGTH_FOR_ID = 5000

    # @return Crest::Request
    def build_api_request_for_post_orders_id(
      *,
      id : String? = nil,
      post_orders_id_request : Stripe::PostOrdersIdRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: OrdersApi.post_orders_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
        unless (_id = id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("id", id.to_s.size, POST_ORDERS_ID_MAX_LENGTH_FOR_ID)
        end
        unless (_post_orders_id_request = post_orders_id_request).nil?
          _post_orders_id_request.validate if _post_orders_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/orders/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_orders_id_request, content_type: header_params["Content-Type"]?) if !post_orders_id_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "OrdersApi.post_orders_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
